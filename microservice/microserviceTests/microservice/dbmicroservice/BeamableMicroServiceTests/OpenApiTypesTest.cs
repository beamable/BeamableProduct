using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common.Content;
using Beamable.Microservice.Tests.Socket;
using Beamable.Server;
using Beamable.Server.Common;
using Newtonsoft.Json;
using NUnit.Framework;

namespace microserviceTests.microservice.dbmicroservice.BeamableMicroServiceTests;

public class OpenApiTypesTest : CommonTest
{
    
    [Test]
    [NonParallelizable]
    public async Task Call_PassAutoGeneratedType()
    {
        TestSocket testSocket = null;
        var ms = new TestSetup(new TestSocketProvider(socket =>
        {
            testSocket = socket;
            socket.AddStandardMessageHandlers()
                .AddMessageHandler(
                    MessageMatcher
                        .WithReqId(1)
                        .WithStatus(200)
                        .WithPayload<int>(n => n == 2)
                    ,
                    MessageResponder.NoResponse(),
                    MessageFrequency.OnlyOnce()
                );
        }));

        await ms.Start<OpenApiMicroservice>(new TestArgs());
        Assert.IsTrue(ms.HasInitialized);

        OpenApiMicroservice.received = null;

        var lobby = new Lobby
        {
            created = new OptionalDateTime(DateTime.Now),
            matchType = new OptionalMatchType(new MatchType
            {
                id = "toast",
                maxWaitDurationSecs = 4,
                teams = new OptionalArrayOfTeamContentProto(new TeamContentProto[]
                {
                    new TeamContentProto
                    {
                        name = "b",
                        maxPlayers = 3
                    }
                })
            }),
            data = new OptionalMapOfString(new Dictionary<string, string>
            {
                ["a"] = "aa",
                ["b"] = "bb",
            })
        };
        var req = JsonConvert.SerializeObject(lobby, Formatting.Indented, UnitySerializationSettings.Instance);
        
        testSocket.SendToClient($@"
{{
    ""id"": 1, 
    ""path"": ""micro_openapi/Lobby"",
    ""body"": {{""lobby"": {req} }},
    ""from"": 1,
    ""method"": ""post""
}}"
            );

        // simulate shutdown event...
        await ms.OnShutdown(this, null);
        Assert.IsTrue(testSocket.AllMocksCalled());

        var got = OpenApiMicroservice.received;
        Assert.That(got.created.HasValue, Is.True);
        Assert.That(got.matchType.Value.id.Value, Is.EqualTo(lobby.matchType.Value.id.Value));
        Assert.That(got.matchType.Value.teams.Value.Length, Is.EqualTo(lobby.matchType.Value.teams.Value.Length));
        Assert.That(got.matchType.Value.teams.Value[0].name.Value, Is.EqualTo(lobby.matchType.Value.teams.Value[0].name.Value));
    }


}

[Microservice("openapi", EnableEagerContentLoading = false)]
public class OpenApiMicroservice : Microservice
{
    public static Lobby received;
    [ClientCallable]
    public int Lobby(Lobby lobby)
    {
        received = lobby;
        return lobby.data.Value.Keys.Count;
    }
}