using Beamable.Api.Autogenerated.Models;
using Beamable.Common.Content;
using Beamable.Server.Common;
using Newtonsoft.Json;
using NUnit.Framework;
using System.Threading.Tasks;

namespace microserviceTests.microservice.dbmicroservice.BeamableMicroServiceTests;

public class SerializeOptionalStringTests : CommonTest
{
	[Test]
	[NonParallelizable]
	public async Task SerializeAnnouncement()
	{
		const string JSON =
			"{\n  \"announcements\": [\n    {\n      \"id\": \"howdy\",\n      \"channel\": \"main\",\n      \"title\": \"title\",\n      \"summary\": \"summary\",\n      \"body\": \"body\",\n      \"attachments\": [],\n      \"gift\": {\n        \"description\": \"hello\"\n      },\n      \"isRead\": false,\n      \"isClaimed\": false,\n      \"isDeleted\": false,\n      \"clientDataList\": []\n    }\n  ]\n}";
		var x = JsonConvert.DeserializeObject<AnnouncementQueryResponse>(JSON, UnitySerializationSettings.Instance);

		Assert.That(x.announcements[0].gift.Value.description.Value, Is.EqualTo("hello"));
	}
	
	[Test]
	[NonParallelizable]
	public async Task SerializeAnnouncement_NoValue()
	{
		const string JSON =
			"{\n  \"announcements\": [\n    {\n      \"id\": \"howdy\",\n      \"channel\": \"main\",\n      \"title\": \"title\",\n      \"summary\": \"summary\",\n      \"body\": \"body\",\n      \"attachments\": [],\n      \"gift\": {\n      },\n      \"isRead\": false,\n      \"isClaimed\": false,\n      \"isDeleted\": false,\n      \"clientDataList\": []\n    }\n  ]\n}";
		var x = JsonConvert.DeserializeObject<AnnouncementQueryResponse>(JSON, UnitySerializationSettings.Instance);

		Assert.That(x.announcements[0].gift.Value.description.HasValue, Is.False);
	}

	[Test]
	[NonParallelizable]
	public async Task SerializeSample()
	{
		const string JSON = @"{
""x"": ""hello""
}";
		var x = JsonConvert.DeserializeObject<Sample>(JSON, UnitySerializationSettings.Instance);

		Assert.That(x.x.Value, Is.EqualTo("hello"));
	}

	[Test]
	[NonParallelizable]
	public async Task SerializeSample_NoValue()
	{
		const string JSON = @"{
}";
		var x = JsonConvert.DeserializeObject<Sample>(JSON, UnitySerializationSettings.Instance);

		Assert.That(x.x.HasValue, Is.False);
	}

	
	public class Sample
	{
		public OptionalString x = new OptionalString();
	}
}
