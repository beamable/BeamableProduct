<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BeamableMicroserviceBase</name>
    </assembly>
    <members>
        <member name="T:Beamable.Server.Api.Notifications.PlayerNotificationRequest">
            <summary>
            Notification request format.
            </summary>
        </member>
        <member name="T:Beamable.Server.Api.Notifications.PlayerBatchNotificationRequest">
            <summary>
            Format of the Notification request when notifying multiple players.
            </summary>
        </member>
        <member name="T:Beamable.Server.Api.Notifications.PlayerNotificationPayload">
            <summary>
            Structure representing the expected format for the notification we are sending.
            </summary>
        </member>
        <member name="M:Beamable.Server.BeamableMicroService.ResolveCustomInitializationHook">
            <summary>
            Handles custom initialization hooks. Makes the following assumptions:
              - User defined at least one <see cref="T:Beamable.Server.InitializeServicesAttribute"/> over a static async method that returns a <see cref="T:Beamable.Common.Promise`1"/> and receives a <see cref="T:Beamable.Server.IServiceInitializer"/>.
              - Any exception will fail loudly and prevent the C#MS from receiving traffic.
            <para/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.Create(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.Connect" -->
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.OnConnect(System.Action{Beamable.Server.IConnection})" -->
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.OnDisconnect(System.Action{Beamable.Server.IConnection,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.OnMessage(System.Action{Beamable.Server.IConnection,System.String,System.Int64})" -->
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.SendMessage(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.Close" -->
        <member name="T:Beamable.Server.MicroserviceLogFormatter">
            <summary>
            Taken from the compact renderer; and adapted to work without @ symbols
            An <see cref="T:Serilog.Formatting.ITextFormatter" /> that writes events in a compact JSON format, for consumption in environments
            without message template support. Message templates are rendered into text and a hashed event id is included.
            </summary>
        </member>
        <member name="M:Beamable.Server.MicroserviceLogFormatter.Format(Serilog.Events.LogEvent,System.IO.TextWriter)">
            <summary>
            Format the log event into the output. Subsequent events will be newline-delimited.
            </summary>
            <param name="logEvent">The event to format.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:Beamable.Server.MicroserviceLogFormatter.FormatEvent(Serilog.Events.LogEvent,System.IO.TextWriter,Serilog.Formatting.Json.JsonValueFormatter)">
            <summary>Format the log event into the output.</summary>
            <param name="logEvent">The event to format.</param>
            <param name="output">The output.</param>
            <param name="valueFormatter">A value formatter for <see cref="T:Serilog.Events.LogEventPropertyValue" />s on the event.</param>
        </member>
        <member name="M:Beamable.Server.MicroserviceRequester.Acknowledge(Beamable.Server.RequestContext,Beamable.Server.WebsocketErrorResponse)">
            <summary>
            Acknowledge a message from the websocket.
            </summary>
            <param name="ctx">The request you wish to ack</param>
            <param name="error">an error, or null for a 200 ack.</param>
            <returns></returns>
        </member>
        <member name="M:Beamable.Server.MicroserviceRequester.InitializeSubscription">
            <summary>
            Each socket only needs to set up one subscription to the server.
            All events will get piped to the client.
            It's the client job to filter the events, and decide what is valuable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Beamable.Server.SocketDaemen.Start(Beamable.Server.IMicroserviceArgs,Beamable.Server.MicroserviceRequester,Beamable.Server.SocketRequesterContext,System.Threading.CancellationTokenSource)">
            <summary>
            Kick off a long running task that will make sure the given <see cref="!:socketContext"/> is authenticated.
            The daemon is running in a loop, checking the <see cref="!:SocketRequesterContext.AuthorizationRequested"/> field.
            When it is true, the daemon will start ONE authorization flow, and then set the value to false.
            </summary>
            <param name="env"></param>
            <param name="requester"></param>
            <param name="socketContext"></param>
            <param name="cancellationTokenSource"></param>
            <returns>A task that completes the loop after the given <see cref="!:cancellationTokenSource"/> has requested a cancel</returns>
        </member>
        <member name="M:microservice.Common.AdminRoutes.HealthCheck">
            <summary>
            A simple method to check if the microservice can send and receive network traffic.
            </summary>
            <returns>The word "responsive" if all is well.</returns>
        </member>
        <member name="M:microservice.Common.AdminRoutes.Docs">
            <summary>
            Generates an OpenAPI/Swagger 3.0 document that describes the available service endpoints.
            </summary>
            <remarks>
            Any [ClientCallable] methods on the service will be included in the generated OpenAPI document.
            Any doc-comments on the methods will be included in the generated document.
            The summary, remarks, returns, and parameter tags are supported.
            </remarks>
            <returns>A json OpenAPI document</returns>
        </member>
    </members>
</doc>
