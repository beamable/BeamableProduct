<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BeamableMicroserviceBase</name>
    </assembly>
    <members>
        <member name="T:Beamable.Server.Api.Notifications.PlayerNotificationRequest">
            <summary>
            Notification request format.
            </summary>
        </member>
        <member name="T:Beamable.Server.Api.Notifications.PlayerBatchNotificationRequest">
            <summary>
            Format of the Notification request when notifying multiple players.
            </summary>
        </member>
        <member name="T:Beamable.Server.Api.Notifications.PlayerNotificationPayload">
            <summary>
            Structure representing the expected format for the notification we are sending.
            </summary>
        </member>
        <member name="F:Beamable.Server.BeamableMicroService._ranCustomUserInitializationHooks">
            <summary>
            We need to guarantee <see cref="M:Beamable.Server.BeamableMicroService.ResolveCustomInitializationHook"/> only gets run once when we <see cref="M:Beamable.Server.BeamableMicroService.SetupWebsocket(Beamable.Server.IConnection)"/>.
            </summary>
        </member>
        <member name="M:Beamable.Server.BeamableMicroService.ResolveCustomInitializationHook">
            <summary>
            Handles custom initialization hooks. Makes the following assumptions:
              - User defined at least one <see cref="T:Beamable.Server.InitializeServicesAttribute"/> over a static async method that returns a <see cref="T:Beamable.Common.Promise`1"/> and receives a <see cref="T:Beamable.Server.IServiceInitializer"/>.
              - Any exception will fail loudly and prevent the C#MS from receiving traffic.
            <para/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.Create(System.String,Beamable.Server.IMicroserviceArgs,Beamable.Server.IActivityProvider)" -->
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.Connect" -->
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.OnConnect(System.Action{Beamable.Server.IConnection})" -->
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.OnDisconnect(System.Action{Beamable.Server.IConnection,System.Boolean})" -->
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.OnMessage(System.Action{Beamable.Server.IConnection,System.String,System.Int64})" -->
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.SendMessage(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Beamable.Server.EasyWebSocket.Close" -->
        <member name="T:Beamable.Server.MicroserviceAuthenticationDaemon">
            <summary>
            This class manages our authentication process between this C#MS and our Beamo service. It provides the following properties:
            - Only a single <see cref="M:Beamable.Server.MicroserviceRequester.Request``1(Beamable.Common.Api.Method,System.String,System.Object,System.Boolean,System.Func{System.String,``0},System.Boolean)"/> task can trigger an authentication process.
            - <see cref="M:Beamable.Server.MicroserviceAuthenticationDaemon.Authenticate"/> will only run from a single thread even if many <see cref="M:Beamable.Server.MicroserviceRequester.Request``1(Beamable.Common.Api.Method,System.String,System.Object,System.Boolean,System.Func{System.String,``0},System.Boolean)"/> fail due to <see cref="T:Beamable.Server.UnauthenticatedException"/> simultaneously.
            - All requests that come in while we <see cref="M:Beamable.Server.MicroserviceAuthenticationDaemon.Authenticate"/> is running are waited to finish before this thread goes to sleep again.
            </summary>
        </member>
        <member name="F:Beamable.Server.MicroserviceAuthenticationDaemon.AUTH_THREAD_WAIT_HANDLE">
            <summary>
            The <see cref="T:System.Threading.EventWaitHandle"/> we use to wake this thread up from its slumber so we can authenticate the C#MS with the Beamo service.
            </summary>
        </member>
        <member name="F:Beamable.Server.MicroserviceAuthenticationDaemon._OutgoingRequestCounter">
            <summary>
            The total number of outgoing requests that actually go out through <see cref="M:Beamable.Server.MicroserviceRequester.Request``1(Beamable.Common.Api.Method,System.String,System.Object,System.Boolean,System.Func{System.String,``0},System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:Beamable.Server.MicroserviceAuthenticationDaemon._OutgoingRequestProcessedCounter">
            <summary>
            The total number of outgoing requests that went out through <see cref="M:Beamable.Server.MicroserviceRequester.Request``1(Beamable.Common.Api.Method,System.String,System.Object,System.Boolean,System.Func{System.String,``0},System.Boolean)"/> and whose promise handlers (for error or success) have run.
            </summary>
        </member>
        <member name="P:Beamable.Server.MicroserviceAuthenticationDaemon.NoPendingOrInProgressAuth">
            <summary>
            A non thread safe utility boolean that tells us if the auth daemon is currently performing auth, or SHOULD perform auth.
            </summary>
        </member>
        <member name="M:Beamable.Server.MicroserviceAuthenticationDaemon.BumpRequestCounter">
            <summary>
            Bumps the <see cref="F:Beamable.Server.MicroserviceAuthenticationDaemon._OutgoingRequestCounter"/>. Here mostly so people are reminded of reading the comments on this class üòÅ
            </summary>
        </member>
        <member name="M:Beamable.Server.MicroserviceAuthenticationDaemon.BumpRequestProcessedCounter">
            <summary>
            Bumps the <see cref="F:Beamable.Server.MicroserviceAuthenticationDaemon._OutgoingRequestProcessedCounter"/>. Here mostly so people are reminded of reading the comments on this class üòÅ
            </summary>
        </member>
        <member name="M:Beamable.Server.MicroserviceAuthenticationDaemon.WakeAuthThread">
            <summary>
            Increments the given <see cref="!:authCounter"/> and notifies the <see cref="F:Beamable.Server.MicroserviceAuthenticationDaemon.AUTH_THREAD_WAIT_HANDLE"/> so that this thread wakes up.
            The auth counter is used to ensure that, if this thread gets woken up without the need to be authorized for some unknown reason, we don't bother running the <see cref="M:Beamable.Server.MicroserviceAuthenticationDaemon.Authenticate"/> task.
            </summary>
            <param name="authCounter"><see cref="!:SocketRequesterContext.AuthorizationCounter"/> is what you should pass here.</param>
        </member>
        <member name="M:Beamable.Server.MicroserviceAuthenticationDaemon.KillAuthThread">
            <summary>
            Cancels the token and notifies the <see cref="F:Beamable.Server.MicroserviceAuthenticationDaemon.AUTH_THREAD_WAIT_HANDLE"/> so that this thread wakes up and catches fire üî•.
            </summary>
            <param name="cancellation"><see cref="F:Beamable.Server.BeamableMicroService._serviceShutdownTokenSource"/> is what you should pass here.</param>
        </member>
        <member name="F:Beamable.Server.MicroserviceAuthenticationDaemon._env">
            <summary>
            The environment data that we need to make the <see cref="M:Beamable.Server.MicroserviceAuthenticationDaemon.Authenticate"/> request.
            </summary>
        </member>
        <member name="F:Beamable.Server.MicroserviceAuthenticationDaemon._requester">
            <summary>
            The requester instance so that we can make the <see cref="M:Beamable.Server.MicroserviceAuthenticationDaemon.Authenticate"/> request.
            </summary>
        </member>
        <member name="F:Beamable.Server.MicroserviceAuthenticationDaemon.AuthorizationCounter">
            <summary>
            Tracks the number of requests that failed due to <see cref="T:Beamable.Server.UnauthenticatedException"/>.
            </summary>
        </member>
        <member name="M:Beamable.Server.MicroserviceAuthenticationDaemon.Start(Beamable.Server.IMicroserviceArgs,Beamable.Server.MicroserviceRequester,System.Threading.CancellationTokenSource)">
            <summary>
            Kick off a long running task that will make sure the given <see cref="!:socketContext"/> is authenticated.
            The daemon is running in a loop, checking the <see cref="!:SocketRequesterContext.AuthorizationCounter"/> field.
            When it is positive, the daemon will start ONE authorization flow, and then set the value to zero.
            </summary>
            <param name="env"></param>
            <param name="requester"></param>
            <param name="socketContext"></param>
            <param name="cancellationTokenSource"></param>
            <returns>A task that completes the loop after the given <see cref="!:cancellationTokenSource"/> has requested a cancel</returns>
        </member>
        <member name="T:Beamable.Server.MicroserviceLogFormatter">
            <summary>
            Taken from the compact renderer; and adapted to work without @ symbols
            An <see cref="T:Serilog.Formatting.ITextFormatter" /> that writes events in a compact JSON format, for consumption in environments
            without message template support. Message templates are rendered into text and a hashed event id is included.
            </summary>
        </member>
        <member name="M:Beamable.Server.MicroserviceLogFormatter.Format(Serilog.Events.LogEvent,System.IO.TextWriter)">
            <summary>
            Format the log event into the output. Subsequent events will be newline-delimited.
            </summary>
            <param name="logEvent">The event to format.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:Beamable.Server.MicroserviceLogFormatter.FormatEvent(Serilog.Events.LogEvent,System.IO.TextWriter,Serilog.Formatting.Json.JsonValueFormatter)">
            <summary>Format the log event into the output.</summary>
            <param name="logEvent">The event to format.</param>
            <param name="output">The output.</param>
            <param name="valueFormatter">A value formatter for <see cref="T:Serilog.Events.LogEventPropertyValue" />s on the event.</param>
        </member>
        <member name="M:Beamable.Server.MicroserviceRequester.Acknowledge(Beamable.Server.RequestContext,Beamable.Server.WebsocketErrorResponse)">
            <summary>
            Acknowledge a message from the websocket.
            </summary>
            <param name="ctx">The request you wish to ack</param>
            <param name="error">an error, or null for a 200 ack.</param>
            <returns></returns>
        </member>
        <member name="M:Beamable.Server.MicroserviceRequester.InitializeSubscription">
            <summary>
            Each socket only needs to set up one subscription to the server.
            All events will get piped to the client.
            It's the client job to filter the events, and decide what is valuable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:microservice.Common.AdminRoutes.HealthCheck">
            <summary>
            A simple method to check if the microservice can send and receive network traffic.
            </summary>
            <returns>The word "responsive" if all is well.</returns>
        </member>
        <member name="M:microservice.Common.AdminRoutes.Docs">
            <summary>
            Generates an OpenAPI/Swagger 3.0 document that describes the available service endpoints.
            </summary>
            <remarks>
            Any [ClientCallable] methods on the service will be included in the generated OpenAPI document.
            Any doc-comments on the methods will be included in the generated document.
            The summary, remarks, returns, and parameter tags are supported.
            </remarks>
            <returns>A json OpenAPI document</returns>
        </member>
    </members>
</doc>
