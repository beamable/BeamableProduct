using Beamable.Api.Autogenerated.Models;
using System.Collections.Generic;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Api.Inventory;
using Beamable.Common.Content;
using InventoryView = Beamable.Common.Api.Inventory.InventoryView;

namespace Beamable.Server.Api.Inventory
{
	public class MicroserviceInventoryApi : AbsInventoryApi, IMicroserviceInventoryApi
	{
		private readonly Beamable.Api.Autogenerated.Inventory.IInventoryApi _inventoryApi;
		IUserContext UserContext { get; }

		private BeamableGetApiResource<InventoryResponse> _getter;

		public MicroserviceInventoryApi(IBeamableRequester requester, IUserContext userContext,
			Beamable.Api.Autogenerated.Inventory.IInventoryApi inventoryApi) : base(requester, userContext)
		{
			_inventoryApi = inventoryApi;
			UserContext = userContext;

			_getter = new BeamableGetApiResource<InventoryResponse>();
		}

		public override Promise<InventoryView> GetCurrent(string scope = "")
		{
			return _getter.RequestData(Requester, UserContext, "inventory", scope).Map(res =>
			{
				var view = new InventoryView();
				res.MergeView(view);
				return view;
			});
		}

		public async Promise SendCurrency(Dictionary<string, long> currencies, long recipientPlayer,
			string transaction = null)
		{
			var transfer = new TransferRequest
			{
				currencies = new OptionalMapOfLong() { HasValue = true, Value = new MapOfLong(currencies) },
				recipientPlayer = recipientPlayer,
				transaction = new OptionalString
				{
					HasValue = !string.IsNullOrWhiteSpace(transaction), Value = transaction
				}
			};
			await _inventoryApi.ObjectPutTransfer(UserContext.UserId, transfer);
		}
	}
}
