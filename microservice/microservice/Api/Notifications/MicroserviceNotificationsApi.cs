using Beamable.Api.Autogenerated.Models;
using Beamable.Api.Autogenerated.Notification;
using System.Collections.Generic;
using Beamable.Common;
using Beamable.Common.Api.Notifications;
using Beamable.Common.Content;
using Beamable.Server.Common;
using Newtonsoft.Json;
using EmptyResponse = Beamable.Common.Api.EmptyResponse;

namespace Beamable.Server.Api.Notifications
{
    public class MicroserviceNotificationApi : IMicroserviceNotificationsApi
    {
	    private readonly INotificationApi _notificationApi;

        public MicroserviceNotificationApi(INotificationApi notificationApi)
        {
	        _notificationApi = notificationApi;
        }

        #region Notify Player
        public Promise<EmptyResponse> NotifyPlayer(long dbid, string subscriptionId, string messagePayload) =>
	        NotificationRequestBuilder
		        .Create()
		        .WithDbid(dbid)
		        .WithChannel(subscriptionId)
		        .WithPayload(CreateStringPayload(messagePayload))
		        .SendPlayer(_notificationApi);
        
        public Promise<EmptyResponse> NotifyPlayer(List<long> dbids, string subscriptionId, string messagePayload) =>
	        NotificationRequestBuilder
		        .Create()
		        .WithDbids(dbids)
		        .WithChannel(subscriptionId)
		        .WithPayload(CreateStringPayload(messagePayload))
		        .SendPlayer(_notificationApi);
        
        public Promise<EmptyResponse> NotifyPlayer<T>(long dbid, string subscriptionId, T messagePayload)=>
	        NotificationRequestBuilder
		        .Create()
		        .WithDbid(dbid)
		        .WithChannel(subscriptionId)
		        .WithPayload(messagePayload)
		        .SendPlayer(_notificationApi);

        public Promise<EmptyResponse> NotifyPlayer<T>(List<long> dbids, string subscriptionId, T messagePayload) =>
	        NotificationRequestBuilder
		        .Create()
		        .WithDbids(dbids)
		        .WithChannel(subscriptionId)
		        .WithPayload(messagePayload)
		        .SendPlayer(_notificationApi);
        
        
        #endregion

        #region Notify Game
        public Promise<EmptyResponse> NotifyGame(string subscriptionId, string messagePayload) =>
	        NotificationRequestBuilder
		        .Create()
		        .WithChannel(subscriptionId)
		        .WithPayload(CreateStringPayload(messagePayload))
		        .SendGame(_notificationApi);
        public Promise<EmptyResponse> NotifyGame<T>(string subscriptionId, T messagePayload) =>
	        NotificationRequestBuilder
		        .Create()
		        .WithChannel(subscriptionId)
		        .WithPayload(messagePayload)
		        .SendGame(_notificationApi);
        
        #endregion

        #region Notify Server
        public async Promise<EmptyResponse> NotifyServer(bool toAll, string eventName, string messagePayload)
        {
	        var req = new ServerEvent
	        {
		        payload = new OptionalString(messagePayload), eventKey = eventName, toAll = toAll
	        };
	        await _notificationApi.PostServer(req);
	        return EmptyResponse.Unit;
        }
        public async Promise<EmptyResponse> NotifyServer<T>(bool toAll, string eventName, T messagePayload)
        {
	        var json = JsonConvert.SerializeObject(messagePayload, Formatting.None, UnitySerializationSettings.Instance);
	        var req = new ServerEvent { payload = new OptionalString(json), eventKey = eventName, toAll = toAll };
	        await _notificationApi.PostServer(req);
	        return EmptyResponse.Unit;
        }
        public async Promise<EmptyResponse> NotifyServer(bool toAll, string eventName)
        {
	        var req = new ServerEvent { eventKey = eventName, toAll = toAll };
	        await _notificationApi.PostServer(req);
	        return EmptyResponse.Unit;
        }
        #endregion
        
        private PrimitiveStringPayload CreateStringPayload(string message)
        {
            return new PrimitiveStringPayload
            {
                stringValue = message
            };
        }
    }
    
    public class NotificationRequestBuilder
    {
	    public NotificationRequest Request { get; private set; }
	    
	    public static NotificationRequestBuilder Create()
	    {
		    return new NotificationRequestBuilder();
	    }

	    public NotificationRequestBuilder()
	    {
		    Request = new NotificationRequest();
		    Request.payload = new NotificationRequestData();
	    }

	    public NotificationRequestBuilder WithDbid(long dbid)
	    {
		    Request.dbid = new OptionalLong(dbid);
		    return this;
	    }
	    
	    public NotificationRequestBuilder WithDbids(List<long> dbids)
	    {
		    Request.dbids = new OptionalArrayOfLong(dbids);
		    return this;
	    }

	    public NotificationRequestBuilder WithPayload<T>(T data)
	    {
		    var json = JsonConvert.SerializeObject(data, Formatting.None, UnitySerializationSettings.Instance);
		    Request.payload.messageFull = new OptionalString(json);
		    return this;
	    }
	    
	    
	    public NotificationRequestBuilder WithChannel(string channel)
	    {
		    Request.payload.context = new OptionalString(channel);
		    return this;
	    }

	    public async Promise<EmptyResponse> SendPlayer(INotificationApi api)
	    {
		    await api.PostPlayer(Request);
		    return EmptyResponse.Unit;
	    }
	    
	    
	    public async Promise<EmptyResponse> SendGame(INotificationApi api)
	    {
		    await api.PostGame(Request);
		    return EmptyResponse.Unit;
	    }
    }
}
