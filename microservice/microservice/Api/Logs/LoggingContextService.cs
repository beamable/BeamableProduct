using Beamable.Api.Autogenerated.Beamo;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Beamable.Server.Api.Logs;

public interface ILoggingContextService
{
	Promise<Dictionary<string, BeamoV2ServiceLoggingContext>> GetAllLoggingContexts();
	BeamoV2ServiceLoggingContext GetLogLevelContext(string serviceName, string routingKey);
}

public class LoggingContextService : ILoggingContextService
{
	private readonly IBeamBeamoApi _beamoApi;

	private readonly object _contextDocumentsLock = new();
	
	private Dictionary<string, BeamoV2ServiceLoggingContext> _contextDocuments = new();

	public LoggingContextService(IBeamBeamoApi beamoApi, SocketRequesterContext ctx)
	{
		_beamoApi = beamoApi;
		ctx.Subscribe<LoggingContextEventData>(
			Constants.Features.Services.LOGGING_CONTEXT_UPDATE_EVENT,
			cb =>
			{
				Log.Trace("Received event, " + Constants.Features.Services.LOGGING_CONTEXT_UPDATE_EVENT);
				_ = GetAllLoggingContexts();
			});
	}

	public async Promise<Dictionary<string, BeamoV2ServiceLoggingContext>> GetAllLoggingContexts()
	{
		var allRealmLoggingContext = await _beamoApi.GetServicesLogsContext();
		lock (_contextDocumentsLock)
		{
			_contextDocuments = allRealmLoggingContext == null || !allRealmLoggingContext.contexts.HasValue
				? new Dictionary<string, BeamoV2ServiceLoggingContext>()
				: allRealmLoggingContext.contexts.Value.ToDictionary(item => GetLoggingContextKey(item.serviceName, item.routingKey), item => item);
			return new Dictionary<string, BeamoV2ServiceLoggingContext>(_contextDocuments);
		}
	}


	public BeamoV2ServiceLoggingContext GetLogLevelContext(string serviceName, string routingKey)
	{
		BeamoV2ServiceLoggingContext loggingContext;
		lock (_contextDocuments)
		{
			_contextDocuments.TryGetValue(GetLoggingContextKey(serviceName, routingKey), out loggingContext);
		}
		return loggingContext;
	}

	private static string GetLoggingContextKey(string serviceName, string routingKey)
	{
		return $"{serviceName}|{routingKey}";
	}
}

[Serializable]
[SuppressMessage("ReSharper", "InconsistentNaming")]
public class LoggingContextEventData
{
	public string documentId;
	public ServiceLoggingEventStatus status;
}

[Serializable]
public enum ServiceLoggingEventStatus
{
	Added,
	Updated,
	Deleted
}
