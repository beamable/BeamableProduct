using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Api.Announcements;
using Beamable.Common.Content;
using Beamable.Common.Inventory;
using System;
using System.Collections.Generic;
using System.Linq;
using AnnouncementAttachment = Beamable.Common.Announcements.AnnouncementAttachment;
using AnnouncementQueryResponse = Beamable.Common.Api.Announcements.AnnouncementQueryResponse;
using AnnouncementView = Beamable.Common.Api.Announcements.AnnouncementView;
using IAnnouncementsApi = Beamable.Api.Autogenerated.Announcements.IAnnouncementsApi;
using PlayerReward = Beamable.Api.Autogenerated.Models.PlayerReward;

namespace Beamable.Server.Api.Announcements
{
   public class MicroserviceAnnouncementsApi : AbsAnnouncementsApi , IMicroserviceAnnouncementsApi
   {
	   private BeamableGetApiResource<AnnouncementQueryResponse> _getter;
	   
      public MicroserviceAnnouncementsApi(IAnnouncementsApi announcementsApi, IUserContext ctx) : base(ctx, announcementsApi)
      {
      }
      
      [Obsolete("This constructor is obsolete. Use 'MicroserviceAnnouncementsApi(IAnnouncementsApi announcementsApi, IUserContext ctx)' instead, as it provides more reliable initialization.")]
      public MicroserviceAnnouncementsApi(IBeamableRequester requester, IUserContext ctx) : base(requester, ctx)
      {
	      _getter = new BeamableGetApiResource<AnnouncementQueryResponse>();
      }
      
      public override Promise<AnnouncementQueryResponse> GetCurrent(string scope = "")
      { 
	      return AnnouncementsApi.ObjectGet(Ctx.UserId).Map(response => response.ConvertToLegacy());
      }

      
   }
}
