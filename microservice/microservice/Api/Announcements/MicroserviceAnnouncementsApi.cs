using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Api.Announcements;
using Beamable.Common.Content;
using Beamable.Common.Inventory;
using System.Collections.Generic;
using System.Linq;
using AnnouncementAttachment = Beamable.Common.Announcements.AnnouncementAttachment;
using AnnouncementQueryResponse = Beamable.Common.Api.Announcements.AnnouncementQueryResponse;
using AnnouncementView = Beamable.Common.Api.Announcements.AnnouncementView;
using IAnnouncementsApi = Beamable.Api.Autogenerated.Announcements.IAnnouncementsApi;
using PlayerReward = Beamable.Api.Autogenerated.Models.PlayerReward;

namespace Beamable.Server.Api.Announcements
{
   public class MicroserviceAnnouncementsApi : AbsAnnouncementsApi , IMicroserviceAnnouncementsApi
   {
      public MicroserviceAnnouncementsApi(IAnnouncementsApi announcementsApi, IUserContext ctx) : base(ctx, announcementsApi)
      {
         
      }

      public override Promise<AnnouncementQueryResponse> GetCurrent(string scope = "")
      { 
	      return AnnouncementsApi.ObjectGet(Ctx.UserId).Map(ConvertAnnouncementQueryResponseAutoGenToLegacy);
      }

      private static AnnouncementQueryResponse ConvertAnnouncementQueryResponseAutoGenToLegacy(Beamable.Api.Autogenerated.Models.AnnouncementQueryResponse response)
      {
	      return new AnnouncementQueryResponse()
	      {
		      announcements = response.announcements.Select(item => new AnnouncementView()
		      {
			      id = item.id,
			      channel = item.channel,
			      startDate = item.startDate.GetOrElse(string.Empty),
			      endDate = item.endDate.GetOrElse(string.Empty),
			      secondsRemaining = item.secondsRemaining.GetOrElse(0),
			      title = item.title,
			      summary = item.summary,
			      body = item.body,
			      attachments = ConvertAttachments(item),
			      gift = ConvertGift(item),
			      isRead = item.isRead,
			      isClaimed = item.isClaimed,
		      }).ToList()
	      };

	      List<AnnouncementAttachment> ConvertAttachments(Beamable.Api.Autogenerated.Models.AnnouncementView item)
	      {
		      return item.attachments.Select(attachment => new AnnouncementAttachment()
		      {
			      symbol = attachment.symbol,
			      count = attachment.count,
			      type = attachment.type.GetOrElse(string.Empty),
		      }).ToList();
	      }

	      PlayerRewardView ConvertGift(Beamable.Api.Autogenerated.Models.AnnouncementView announcementView)
	      {
		      var playerRewardView = new PlayerRewardView();
		      if (announcementView.gift.HasValue)
		      {
			      PlayerReward playerReward = announcementView.gift.Value;
			      playerRewardView.description = playerReward.description;
			      playerRewardView.applyVipBonus = playerReward.applyVipBonus;
				  playerRewardView.items = ConvertPlayerRewards(playerReward);
				  playerRewardView.currencies = ConvertChangeCurrency(playerReward);
		      }

		      return playerRewardView;
	      }

	      OptionalPlayerRewardNewItemView ConvertPlayerRewards(PlayerReward playerReward)
	      {
		      var giftItems = new OptionalPlayerRewardNewItemView();
		      if(playerReward.addItems.HasValue) 
		      {
			      giftItems.SetValue(new PlayerRewardListOfNewItemView
			      {
				      listData = playerReward.addItems.Value.Select(item => new PlayerRewardNewItemView()
				      {
					      symbol = new ItemRef(item.symbol),
					      properties = new OptionalSerializableDictionaryStringToString { HasValue = item.properties.HasValue, Value = item.properties.Value }
							  
				      }).ToList()
			      });
		      }

		      return giftItems;
	      }

	      OptionalPlayerRewardCurrencyChangeView ConvertChangeCurrency(PlayerReward playerReward)
	      {
		      var giftCurrencies = new OptionalPlayerRewardCurrencyChangeView();
		      if (playerReward.changeCurrencies.HasValue)
		      {
			      giftCurrencies.SetValue(new PlayerRewardListOfCurrencyChangeView() 
			      {
				      listData = playerReward.changeCurrencies.Value.Select(currency => new PlayerRewardCurrencyChangeView()
				      {
					      amount = currency.amount,
					      symbol = new CurrencyRef(currency.symbol)
				      }).ToList()
			      });
		      }

		      return giftCurrencies;
	      }
      }
   }
}
