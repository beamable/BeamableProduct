using Beamable.Server.Editor;
using Beamable.Server.Generator;
using Serilog;
using System;
using System.CommandLine;
using System.IO;
using System.Reflection;

namespace Beamable.Server
{
	public static class CommandLine<TMicroService> where TMicroService : Microservice
	{

		public static int Main(string[] args)
		{
			var rootCommand = new RootCommand
			{
				Description = "Beamable Microservice Tool"
			};

			var runCommand = new Command("run");
			rootCommand.AddCommand(runCommand);
			runCommand.SetHandler(Run);
			runCommand.Description = "Launch the microservice";

			var generateClientCommand = new Command("generate-client");
			var outputArg = new Argument<string>("output", "the output directory for the autogenerated class");
			generateClientCommand.AddArgument(outputArg);
			generateClientCommand.Description = "Generate the client C# code at a given directory";
			rootCommand.AddCommand(generateClientCommand);

			generateClientCommand.SetHandler((string y) => GenerateClient(y), outputArg);

			if (args == null || args.Length == 0)
			{
				args = new[] { "run" };
			}
			return rootCommand.Invoke(args);
		}

		static async void Run()
		{
			try
			{
				await MicroserviceBootstrapper.Start<TMicroService>();
			}
			catch (Exception ex)
			{
				// Just so we don't double log the same exception
				if (ex is not BeamableMicroserviceException)
				{
					Log.Fatal(ex.GetType().Name + " / " + ex.Message);
					Log.Fatal(ex.StackTrace);
				}
			}
		}

		static void GenerateClient(string outputDirectory)
		{
			var type = typeof(TMicroService);
			var attr = type.GetCustomAttribute<MicroserviceAttribute>();
			if (attr == null)
			{
				throw new Exception($"Cannot handle service. Missing [{nameof(MicroserviceAttribute)}].");
			}

			var descriptor = new MicroserviceDescriptor
			{
				Name = attr.MicroserviceName,
				Type = type
			};

			var generator = new ClientCodeGenerator(descriptor);
			outputDirectory = Path.GetFullPath(outputDirectory);
			var filePath = Path.Combine(outputDirectory, $"{descriptor.Name}Client.cs");
			if (!Directory.Exists(outputDirectory))
			{
				Directory.CreateDirectory(outputDirectory);
			}
			generator.GenerateCSharpCode(filePath);
		}
	}
}
