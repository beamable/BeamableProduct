using System.Diagnostics;
using beamable.tooling.common.Microservice;
using Core.Server.Common;
using ZLogger;

namespace Beamable.Server
{
	
	/// <summary>
	/// Represents a collection of service methods.
	/// </summary>
   public class ServiceMethodCollection
   {
      private readonly IEnumerable<ServiceMethod> _methods;
      private Dictionary<string, ServiceMethod> _pathToMethod;

      /// <summary>
      /// Initializes a new instance of the <see cref="ServiceMethodCollection"/> class.
      /// </summary>
      /// <param name="methods">The collection of service methods to be included in the collection.</param>
      public ServiceMethodCollection(IEnumerable<ServiceMethod> methods)
      {
         _methods = methods;
         _pathToMethod = methods.ToDictionary(method => method.Path.ToLower());
      }

      /// <summary>
      /// Gets the list of service methods in the collection.
      /// </summary>
      public IEnumerable<ServiceMethod> Methods => _methods.ToList();
      
      /// <summary>
      /// With a given request context, path, and parameter provider handle a request.
      /// </summary>
      /// <param name="ctx">The request context associated with the request.</param>
      /// <param name="path">The path associated with the request.</param>
      /// <param name="parameterProvider">The parameter provider used to retrieve method parameters.</param>
      /// <param name="activity"></param>
      /// <returns>The response string generated by handling the request.</returns>
      public async Task<string> Handle(MicroserviceRequestContext ctx, string path, IParameterProvider parameterProvider, BeamActivity activity)
      {
         BeamableZLoggerProvider.LogContext.Value.ZLogDebug($"Handling {path}");
        
         if (_pathToMethod.TryGetValue(path.ToLower(), out var method) )
         {
            activity.SetDisplay($"Handle {method.Path}");
            
            if (!ctx.HasScopes(method.RequiredScopes))
            {
               activity.AddEvent(new ActivityEvent("InvalidScopes"));
               throw new MissingScopesException(ctx.Scopes);
            }

            // Required Auth User Check
            if (ctx.UserId == 0 && method.RequireAuthenticatedUser)
            {
               activity.AddEvent(new ActivityEvent("InvalidAuth"));
               throw new UnauthorizedUserException(method.Path);
            }

            var output = method.Execute(ctx, parameterProvider);
            var result = await output;
            BeamableZLoggerProvider.LogContext.Value.ZLogTrace($"Method finished with {result}");

            var serializedResult = method.ResponseSerializer.SerializeResponse(ctx, result);
            return serializedResult;
         }
         else
         {
            BeamableZLoggerProvider.LogContext.Value.ZLogWarning($"No method available for {path}");


            throw new UnhandledPathException(path);
         }
      }
   }
}
