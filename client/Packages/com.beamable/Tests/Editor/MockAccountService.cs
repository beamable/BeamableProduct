using Beamable.Api;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api.Realms;
using Beamable.Common.Content;
using System;
using CustomerView = Beamable.Api.Autogenerated.Models.CustomerView;

namespace Beamable.Editor.Tests
{
	public class MockAccountService : IAccountService
	{
		public EditorAccountInfo AccountInfo { get; set; }

		public AccountServiceInitResult InitResult { get; set; }

		public Promise<bool> SwitchToConfigDefaults()
		{

			throw new NotImplementedException();
		}

		public void Clear() { }
		public MockAccountService()
		{
			AccountInfo = new EditorAccountInfo
			{
				cid = "123",
			};
			InitResult = new AccountServiceInitResult
			{
				hasCid = true,
				account = AccountInfo
			};
			AccountInfo.SetCustomerViewResponse(new CustomerViewResponse
			{
				customer = new CustomerView
				{
					alias = new OptionalString("alias"),
					cid = 123,
					projects = new ProjectView[]
					{
						new ProjectView
						{
							pid = "pid",
						}
					}
				}
			});
			AccountInfo.SetRealm("pid", "pid");
		}

		public EditorAccountInfo Account => AccountInfo;

		public Promise<AccountServiceInitResult> TryInit()
		{
			return Promise<AccountServiceInitResult>.Successful(InitResult);
		}

		public Promise<EditorAccountInfo> Login(string nextCid, AccessToken cidToken)
		{
			return Promise<EditorAccountInfo>.Successful(AccountInfo);
		}

		public void Logout(bool clearRealmPid)
		{

		}

		public ReadonlyOptionalString Cid => new ReadonlyOptionalString(AccountInfo.cid);

		public void ApplyConfigValuesToRuntime()
		{
		}

		public void SetRealm(EditorAccountInfo editorAccount, RealmView game, string realmPid)
		{
			throw new NotImplementedException();
		}

		public void WriteUnsetConfigValues()
		{

		}
	}
}
