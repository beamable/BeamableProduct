using Beamable.Api;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Api.Auth;
using Beamable.Common.Content;
using Beamable.Common.Dependencies;
using Beamable.Platform.Tests;
using Core.Platform.SDK;
using System;
using UnityEngine;
using EmptyResponse = Beamable.Common.Api.EmptyResponse;
using SubscriberDetailsResponse = Beamable.Api.SubscriberDetailsResponse;
using TokenResponse = Beamable.Common.Api.Auth.TokenResponse;

namespace Beamable.Tests.Runtime
{
	public class TestConfigProvider : IRuntimeConfigProvider
	{
		public string Cid { get; set; } = BeamableTest.DEFAULT_CID;
		public string Pid { get; set; } = BeamableTest.DEFAULT_PID;
	}
	
	public class MockBeamContext : BeamContext
	{
		private static Action<IDependencyBuilder> _mutateDependencies;
		private static Action<MockBeamContext> _onInit;

		public const string ACCESS_TOKEN = "access_test";
		public const long DEFAULT_DBID = 1234;

		public new MockPlatformAPI Requester
		{
			get;
			private set;
		}

		public static MockBeamContext Create(string playerCode = "test",
											 Action<IDependencyBuilder> mutateDependencies = null,
											 Action<MockBeamContext> onInit = null,
											 MockPlatformAPI requester = null)
		{
			_onInit = onInit;
			_mutateDependencies = mutateDependencies;

			var ctx = new MockBeamContext();
			requester = requester ?? new MockPlatformAPI();
			// var cid = requester.AccessToken.Cid;
			// var pid = requester.AccessToken.Pid;
			var configProvider = new TestConfigProvider();
			new AccessTokenStorage(playerCode).DeleteTokenForRealm(configProvider.Cid, configProvider.Pid);
			ctx.Requester = requester;
			var builder = Beam.DependencyBuilder.Clone();
			builder.RemoveIfExists<IRuntimeConfigProvider>();
			builder.AddSingleton<IRuntimeConfigProvider>(configProvider);
			ctx.Init(playerCode, null, builder);

			return ctx;
		}

		private MockBeamContext() { }

		protected override void RegisterServices(IDependencyBuilder builder)
		{
			base.RegisterServices(builder);
			builder.Remove<PlatformRequester>();
			builder.Remove<IBeamableRequester>();
			builder.Remove<IPlatformRequester>();
			builder.Remove<IBeamableApiRequester>();
			builder.Remove<IConnectivityChecker>();
			builder.Remove<IRequester>();

			builder.AddSingleton<IPlatformRequester>(Requester);
			builder.AddSingleton<IBeamableRequester>(Requester);
			builder.AddSingleton<IBeamableApiRequester>(Requester);
			builder.AddSingleton<IRequester>(Requester);
			builder.AddSingleton<IConnectivityChecker, MockConnectivityChecker>();
			_mutateDependencies?.Invoke(builder);
		}

		protected override void InitServices(string cid, string pid)
		{
			_onInit?.Invoke(this);
			base.InitServices(cid, pid);
		}

		// public MockBeamContext AddInventoryRequest()
		// {
		// 	Requester.MockRequest<>()
		// }

		public MockBeamContext AddPubnubRequests()
		{
			Requester.MockRequest<SubscriberDetailsResponse>(Method.GET, "/basic/notification")
					 .WithResponse(new SubscriberDetailsResponse
					 {
						 authenticationKey = "testauthkey",
						 customChannelPrefix = "",
						 gameGlobalNotificationChannel = "globalchannel",
						 gameNotificationChannel = "gamechannel",
						 playerChannel = "playerchannel",
						 playerForRealmChannel = "playersforrealmchannel",
						 subscribeKey = "subscriberkey"
					 })
					 .WithToken(ACCESS_TOKEN)
				;
			return this;
		}

		public MockBeamContext AddSessionRequests()
		{
			Requester.MockRequest<EmptyResponse>(Method.POST, "/basic/session")
					 .WithResponse(new EmptyResponse())
					 .WithToken(ACCESS_TOKEN);

			Requester.MockRequest<EmptyResponse>(Method.POST, "/basic/session/heartbeat")
					 .WithResponse(new EmptyResponse())
					 .WithToken(ACCESS_TOKEN);

			Requester.MockRequest<RealmConfiguration>(Method.GET, "/basic/realms/client/defaults")
					 .WithRawResponse(JsonUtility.ToJson(new RealmConfiguration
					 {
						 environment = "test",
						 microserviceURI = "",
						 websocketConfig = new WebSocketConfiguration
						 {
							 uri = new OptionalString(""),
							 provider = "pubnub"
						 },
						 portalURI = "",
						 storageBrowserURI = ""
					 }))
					 .WithToken(ACCESS_TOKEN);
			return this;
		}

		public MockBeamContext AddStandardGuestLoginRequests()
		{
			Requester.MockRequest<TokenResponse>(Method.POST, "/basic/auth/token")
					 .WithNoAuthHeader()
					 .WithJsonFieldMatch("grant_type", "guest")
					 .WithResponse(new TokenResponse
					 {
						 access_token = ACCESS_TOKEN,
						 refresh_token = "test_refresh",
						 expires_in = 10000,
						 token_type = "test_token"
					 });

			Requester.MockRequest<User>(Method.GET, "/basic/accounts/me")
					 .WithResponse(new User { id = DEFAULT_DBID })
					 .WithToken(ACCESS_TOKEN)
				;
			Requester.MockPresenceCalls(DEFAULT_DBID)
					 .WithToken(ACCESS_TOKEN);

			return this;
		}
	}
}
