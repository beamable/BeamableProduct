using Beamable.Api.Autogenerated.Inventory;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Content;

namespace Beamable.Tests.Runtime
{
	public class MockInventoryApi : IInventoryApi
	{
		Promise<ItemContentResponse> IInventoryApi.GetItems(bool includeAuthHeader)
		{
			throw new System.NotImplementedException();
		}

		Promise<CurrencyContentResponse> IInventoryApi.GetCurrency(bool includeAuthHeader)
		{
			throw new System.NotImplementedException();
		}

		Promise<PreviewVipBonusResponse> IInventoryApi.ObjectPutPreview(long objectId, InventoryUpdateRequest gsReq, bool includeAuthHeader)
		{
			throw new System.NotImplementedException();
		}

		Promise<MultipliersGetResponse> IInventoryApi.ObjectGetMultipliers(long objectId, bool includeAuthHeader)
		{
			throw new System.NotImplementedException();
		}

		Promise<CommonResponse> IInventoryApi.ObjectDeleteTransaction(long objectId, EndTransactionRequest gsReq)
		{
			throw new System.NotImplementedException();
		}

		Promise<InventoryView> IInventoryApi.ObjectGet(long objectId, Optional<string> scope, bool includeAuthHeader)
		{
			throw new System.NotImplementedException();
		}

		public delegate Promise<InventoryView> ObjectPostProxy(long objectId, InventoryQueryRequest gsReq, bool includeAuthHeader);
		public ObjectPostProxy ObjectPost { get; set; }
		Promise<InventoryView> IInventoryApi.ObjectPost(long objectId, InventoryQueryRequest gsReq, bool includeAuthHeader)
		{
			return ObjectPost?.Invoke(objectId, gsReq, includeAuthHeader);
		}

		public delegate Promise<CommonResponse> ObjectPutProxy(long objectId,
															   InventoryUpdateRequest gsRequest,
															   bool includeAuthHeader);
		public ObjectPutProxy ObjectPut { get; set; }
		Promise<CommonResponse> IInventoryApi.ObjectPut(long objectId, InventoryUpdateRequest gsReq, bool includeAuthHeader)
		{
			return ObjectPut?.Invoke(objectId, gsReq, includeAuthHeader);
		}

		Promise<CommonResponse> IInventoryApi.ObjectPutProxyReload(long objectId, bool includeAuthHeader)
		{
			throw new System.NotImplementedException();
		}

		Promise<CommonResponse> IInventoryApi.ObjectPutTransfer(long objectId, TransferRequest gsReq)
		{
			throw new System.NotImplementedException();
		}
	}
}
