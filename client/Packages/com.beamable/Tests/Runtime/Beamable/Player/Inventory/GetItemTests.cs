using Beamable.Api.Autogenerated.Inventory;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Content;
using Beamable.Common.Dependencies;
using Beamable.Common.Inventory;
using Beamable.Coroutines;
using Beamable.Platform.Tests.Inventory;
using Beamable.Player;
using Beamable.Serialization.SmallerJSON;
using NUnit.Framework;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using UnityEngine.TestTools;

namespace Beamable.Tests.Runtime
{
	public class PlayerInventoryPSDKGetItems : BeamContextTest
	{
		[ContentType(CONTENT)]
		public class TestItemA : ItemContent
		{
			public const string CONTENT = "a";
			public const string FULL_CONTENT_ID = "items." + CONTENT;
		}
		
		[ContentType(CONTENT)]
		public class TestItemB : ItemContent
		{
			public const string CONTENT = "b";
			public const string FULL_CONTENT_ID = "items." + CONTENT;
		}
		
		[ContentType(CONTENT)]
		public class TestItemC : ItemContent
		{
			public const string CONTENT = "c";
			public const string FULL_CONTENT_ID = "items." + CONTENT;
		}
		
		[UnityTest]
		public IEnumerator CanGetPlayerItems_Simple()
		{
			const string itemName = "test";
			
			async Promise<InventoryView> ObjectPost(long objectid, InventoryQueryRequest gsreq, bool includeauthheader)
			{
				await Promise.Success;
				return new InventoryView
				{
					currencies = Array.Empty<CurrencyView>(),
					items = new ItemGroup[]
					{
						new ItemGroup()
						{
							id = InventoryTestItem.FULL_CONTENT_ID + "." + itemName,
							items = new Item[]
							{
								new Item
								{
									id = 1,
									properties = Array.Empty<ItemProperty>()
								}
							}
						}
					}
				};
			}
			
			MockContent.Provide(new InventoryTestItem().SetContentName(itemName));
			TriggerContextInit(b =>
			{
				OnRegister(b);
				b.ReplaceSingleton<IInventoryApi>(new MockInventoryApi()
				{
					ObjectPost = ObjectPost
				});
			});
			yield return Context.OnReady.ToYielder();
			Assert.IsTrue(Context.OnReady.IsCompleted);

			var items = Context.Inventory.GetItems(InventoryTestItem.FULL_CONTENT_ID);
			yield return items.OnReady.ToYielder();
			
			Assert.AreEqual(1, items.Count);
		}
		
		[UnityTest]
		public IEnumerator CanGetPlayerItems_ReadFromCache_Empty()
		{
			const string itemName = "test";
			
			MockContent.Provide(new InventoryTestItem().SetContentName(itemName));
			TriggerContextInit(b =>
			{
				OnRegister(b);
				b.ReplaceSingleton<IInventoryApi>(new MockInventoryApi()
				{
					ObjectPost = (_, _, _) => throw new NoConnectivityException("simulated lack of internet")
				});
			});
			yield return Context.OnReady.ToYielder();
			Assert.IsTrue(Context.OnReady.IsCompleted);

			var items = Context.Inventory.GetItems(InventoryTestItem.FULL_CONTENT_ID);
			yield return items.OnReady.ToYielder();
			
			Assert.AreEqual(0, items.Count);
		}
		
		
		[UnityTest]
		public IEnumerator CanGetPlayerItems_ReadFromCache_NotEmpty()
		{
			const string itemName = "test";
			
			MockContent.Provide(new InventoryTestItem().SetContentName(itemName));
			TriggerContextInit(b =>
			{
				OnRegister(b);
				
				b.ReplaceSingleton<IInventoryApi>(new MockInventoryApi()
				{
					ObjectPost = (_, _, _) => throw new NoConnectivityException("simulated lack of internet")
				});
			});
			yield return Context.OnReady.ToYielder();
			Assert.IsTrue(Context.OnReady.IsCompleted);
			
			// pre-populate the disk cache
			var layer = DependencyBuilder.Instantiate<ScopedServiceStorage<OfflineCacheStorageLayer>>(Context.ServiceProvider);
			var inventory = new PlayerInventory();
			inventory.LocalItems.Insert(InventoryTestItem.FULL_CONTENT_ID + "." + itemName, new PlayerItem
			{
				ItemId = 1,
				ContentId = InventoryTestItem.FULL_CONTENT_ID + "." + itemName
			});
			layer.Save(inventory);

			// actually do the test where we get the items.
			var items = Context.Inventory.GetItems(InventoryTestItem.FULL_CONTENT_ID);
			yield return items.OnReady.ToYielder();
			
			Assert.AreEqual(1, items.Count);
		}
		
		
		[UnityTest]
		public IEnumerator CanHandleNetworkUpdate_OneItemType()
		{
			const string itemName = "test";
			
			MockContent.Provide(new InventoryTestItem().SetContentName(itemName));
			TriggerContextInit(b =>
			{
				OnRegister(b);

				var getRequestCount = 0;
				b.ReplaceSingleton<IInventoryApi>(new MockInventoryApi()
				{
					ObjectPost = async (_, _, _) =>
					{
						await Promise.Success; // syntax to make Unity warnings shutup.
						getRequestCount++;
						switch (getRequestCount)
						{
							case 2: 
								return new InventoryView
								{
									currencies = Array.Empty<CurrencyView>(),
									items = new ItemGroup[]
									{
										new ItemGroup()
										{
											id = InventoryTestItem.FULL_CONTENT_ID + "." + itemName,
											items = new Item[]
											{
												new Item
												{
													id = 1,
													properties = Array.Empty<ItemProperty>()
												}
											}
										}
									}
								};
							case 1:
								throw new NoConnectivityException("simulated lack of internet");
							default:
								throw new NotImplementedException("Unexpected get to inventory");
						}
					}
				});
			});
			yield return Context.OnReady.ToYielder();
			Assert.IsTrue(Context.OnReady.IsCompleted);
			
			// pre-populate the disk cache
			// var layer = DependencyBuilder.Instantiate<ScopedServiceStorage<OfflineCacheStorageLayer>>(Context.ServiceProvider);
			// var inventory = new PlayerInventory();
			// inventory.LocalItems.Insert(InventoryTestItem.FULL_CONTENT_ID + "." + itemName, new PlayerItem
			// {
			// 	ItemId = 1,
			// 	ContentId = InventoryTestItem.FULL_CONTENT_ID + "." + itemName
			// });
			// layer.Save(inventory);

			var items = Context.Inventory.GetItems(InventoryTestItem.FULL_CONTENT_ID);
			yield return items.OnReady.ToYielder();
			var callbackInvocationCount = 0;
			items.OnDataUpdated += (nextItems) =>
			{
				callbackInvocationCount++;
			};
			Assert.AreEqual(0, items.Count);
			Assert.AreEqual(0, callbackInvocationCount);

			// simulate a notification!


			Context.Api.NotificationService.Publish("inventory.refresh",
			                                        Json.Deserialize(JsonUtility.ToJson(
				                                        new PlayerInventory.InventoryScopeNotification()
				                                        {
					                                        scopes = new string[]
					                                        {
						                                        InventoryTestItem.FULL_CONTENT_ID
					                                        }
				                                        })));
			
			// simulate a bit of time...
			yield return new WaitForSecondsRealtime(DebounceService.DEFAULT_DEBOUNCE_TIME_SECONDS + .1f);
			
			Assert.AreEqual(1, callbackInvocationCount);
		}
		
		
		
		[UnityTest]
		public IEnumerator CanHandle_LastDeletion()
		{
			MockContent.Provide(new InventoryTestItem().SetContentName("a"));
			MockContent.Provide(new InventoryTestItem().SetContentName("b"));
			MockContent.Provide(new InventoryTestItem().SetContentName("will-be-deleted"));
			TriggerContextInit(b =>
			{
				OnRegister(b);

				var getRequestCount = 0;
				b.ReplaceSingleton<IInventoryApi>(new MockInventoryApi()
				{
					ObjectPost = async (_, _, _) =>
					{
						await Promise.Success; // syntax to make Unity warnings shutup.
						getRequestCount++;
						switch (getRequestCount)
						{
							case 1: // on the first call, make the system use its disk cache...
								throw new NoConnectivityException("simulated lack o nets");
							case 2: // on the second call, there is no data, because its been deleted!
								return new InventoryView
								{
									currencies = Array.Empty<CurrencyView>(),
									items = new ItemGroup[]
									{
										// new ItemGroup()
										// {
										// 	id = InventoryTestItem.FULL_CONTENT_ID + ".a",
										// 	items = new Item[]
										// 	{
										// 		new Item
										// 		{
										// 			id = 4,
										// 			properties = Array.Empty<ItemProperty>()
										// 		}
										// 	}
										// }
									}
								};
							default:
								throw new NotImplementedException("Unexpected get to inventory");
						}
					}
				});
			});
			yield return Context.OnReady.ToYielder();
			Assert.IsTrue(Context.OnReady.IsCompleted);
			
			// pre-populate the disk cache
			var layer = DependencyBuilder.Instantiate<ScopedServiceStorage<OfflineCacheStorageLayer>>(Context.ServiceProvider);
			var inventory = new PlayerInventory();
			inventory.LocalItems.Insert(InventoryTestItem.FULL_CONTENT_ID + ".a", new PlayerItem
			{
				ItemId = 1,
				ContentId = InventoryTestItem.FULL_CONTENT_ID + ".a"
			});
			inventory.LocalItems.Insert(InventoryTestItem.FULL_CONTENT_ID + ".b", new PlayerItem
			{
				ItemId = 2,
				ContentId = InventoryTestItem.FULL_CONTENT_ID + ".b"
			});
			inventory.LocalItems.Insert(InventoryTestItem.FULL_CONTENT_ID + ".will-be-deleted", new PlayerItem
			{
				ItemId = 3,
				ContentId = InventoryTestItem.FULL_CONTENT_ID + ".will-be-deleted"
			});
			layer.Save(inventory);

			var items = Context.Inventory.GetItems("items");
			var callbackInvocationCount = 0;
			items.OnDataUpdated += (nextItems) =>
			{
				callbackInvocationCount++;
			};
			yield return items.OnReady.ToYielder();

			Assert.AreEqual(3, items.Count);
			Assert.AreEqual(1, callbackInvocationCount);

			// // simulate a notification!
			Context.Api.NotificationService.Publish("inventory.refresh",
			                                        Json.Deserialize(JsonUtility.ToJson(
				                                                         new PlayerInventory.InventoryScopeNotification()
				                                                         {
					                                                         scopes = new string[]
					                                                         {
						                                                         InventoryTestItem.FULL_CONTENT_ID + ".will-be-deleted"
					                                                         }
				                                                         })));
			//
			// simulate a bit of time...
			yield return new WaitForSecondsRealtime(DebounceService.DEFAULT_DEBOUNCE_TIME_SECONDS + .1f);
			//
			// Assert.AreEqual(2, callbackInvocationCount);
			Assert.AreEqual(2, items.Count); // .a and .b exist

		}
	}
}
