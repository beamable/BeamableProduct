using Beamable.Api.Autogenerated.Inventory;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Dependencies;
using Beamable.Common.Inventory;
using Beamable.Platform.Tests.Inventory;
using Beamable.Player;
using NUnit.Framework;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.TestTools;

namespace Beamable.Tests.Runtime
{
	public class PlayerInventoryPSDKGetItems : BeamContextTest
	{
		[UnityTest]
		public IEnumerator CanGetPlayerItems_Simple()
		{
			const string itemName = "test";
			
			async Promise<InventoryView> ObjectPost(long objectid, InventoryQueryRequest gsreq, bool includeauthheader)
			{
				await Promise.Success;
				return new InventoryView
				{
					currencies = Array.Empty<CurrencyView>(),
					items = new ItemGroup[]
					{
						new ItemGroup()
						{
							id = InventoryTestItem.FULL_CONTENT_ID + "." + itemName,
							items = new Item[]
							{
								new Item
								{
									id = 1,
									properties = Array.Empty<ItemProperty>()
								}
							}
						}
					}
				};
			}
			
			MockContent.Provide(new InventoryTestItem().SetContentName(itemName));
			TriggerContextInit(b =>
			{
				OnRegister(b);
				b.ReplaceSingleton<IInventoryApi>(new MockInventoryApi()
				{
					ObjectPost = ObjectPost
				});
			});
			yield return Context.OnReady.ToYielder();
			Assert.IsTrue(Context.OnReady.IsCompleted);

			var items = Context.Inventory.GetItems(InventoryTestItem.FULL_CONTENT_ID);
			yield return items.OnReady.ToYielder();
			
			Assert.AreEqual(1, items.Count);
		}
		
		[UnityTest]
		public IEnumerator CanGetPlayerItems_ReadFromCache_Empty()
		{
			const string itemName = "test";
			
			MockContent.Provide(new InventoryTestItem().SetContentName(itemName));
			TriggerContextInit(b =>
			{
				OnRegister(b);
				b.ReplaceSingleton<IInventoryApi>(new MockInventoryApi()
				{
					ObjectPost = (_, _, _) => throw new NoConnectivityException("simulated lack of internet")
				});
			});
			yield return Context.OnReady.ToYielder();
			Assert.IsTrue(Context.OnReady.IsCompleted);

			var items = Context.Inventory.GetItems(InventoryTestItem.FULL_CONTENT_ID);
			yield return items.OnReady.ToYielder();
			
			Assert.AreEqual(0, items.Count);
		}
		
		
		[UnityTest]
		public IEnumerator CanGetPlayerItems_ReadFromCache_NotEmpty()
		{
			const string itemName = "test";
			
			MockContent.Provide(new InventoryTestItem().SetContentName(itemName));
			TriggerContextInit(b =>
			{
				OnRegister(b);
				
				b.ReplaceSingleton<IInventoryApi>(new MockInventoryApi()
				{
					ObjectPost = (_, _, _) => throw new NoConnectivityException("simulated lack of internet")
				});
			}, p =>
			{
				OnInit(p);
				// save out an initial inventory...
				var layer = DependencyBuilder.Instantiate<ScopedServiceStorage<OfflineCacheStorageLayer>>(p.ServiceProvider);
				layer.Save(new PlayerInventory());
				// cache.Save();
			});
			yield return Context.OnReady.ToYielder();
			Assert.IsTrue(Context.OnReady.IsCompleted);

			var items = Context.Inventory.GetItems(InventoryTestItem.FULL_CONTENT_ID);
			yield return items.OnReady.ToYielder();
			
			Assert.AreEqual(1, items.Count);
		}
	}
}
