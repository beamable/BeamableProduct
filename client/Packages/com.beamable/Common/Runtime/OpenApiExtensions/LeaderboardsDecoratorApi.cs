using Beamable.Api.Autogenerated.Leaderboards;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Content;
using Beamable.Common.Dependencies;
using System;

namespace Beamable.Api.Autogenerated.Leaderboards.Extensions
{
	public static class DependencyExtensions
	{

		public static IDependencyBuilder AddLeaderboardDecorator<T>(this IDependencyBuilder builder, Func<ILeaderboardsApi, T> factory)
			where T : LeaderboardsDecoratorApi
		{
			builder.AddSingletonDecorator<LeaderboardsApi, ILeaderboardsApi, T>(factory);
			return builder;
		}
	}
	
	public class LeaderboardsDecoratorApi : ILeaderboardsApi
	{
		private readonly ILeaderboardsApi _api;

		public LeaderboardsDecoratorApi(ILeaderboardsApi api)
		{
			_api = api;
		}
		
		public virtual Promise<CommonResponse> ObjectDeleteEntries(string objectId)
		{
			throw new System.NotImplementedException();
		}

		public Promise<LeaderboardMembershipResponse> ObjectGetMembership(string objectId, long playerId)
		{
			throw new System.NotImplementedException();
		}

		public virtual Promise<LeaderBoardViewResponse> ObjectGetRanks(string ids, string objectId, bool includeAuthHeader = true)
		{
			return _api.ObjectGetRanks(ids, objectId, includeAuthHeader);
		}

		public Promise<LeaderboardPartitionInfo> ObjectGetPartition(string objectId, long playerId)
		{
			throw new System.NotImplementedException();
		}

		public virtual Promise<LeaderBoardViewResponse> ObjectGetFriends(string objectId)
		{
			return _api.ObjectGetFriends(objectId);
		}

		public Promise<CommonResponse> ObjectPost(string objectId, LeaderboardCreateRequest gsReq)
		{
			throw new System.NotImplementedException();
		}

		public Promise<CommonResponse> ObjectDelete(string objectId)
		{
			throw new System.NotImplementedException();
		}

		public Promise<MatchMakingMatchesPvpResponse> ObjectGetMatches(string objectId, int poolSize, int windowSize, int windows, bool includeAuthHeader = true)
		{
			throw new System.NotImplementedException();
		}

		public Promise<LeaderboardAssignmentInfo> ObjectGetAssignment(string objectId)
		{
			throw new System.NotImplementedException();
		}

		public Promise<CommonResponse> ObjectDeleteAssignment(string objectId, LeaderboardRemoveCacheEntryRequest gsReq)
		{
			throw new System.NotImplementedException();
		}

		public Promise<CommonResponse> ObjectPutEntry(string objectId, LeaderboardAddRequest gsReq, bool includeAuthHeader = true)
		{
			throw new System.NotImplementedException();
		}

		public Promise<CommonResponse> ObjectDeleteEntry(string objectId, LeaderboardRemoveEntryRequest gsReq)
		{
			throw new System.NotImplementedException();
		}

		public Promise<CommonResponse> ObjectPutFreeze(string objectId)
		{
			throw new System.NotImplementedException();
		}

		public Promise<LeaderboardDetails> ObjectGetDetails(string objectId, Optional<int> from = null, Optional<int> max = null)
		{
			throw new System.NotImplementedException();
		}

		public virtual Promise<LeaderBoardViewResponse> ObjectGetView(string objectId,
		                                                      Optional<long> focus = null,
		                                                      Optional<bool> friends = null,
		                                                      Optional<int> from = null,
		                                                      Optional<bool> guild = null,
		                                                      Optional<int> max = null,
		                                                      Optional<long> outlier = null,
		                                                      bool includeAuthHeader = true)
		{
			return _api.ObjectGetView(objectId, focus, friends, from, guild, max, outlier, includeAuthHeader);
		}

		public Promise<CommonResponse> ObjectPutSwap(string objectId, LeaderboardSwapRequest gsReq)
		{
			throw new System.NotImplementedException();
		}

		public Promise<LeaderboardListResponse> GetList(Optional<int> limit = null, Optional<int> skip = null)
		{
			throw new System.NotImplementedException();
		}

		public Promise<ListLeaderBoardViewResponse> GetPlayer(long dbid)
		{
			throw new System.NotImplementedException();
		}

		public virtual Promise<LeaderboardAssignmentInfo> GetAssignment(string boardId, Optional<bool> joinBoard = null)
		{
			return _api.GetAssignment(boardId, joinBoard);
		}

		public Promise<LeaderboardUidResponse> GetUid()
		{
			throw new System.NotImplementedException();
		}
	}
}
