// This file generated by a copy-operation from another project. 
// Edits to this file will be overwritten by the build process. 

using Beamable.Common.Api.Announcements;
using Beamable.Common.Content;
using Beamable.Common.Inventory;
using System.Collections.Generic;
using System.Linq;

namespace Beamable.Api.Autogenerated.Models
{
	public static class LegacyConverterExtensions
	{
		public static Common.Api.Announcements.AnnouncementQueryResponse ConvertToLegacy(this AnnouncementQueryResponse response)
		{
			if (response == null)
			{
				return new Common.Api.Announcements.AnnouncementQueryResponse();
			}

			return new Common.Api.Announcements.AnnouncementQueryResponse { announcements = response.announcements.ConvertToLegacy() };
		}

		public static List<Common.Api.Announcements.AnnouncementView> ConvertToLegacy(this AnnouncementView[] announcementViews)
		{
			return announcementViews.Select(item => new Common.Api.Announcements.AnnouncementView
			{
				id = item.id,
				channel = item.channel,
				startDate = item.startDate.GetOrElse(string.Empty),
				endDate = item.endDate.GetOrElse(string.Empty),
				secondsRemaining = item.secondsRemaining.GetOrElse(0),
				title = item.title,
				summary = item.summary,
				body = item.body,
				attachments = item.attachments.ConvertToLegacy(),
				gift = item.gift.ConvertToLegacy(),
				isRead = item.isRead,
				isClaimed = item.isClaimed
			}).ToList();
		}

		public static List<Common.Announcements.AnnouncementAttachment> ConvertToLegacy(this AnnouncementAttachment[] attachments)
		{
			return attachments.Select(attachment => new Common.Announcements.AnnouncementAttachment
			{
				symbol = attachment.symbol, 
				count = attachment.count, 
				type = attachment.type.GetOrElse(string.Empty)
			}).ToList();
		}

		public static PlayerRewardView ConvertToLegacy(this OptionalPlayerReward optionalPlayerReward)
		{
			var converted = new PlayerRewardView();
			if (optionalPlayerReward.HasValue)
			{
				PlayerReward playerReward = optionalPlayerReward.Value;
				converted.description = playerReward.description;
				converted.applyVipBonus = playerReward.applyVipBonus;
				converted.items = playerReward.addItems.ConvertToLegacy();
				converted.currencies = playerReward.changeCurrencies.ConvertToLegacy();
			}

			return converted;
		}

		public static OptionalPlayerRewardNewItemView ConvertToLegacy(this OptionalArrayOfNewItemReward optionalItemRewards)
		{
			var converted = new OptionalPlayerRewardNewItemView();
			if (optionalItemRewards.HasValue)
			{
				converted.SetValue(new PlayerRewardListOfNewItemView
				{
					listData = optionalItemRewards.Value.Select(item => new PlayerRewardNewItemView
					{
						symbol = new ItemRef(item.symbol),
						properties = new OptionalSerializableDictionaryStringToString
						{
							HasValue = item.properties.HasValue, Value = item.properties.Value
						}
					}).ToList()
				});
			}

			return converted;
		}

		public static OptionalPlayerRewardCurrencyChangeView ConvertToLegacy(this OptionalArrayOfCurrencyChangeReward optionalCurrencyReward)
		{
			var converted = new OptionalPlayerRewardCurrencyChangeView();
			if (optionalCurrencyReward.HasValue)
			{
				converted.SetValue(new PlayerRewardListOfCurrencyChangeView
				{
					listData = optionalCurrencyReward.Value.Select(currency => new PlayerRewardCurrencyChangeView
					{
						amount = currency.amount, 
						symbol = new CurrencyRef(currency.symbol)
					}).ToList()
				});
			}

			return converted;
		}
	}
}
