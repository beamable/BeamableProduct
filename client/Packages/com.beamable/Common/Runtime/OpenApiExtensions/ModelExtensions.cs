using Beamable.Common.Content;
using System;
using System.Collections.Generic;
using UnityEngine;

namespace Beamable.Api.Autogenerated.Models
{
	public partial class BatchReadStatsResponse
	{
		public BatchReadStatsPlayerResponseDictionary playerIdToStats = new BatchReadStatsPlayerResponseDictionary();
	}

	[Serializable]
	public class
		BatchReadStatsPlayerResponseDictionary : SerializableDictionary<long, BatchReadStatsPlayerResponse>
	{
		
	}
	
	[Serializable]
	public class BatchReadStatsPlayerResponse
	{
		public long id;
		public SerializableDictionaryStringToInt intStats = new MapOfInt();
		public SerializableDictionaryStringToBool boolStats = new MapOfBool();
		public SerializableDictionaryStringToString stringStats = new MapOfString();
	}

	[Serializable]
	public class StatResults<TVal, TDict>
		where TDict : SerializableDictionaryStringToSomething<TVal>, new()
	{
		[Serializable]
		public class Group
		{
			public long id;
			public List<Entry> stats = new List<Entry>();

			public TDict ToDictionary()
			{
				var dict = new TDict();
				foreach (var stat in stats)
				{
					dict[stat.k] = stat.v;
				}

				return dict;
			}
		}

		[Serializable]
		public class Entry
		{
			public string k;
			public TVal v;
		}

		public List<Group> results;

		public Dictionary<long, Group> ToDictionary()
		{
			var res = new Dictionary<long, Group>();
			foreach (var result in results)
			{
				res[result.id] = result;
			}

			return res;
		}
	}
	
	[Serializable]
	public class StatsAsStrings : StatResults<string, MapOfString> { }

	[Serializable]
	public class StatsAsBools : StatResults<bool, MapOfBool> { }

	[Serializable]
	public class StatsAsInts : StatResults<int, MapOfInt> { }


	public class StatsBatchResponseSerializer : ICustomSerializer<BatchReadStatsResponse>
	{


		public BatchReadStatsResponse Deserialize(string data)
		{
			var stringStats = JsonUtility.FromJson<StatsAsStrings>(data);
			var intStats = JsonUtility.FromJson<StatsAsInts>(data);
			var boolStats = JsonUtility.FromJson<StatsAsBools>(data);

			var dict = new BatchReadStatsPlayerResponseDictionary();
			foreach (var playerToStats in stringStats.ToDictionary())
			{
				if (!dict.TryGetValue(playerToStats.Key, out var strStats))
				{
					dict[playerToStats.Key] = strStats = new BatchReadStatsPlayerResponse();
				}

				strStats.stringStats = playerToStats.Value.ToDictionary();
			}
			
			
			foreach (var playerToStats in intStats.ToDictionary())
			{
				if (!dict.TryGetValue(playerToStats.Key, out var strStats))
				{
					dict[playerToStats.Key] = strStats = new BatchReadStatsPlayerResponse();
				}

				strStats.intStats = playerToStats.Value.ToDictionary();
			}

			
			foreach (var playerToStats in boolStats.ToDictionary())
			{
				if (!dict.TryGetValue(playerToStats.Key, out var strStats))
				{
					dict[playerToStats.Key] = strStats = new BatchReadStatsPlayerResponse();
				}

				strStats.boolStats = playerToStats.Value.ToDictionary();
			}
			
			return new BatchReadStatsResponse
			{
				playerIdToStats = dict
			};
		}

		// public long id;
		// public List<StatEntry> stats;


		// 	[Serializable]
		// 	public class StatEntry
		// 	{
		// 		public string k;
		// #if DB_MICROSERVICE
		//       public object v;
		// #else
		// 		public string v;
		// #endif
		// 	}

	}
}
