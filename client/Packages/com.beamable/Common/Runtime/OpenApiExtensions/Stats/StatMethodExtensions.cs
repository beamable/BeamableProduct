using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Pooling;
using Beamable.Serialization.SmallerJSON;
using UnityEngine;
using EmptyResponse = Beamable.Api.Autogenerated.Models.EmptyResponse;

namespace Beamable.Api.Autogenerated.Stats
{
	public partial interface IStatsApi
	{
		// public Promise Write(bool isPublic);
		Promise Write(bool isPublic, long playerId, StatUpdateTypedRequest request);
	}

	public partial class StatsApi
	{
		public async Promise Write(bool isPublic, long playerId, StatUpdateTypedRequest request)
		{
			// this.ObjectPostClient()
			var objectId = $"client.{(isPublic ? "public" : "private")}.player.{playerId}";
			
			string gsUrl = "/object/stats/{objectId}/client";
			gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
			// make the request and return the result

			var dict = new ArrayDict();

			dict[nameof(StatUpdateRequest.objectId)] = objectId;
			dict[nameof(StatUpdateRequest.emitAnalytics)] = request.emitAnalytics.GetOrElse(false);

			var addDict = new ArrayDict();
			var setDict = new ArrayDict();
			dict[nameof(StatUpdateRequest.add)] = addDict;
			dict[nameof(StatUpdateRequest.set)] = setDict;
			
			// handle all the adds
			if (request.addLongs.HasValue)
			{
				foreach (var add in request.addLongs.Value)
				{
					addDict[add.Key] = add.Value;
				}
			}
			
			// handle all the sets
			if (request.setLongs.HasValue)
			{
				foreach (var set in request.setLongs.Value)
				{
					setDict[set.Key] = set.Value;
				}
			}
			if (request.setStrings.HasValue)
			{
				foreach (var set in request.setStrings.Value)
				{
					setDict[set.Key] = set.Value;
				}
			}
			
			using var sb = StringBuilderPool.StaticPool.Spawn();
			var json = Json.Serialize(dict, sb.Builder);

			Debug.Log("WRITING STATS " + json);
			var _ = await _requester.Request<EmptyResponse>(Method.POST, gsUrl, json, true, this.Serialize<EmptyResponse>);
		}
	}
}
