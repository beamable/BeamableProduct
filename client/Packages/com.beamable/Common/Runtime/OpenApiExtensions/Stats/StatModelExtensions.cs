using Beamable.Common.Content;
using Beamable.Serialization.SmallerJSON;
using System;
using System.Collections;
using UnityEngine.Serialization;

namespace Beamable.Api.Autogenerated.Models
{
	[Serializable]
	public partial class StatUpdateTypedRequest
	{
		public OptionalMapOfLong addLongs = new OptionalMapOfLong();
		public OptionalBool emitAnalytics = new OptionalBool();
		public OptionalMapOfLong setLongs = new OptionalMapOfLong();
		public OptionalMapOfString setStrings = new OptionalMapOfString();
	}
	
	public partial class BatchReadStatsResponse
	{
		public BatchReadStatsPlayerResponseDictionary playerIdToStats = new BatchReadStatsPlayerResponseDictionary();
	}

	[Serializable]
	public class
		BatchReadStatsPlayerResponseDictionary : SerializableDictionary<long, BatchReadStatsPlayerResponse>
	{
		
	}
	
	[Serializable]
	public class BatchReadStatsPlayerResponse
	{
		public long id;
		public SerializableDictionaryStringToLong longStats = new MapOfLong();
		public SerializableDictionaryStringToBool boolStats = new MapOfBool();
		public SerializableDictionaryStringToString stringStats = new MapOfString();
	}
	public class StatsBatchResponseSerializer : ICustomSerializer<BatchReadStatsResponse>
	{


		public BatchReadStatsResponse Deserialize(string data)
		{
			var x = Json.Deserialize(data) as ArrayDict;
			var dict = new BatchReadStatsPlayerResponseDictionary();
			var res = new BatchReadStatsResponse {playerIdToStats = dict};
			if (!x.TryGetValue(nameof(BatchReadStatsResponse.results), out var results) || !(results is IList resultsList))
			{
				return res;
			}

			foreach (var elem in resultsList)
			{
				if (!(elem is ArrayDict elemDict)) continue;

				if (!elemDict.TryGetValue("id", out var playerIdObject) || !(playerIdObject is long playerId)) continue;

				if (!elemDict.TryGetValue("stats", out var statsObj) || !(statsObj is ArrayDict statsDict)) continue;

				var playerStats = dict[playerId] = new BatchReadStatsPlayerResponse {id = playerId};
				foreach (var statKvp in statsDict)
				{
					var valueObj = statKvp.Value;
					var keyStr = statKvp.Key;
					
					switch (valueObj)
					{
						case string stringStat:
							playerStats.stringStats[keyStr] = stringStat;
							break;
						case long intStat:
							playerStats.longStats[keyStr] = intStat;
							break;
						case bool boolStat:
							playerStats.boolStats[keyStr] = boolStat;
							break;
						default:
							break;
					}
					
				}
			}
			return res;
		}

	}
}
