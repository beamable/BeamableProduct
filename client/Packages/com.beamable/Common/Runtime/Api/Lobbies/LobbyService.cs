using Beamable.Api.Autogenerated.Lobby;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Content;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Beamable.Experimental.Api.Lobbies
{
	// TODO: This needs to be implemented for "Real"
	public class LobbyService : ILobbyApi
	{
		private readonly IBeamableRequester _requester;
		private readonly IUserContext _userContext;
		private readonly IBeamLobbyApi _api;
		private ILobbyApi _lobbyApiImplementation;

		public LobbyService(IBeamableRequester requester, IUserContext userContext, IBeamLobbyApi api)
		{
			_requester = requester;
			_userContext = userContext;
			_api = api;
		}

		/// <inheritdoc cref="ILobbyApi.FindLobbies"/>
		public Promise<LobbyQueryResponse> FindLobbies()
		{
			return _requester.Request<LobbyQueryResponse>(
				Method.GET,
				$"/lobbies"
			);
		}

		/// <inheritdoc cref="ILobbyApi.FindLobbiesOfType"/>
		public Promise<LobbyQueryResponse> FindLobbiesOfType(string matchType, int limit = 100, int skip = 0)
		{
			return _requester.Request<LobbyQueryResponse>(
				Method.GET,
				$"/lobbies",
				new LobbyQueryRequest(skip, limit, matchType)
			);
		}

		/// <inheritdoc cref="ILobbyApi.CreateLobby"/>
		public async Promise<Lobby> CreateLobby(string name,
		                                  LobbyRestriction restriction,
		                                  string gameTypeId = null,
		                                  string description = null,
		                                  List<Tag> playerTags = null,
		                                  int? maxPlayers = null,
		                                  int? passcodeLength = null,
		                                  Dictionary<string, string> statsToInclude = null,
		                                  Dictionary<string, string> data = null)
		{
			// Convert LobbyRestriction types
			var newRestriction = restriction == LobbyRestriction.Open
				? Beamable.Api.Autogenerated.Models.LobbyRestriction.Open
				: Beamable.Api.Autogenerated.Models.LobbyRestriction.Closed;

			// Convert list of tags
			OptionalArrayOfTag optionalTags;
			if (playerTags == null)
			{
				optionalTags = new OptionalArrayOfTag();
			}
			else
			{
				var tags = playerTags.Select(t => new Beamable.Api.Autogenerated.Models.Tag()
				{
					name = new OptionalString(t.name), value = new OptionalString(t.value)
				}).ToArray();
				optionalTags = new OptionalArrayOfTag(tags);
			}

			var res = await _api.PostApiLobbies(new CreateLobby()
			{
				name = new OptionalString(name),
				description = new OptionalString(description),
				restriction = new OptionalLobbyRestriction(newRestriction),
				matchType = new OptionalString(gameTypeId),
				playerTags = new OptionalArrayOfTag(optionalTags),
				maxPlayers = maxPlayers == null ? new OptionalInt() : new OptionalInt((int)maxPlayers),
				passcodeLength = passcodeLength == null ? new OptionalInt() : new OptionalInt((int)passcodeLength),
				data = new OptionalMapOfString(data)
			});

			var players = res.players.Value.Select(p => new LobbyPlayer()
			{
				playerId = p.playerId,
				stats = null,
				joined = p.joined,
				tags =  p.tags.Value.Select(t => new Tag(t.name, t.value)).ToList()
			}).ToList();

			return new Lobby()
			{
				description = res.description,
				maxPlayers = res.maxPlayers,
				name = res.name,
				restriction = res.restriction.Value == Beamable.Api.Autogenerated.Models.LobbyRestriction.Open ? LobbyRestriction.Open.ToString() : LobbyRestriction.Closed.ToString(),
				passcode = res.passcode,
				players = players,
				host = res.host,
				lobbyId = res.lobbyId,
				data = res.data
			};
		}

		/// <inheritdoc cref="ILobbyApi.CreateLobby"/>
		[Obsolete("This method with this signature uses an old type request, please use the other signature")]
		public Promise<Lobby> CreateLobby(string name,
										  LobbyRestriction restriction,
										  SimGameTypeRef gameTypeRef = null,
										  string description = null,
										  List<Tag> playerTags = null,
										  int? maxPlayers = null,
										  int? passcodeLength = null,
										  List<string> statsToInclude = null,
										  Dictionary<string, string> data = null)
		{
			return _requester.Request<Lobby>(
				Method.POST,
				$"/lobbies",
				new CreateLobbyRequest(
					name,
					description,
					restriction.ToString(),
					gameTypeRef?.Id,
					playerTags,
					maxPlayers,
					passcodeLength)
			);
		}

		/// <inheritdoc cref="ILobbyApi.JoinLobby"/>
		public Promise<Lobby> JoinLobby(string lobbyId, List<Tag> playerTags = null)
		{
			return _requester.Request<Lobby>(
				Method.PUT,
				$"/lobbies/{lobbyId}",
				new JoinLobbyRequest(playerTags)
			);
		}

		/// <inheritdoc cref="ILobbyApi.JoinLobbyByPasscode"/>
		public Promise<Lobby> JoinLobbyByPasscode(string passcode, List<Tag> playerTags = null)
		{
			return _requester.Request<Lobby>(
				Method.PUT,
				$"/lobbies/passcode",
				new JoinByPasscodeRequest(passcode, playerTags)
			);
		}

		/// <inheritdoc cref="ILobbyApi.GetLobby"/>
		public async Promise<Lobby> GetLobby(string lobbyId)
		{
			var res = await _api.Get(new Guid(lobbyId));

			var players = res.players.Value.Select(p => new LobbyPlayer()
			{
				playerId = p.playerId,
				stats = null,
				joined = p.joined,
				tags =  p.tags.Value.Select(t => new Tag(t.name, t.value)).ToList()
			}).ToList();

			return new Lobby()
			{
				description = res.description,
				maxPlayers = res.maxPlayers,
				name = res.name,
				restriction = res.restriction.Value == Beamable.Api.Autogenerated.Models.LobbyRestriction.Open ? LobbyRestriction.Open.ToString() : LobbyRestriction.Closed.ToString(),
				passcode = res.passcode,
				players = players,
				host = res.host,
				lobbyId = res.lobbyId,
				data = res.data
			};
		}

		/// <inheritdoc cref="ILobbyApi.LeaveLobby"/>
		public Promise LeaveLobby(string lobbyId)
		{
			return _requester.Request<Unit>(
				Method.DELETE,
				$"/lobbies/{lobbyId}",
				new RemoveFromLobbyRequest(_userContext.UserId.ToString())
			).ToPromise();
		}

		/// <inheritdoc cref="ILobbyApi.AddPlayerTags"/>
		public Promise<Lobby> AddPlayerTags(string lobbyId,
											List<Tag> tags,
											string playerId = null,
											bool replace = false)
		{
			playerId = playerId ?? _userContext.UserId.ToString();
			return _requester.Request<Lobby>(
				Method.PUT,
				$"/lobbies/{lobbyId}/tags",
				new AddTagsRequest(playerId, tags, replace)
			);
		}

		/// <inheritdoc cref="ILobbyApi.RemovePlayerTags"/>
		public Promise<Lobby> RemovePlayerTags(string lobbyId, List<string> tags, string playerId = null)
		{
			playerId = playerId ?? _userContext.UserId.ToString();
			return _requester.Request<Lobby>(
				Method.PUT,
				$"/lobbies/{lobbyId}/tags",
				new RemoveTagsRequest(playerId, tags)
			);
		}

		/// <inheritdoc cref="ILobbyApi.KickPlayer"/>
		public Promise<Lobby> KickPlayer(string lobbyId, string playerId)
		{
			return _requester.Request<Lobby>(
				Method.DELETE,
				$"/lobbies/{lobbyId}",
				new RemoveFromLobbyRequest(playerId)
			);
		}

		/// <inheritdoc cref="ILobbyApi.UpdateLobby"/>
		public async Promise<Lobby> UpdateLobby(string lobbyId,
									 LobbyRestriction restriction,
									 string newHost,
									 string name = null,
									 string description = null,
									 string gameType = null,
									 int? maxPlayers = null,
									 OptionalUpdateData data = null)
		{
			// Convert LobbyRestriction types
			var newRestriction = restriction == LobbyRestriction.Open
				? Beamable.Api.Autogenerated.Models.LobbyRestriction.Open
				: Beamable.Api.Autogenerated.Models.LobbyRestriction.Closed;

			var res = await _api.PutMetadata(new Guid(lobbyId), new UpdateLobby()
			{
				description = new OptionalString(description),
				matchType = new OptionalString(gameType),
				name = new OptionalString(name),
				maxPlayers = maxPlayers == null ? new OptionalInt() : new OptionalInt((int)maxPlayers),
				newHost = new OptionalString(newHost),
				restriction = new OptionalLobbyRestriction(newRestriction),
				data = new OptionalUpdateData(data)
			});

			var players = res.players.Value.Select(p => new LobbyPlayer()
			{
				playerId = p.playerId,
				stats = null,
				joined = p.joined,
				tags =  p.tags.Value.Select(t => new Tag(t.name, t.value)).ToList()
			}).ToList();

			return new Lobby()
			{
				description = res.description,
				maxPlayers = res.maxPlayers,
				name = res.name,
				restriction = res.restriction.Value == Beamable.Api.Autogenerated.Models.LobbyRestriction.Open ? LobbyRestriction.Open.ToString() : LobbyRestriction.Closed.ToString(),
				passcode = res.passcode,
				players = players,
				host = res.host,
				lobbyId = res.lobbyId,
				data = res.data
			};
		}
	}
}
