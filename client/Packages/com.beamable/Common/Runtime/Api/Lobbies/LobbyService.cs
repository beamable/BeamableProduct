// This file generated by a copy-operation from another project. 
// Edits to this file will be overwritten by the build process. 

using Beamable.Api.Autogenerated.Lobby;
using Beamable.Api.Autogenerated.Models;

using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Content;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Beamable.Experimental.Api.Lobbies
{
	// TODO: This needs to be implemented for "Real"
	public class LobbyService : ILobbyApi
	{
		private readonly IBeamableRequester _requester;
		private readonly IUserContext _userContext;
		private readonly IBeamLobbyApi _api;

		public LobbyService(IBeamableRequester requester, IUserContext userContext, IBeamLobbyApi api)
		{
			_requester = requester;
			_userContext = userContext;
			_api = api;
		}

		/// <inheritdoc cref="ILobbyApi.FindLobbies"/>
		public async Promise<LobbyQueryResponse> FindLobbies()
		{
			Beamable.Api.Autogenerated.Models.LobbyQueryResponse res = await _api.GetApiLobbies();

			return LobbyUtils.ConvertLobbyQueryResponse(res);

		}

		/// <inheritdoc cref="ILobbyApi.FindLobbiesOfType"/>
		public async Promise<LobbyQueryResponse> FindLobbiesOfType(string matchType, int limit = 100, int skip = 0)
		{
			Beamable.Api.Autogenerated.Models.LobbyQueryResponse res = await _api.GetApiLobbies(limit, matchType, skip);

			return LobbyUtils.ConvertLobbyQueryResponse(res);


		}

		/// <inheritdoc cref="ILobbyApi.CreateLobby(string,Beamable.Experimental.Api.Lobbies.LobbyRestriction,string,string,System.Collections.Generic.List{Beamable.Experimental.Api.Lobbies.Tag},int?,int?,System.Collections.Generic.Dictionary{string,string},System.Collections.Generic.Dictionary{string,string})"/>
		public async Promise<Lobby> CreateLobby(string name,
		                                  LobbyRestriction restriction,
		                                  string gameTypeId = null,
		                                  string description = null,
		                                  List<Tag> playerTags = null,
		                                  int? maxPlayers = null,
		                                  int? passcodeLength = null,
		                                  Dictionary<string, string> statsToInclude = null,
		                                  Dictionary<string, string> data = null)
		{
			var createLobby = LobbyUtils.GetCreateLobbyType(name, restriction, gameTypeId, description, playerTags,
			                                                maxPlayers, passcodeLength, data);

			var res = await _api.PostApiLobbies(createLobby);

			return LobbyUtils.ConvertLobbyType(res);






		}

		/// <inheritdoc cref="ILobbyApi.CreateLobby(string,Beamable.Experimental.Api.Lobbies.LobbyRestriction,Beamable.Common.Content.SimGameTypeRef,string,System.Collections.Generic.List{Beamable.Experimental.Api.Lobbies.Tag},int?,int?,System.Collections.Generic.List{string},System.Collections.Generic.Dictionary{string,string})"/>
		public Promise<Lobby> CreateLobby(string name,
										  LobbyRestriction restriction,
										  SimGameTypeRef gameTypeRef = null,
										  string description = null,
										  List<Tag> playerTags = null,
										  int? maxPlayers = null,
										  int? passcodeLength = null,
										  List<string> statsToInclude = null,
										  Dictionary<string, string> data = null)
		{
			return CreateLobby(name, restriction, gameTypeRef?.Id, description, playerTags, maxPlayers, passcodeLength,
			                   null, data);










		}

		/// <inheritdoc cref="ILobbyApi.JoinLobby"/>
		public async Promise<Lobby> JoinLobby(string lobbyId, List<Tag> playerTags = null)
		{
			var joinLobby = LobbyUtils.GetJoinLobbyType(playerTags);
			var res = await _api.Put(new Guid(lobbyId), joinLobby);

			return LobbyUtils.ConvertLobbyType(res);

		}

		/// <inheritdoc cref="ILobbyApi.JoinLobbyByPasscode"/>
		public async Promise<Lobby> JoinLobbyByPasscode(string passcode, List<Tag> playerTags = null)
		{
			var joinLobby = LobbyUtils.GetJoinLobbyType(playerTags, passcode);
			var res = await _api.PutPasscode(joinLobby);

			return LobbyUtils.ConvertLobbyType(res);

		}

		/// <inheritdoc cref="ILobbyApi.GetLobby"/>
		public async Promise<Lobby> GetLobby(string lobbyId)
		{
			var res = await _api.Get(new Guid(lobbyId));

			return LobbyUtils.ConvertLobbyType(res);

		}

		/// <inheritdoc cref="ILobbyApi.LeaveLobby"/>
		public async Promise LeaveLobby(string lobbyId)
		{
			var playerId = _userContext.UserId.ToString();
			var removeFromLobby = LobbyUtils.GetRemoveFromLobbyType(playerId);
			await _api.Delete(new Guid(lobbyId), removeFromLobby);


		}

		/// <inheritdoc cref="ILobbyApi.AddPlayerTags"/>
		public async Promise<Lobby> AddPlayerTags(string lobbyId,
											List<Tag> tags,
											string playerId = null,
											bool replace = false)
		{
			playerId = playerId ?? _userContext.UserId.ToString();
			var addTags = LobbyUtils.GetAddTagsType(tags, playerId, replace);
			var res = await _api.PutTags(new Guid(lobbyId), addTags);

			return LobbyUtils.ConvertLobbyType(res);

		}

		/// <inheritdoc cref="ILobbyApi.RemovePlayerTags"/>
		public async Promise<Lobby> RemovePlayerTags(string lobbyId, List<string> tags, string playerId = null)
		{
			playerId = playerId ?? _userContext.UserId.ToString();
			var deleteTagsType = LobbyUtils.GetRemoveTagsType(tags, playerId);
			var res = await _api.DeleteTags(new Guid(lobbyId), deleteTagsType);

			return LobbyUtils.ConvertLobbyType(res);

		}

		/// <inheritdoc cref="ILobbyApi.KickPlayer"/>
		public async Promise<Lobby> KickPlayer(string lobbyId, string playerId)
		{
			var removeFromLobby = LobbyUtils.GetRemoveFromLobbyType(playerId);
			await _api.Delete(new Guid(lobbyId), removeFromLobby);

			return await GetLobby(lobbyId);

		}

		/// <inheritdoc cref="ILobbyApi.UpdateLobby"/>
		public async Promise<Lobby> UpdateLobby(string lobbyId,
									 LobbyRestriction restriction,
									 string newHost,
									 string name = null,
									 string description = null,
									 string gameType = null,
									 int? maxPlayers = null,
									 OptionalUpdateData data = null)
		{
			var updateLobby =
				LobbyUtils.GetUpdateLobbyType(restriction, newHost, name, description, gameType, maxPlayers, data);

			var res = await _api.PutMetadata(new Guid(lobbyId), updateLobby);

			return LobbyUtils.ConvertLobbyType(res);
		}
	}
}
