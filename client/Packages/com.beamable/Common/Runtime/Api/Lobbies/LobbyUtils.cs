// This file generated by a copy-operation from another project. 
// Edits to this file will be overwritten by the build process. 

using Beamable.Api.Autogenerated.Models;
using Beamable.Common.Content;
using System.Collections.Generic;
using System.Linq;

namespace Beamable.Experimental.Api.Lobbies
{
	public static class LobbyUtils
	{
		public static Lobby ConvertLobbyType(Beamable.Api.Autogenerated.Models.Lobby autoGenLobby)
		{
			var players = autoGenLobby.players.Value.Select(p => new LobbyPlayer()
			{
				playerId = p.playerId,
				stats = null,
				joined = p.joined,
				tags =  p.tags.Value.Select(t => new Tag(t.name, t.value)).ToList()
			}).ToList();

			return new Lobby()
			{
				description = autoGenLobby.description,
				maxPlayers = autoGenLobby.maxPlayers,
				name = autoGenLobby.name,
				restriction = autoGenLobby.restriction.Value == Beamable.Api.Autogenerated.Models.LobbyRestriction.Open ? LobbyRestriction.Open.ToString() : LobbyRestriction.Closed.ToString(),
				passcode = autoGenLobby.passcode,
				players = players,
				host = autoGenLobby.host,
				lobbyId = autoGenLobby.lobbyId,
				data = autoGenLobby.data
			};
		}

		public static CreateLobby GetCreateLobbyType(string name,
		                                             LobbyRestriction restriction,
		                                             string gameTypeId = null,
		                                             string description = null,
		                                             List<Tag> playerTags = null,
		                                             int? maxPlayers = null,
		                                             int? passcodeLength = null,
		                                             Dictionary<string, string> data = null)
		{
			var newRestriction = ConvertLobbyRestrictionType(restriction);

			OptionalArrayOfTag optionalTags = ConvertListOfTags(playerTags);

			return new CreateLobby()
			{
				name = new OptionalString(name),
				description = new OptionalString(description),
				restriction = new OptionalLobbyRestriction(newRestriction),
				matchType = new OptionalString(gameTypeId),
				playerTags = new OptionalArrayOfTag(optionalTags),
				maxPlayers = maxPlayers == null ? new OptionalInt() : new OptionalInt((int)maxPlayers),
				passcodeLength = passcodeLength == null ? new OptionalInt() : new OptionalInt((int)passcodeLength),
				data = new OptionalMapOfString(data)
			};
		}

		public static JoinLobby GetJoinLobbyType(List<Tag> tags, string passcode = null)
		{
			return new JoinLobby()
			{
				tags = ConvertListOfTags(tags),
				passcode = new OptionalString(passcode)
			};
		}

		public static RemoveFromLobby GetRemoveFromLobbyType(string playerId = null)
		{
			return new RemoveFromLobby() {playerId = new OptionalString(playerId)};
		}

		public static AddTags GetAddTagsType(List<Tag> tags,
		                                     string playerId = null,
		                                     bool replace = false)
		{
			var newTags = ConvertListOfTags(tags);
			return new AddTags()
			{
				playerId = new OptionalString(playerId),
				replace = new OptionalBool(replace),
				tags = new OptionalArrayOfTag(newTags)
			};
		}

		public static RemoveTags GetRemoveTagsType(List<string> tags, string playerId)
		{
			return new RemoveTags()
			{
				tags = new OptionalArrayOfString(tags),
				playerId = new OptionalString(playerId)
			};
		}

		public static UpdateLobby GetUpdateLobbyType(LobbyRestriction restriction,
		                                             string newHost,
		                                             string name = null,
		                                             string description = null,
		                                             string gameType = null,
		                                             int? maxPlayers = null,
		                                             OptionalUpdateData data = null)
		{
			var newRestriction = ConvertLobbyRestrictionType(restriction);

			return new UpdateLobby()
			{
				description = new OptionalString(description),
				matchType = new OptionalString(gameType),
				name = new OptionalString(name),
				maxPlayers = maxPlayers == null ? new OptionalInt() : new OptionalInt((int)maxPlayers),
				newHost = new OptionalString(newHost),
				restriction = new OptionalLobbyRestriction(newRestriction),
				data = new OptionalUpdateData(data)
			};
		}

		public static LobbyQueryResponse ConvertLobbyQueryResponse(Beamable.Api.Autogenerated.Models.LobbyQueryResponse res)
		{
			var lobbiesConverted = res.results.HasValue ? res.results.Value.Select(ConvertLobbyType).ToList() : new List<Lobby>();
			return new LobbyQueryResponse()
			{
				results = lobbiesConverted
			};
		}

		public static Beamable.Api.Autogenerated.Models.LobbyRestriction ConvertLobbyRestrictionType(LobbyRestriction restriction)
		{
			var newRestriction = restriction == LobbyRestriction.Open
				? Beamable.Api.Autogenerated.Models.LobbyRestriction.Open
				: Beamable.Api.Autogenerated.Models.LobbyRestriction.Closed;
			return newRestriction;
		}

		public static OptionalArrayOfTag ConvertListOfTags(List<Tag> oldTags)
		{
			OptionalArrayOfTag optionalTags;
			if (oldTags == null)
			{
				optionalTags = new OptionalArrayOfTag();
			}
			else
			{
				var tags = oldTags.Select(t => new Beamable.Api.Autogenerated.Models.Tag()
				{
					name = new OptionalString(t.name), value = new OptionalString(t.value)
				}).ToArray();
				optionalTags = new OptionalArrayOfTag(tags);
			}

			return optionalTags;
		}
	}
}
