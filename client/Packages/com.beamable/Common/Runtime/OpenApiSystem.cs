
using Beamable.Api.Autogenerated.Accounts;
using Beamable.Api.Autogenerated.Announcements;
using Beamable.Api.Autogenerated.Auth;
using Beamable.Api.Autogenerated.Beamo;
using Beamable.Api.Autogenerated.Calendars;
using Beamable.Api.Autogenerated.Chatv2;
using Beamable.Api.Autogenerated.Cloudsaving;
using Beamable.Api.Autogenerated.Commerce;
using Beamable.Api.Autogenerated.Content;
using Beamable.Api.Autogenerated.EventPlayers;
using Beamable.Api.Autogenerated.Events;
using Beamable.Api.Autogenerated.Groups;
using Beamable.Api.Autogenerated.GroupUsers;
using Beamable.Api.Autogenerated.Inventory;
using Beamable.Api.Autogenerated.Leaderboards;
using Beamable.Api.Autogenerated.Lobby;
using Beamable.Api.Autogenerated.Mail;
using Beamable.Api.Autogenerated.Mailbox;
using Beamable.Api.Autogenerated.Match;
using Beamable.Api.Autogenerated.Matchmaking;
using Beamable.Api.Autogenerated.Models;
using Beamable.Api.Autogenerated.Notification;
using Beamable.Api.Autogenerated.Party;
using Beamable.Api.Autogenerated.Payments;
using Beamable.Api.Autogenerated.Player;
using Beamable.Api.Autogenerated.Playerpresence;
using Beamable.Api.Autogenerated.Presence;
using Beamable.Api.Autogenerated.Push;
using Beamable.Api.Autogenerated.Realms;
using Beamable.Api.Autogenerated.Scheduler;
using Beamable.Api.Autogenerated.Social;
using Beamable.Api.Autogenerated.Stats;
using Beamable.Api.Autogenerated.Ticket;
using Beamable.Api.Autogenerated.Tournaments;
using Beamable.Common;
using Beamable.Common.Content;
using Beamable.Common.Dependencies;
using System;

namespace Beamable.Api.Autogenerated
{
	public class OpenApiRegistration
	{
		public static void RegisterOpenApis(IDependencyBuilder builder)
		{
			// content requires special CSV parsing, and this allows us to inject an override.
			builder.AddSingleton<ICustomSerializer<ClientManifestCsvResponse>, ClientManifestCsvResponseSerializer>();

			builder.AddOrOverrideSingleton<IAccountsApi, AccountsApi>();
			builder.AddOrOverrideSingleton<IContentApi, ContentApi>();
			builder.AddOrOverrideSingleton<IAnnouncementsApi, AnnouncementsApi>();
			builder.AddOrOverrideSingleton<IAuthApi, AuthApi>();
			builder.AddOrOverrideSingleton<IBeamoApi, BeamoApi>();
			builder.AddOrOverrideSingleton<ICalendarsApi, CalendarsApi>();
			builder.AddOrOverrideSingleton<IChatv2Api, Chatv2Api>();
			builder.AddOrOverrideSingleton<ICloudsavingApi, CloudsavingApi>();
			builder.AddOrOverrideSingleton<ICommerceApi, CommerceApi>();
			builder.AddOrOverrideSingleton<IEventPlayersApi, EventPlayersApi>();
			builder.AddOrOverrideSingleton<IEventsApi, EventsApi>();
			builder.AddOrOverrideSingleton<IGroupsApi, GroupsApi>();
			builder.AddOrOverrideSingleton<IGroupUsersApi, GroupUsersApi>();
			builder.AddOrOverrideSingleton<IInventoryApi, InventoryApi>();
			builder.AddOrOverrideSingleton<ILeaderboardsApi, LeaderboardsApi>();
			builder.AddOrOverrideSingleton<IMailApi, MailApi>();
			builder.AddOrOverrideSingleton<IMatchmakingApi, MatchmakingApi>();
			builder.AddOrOverrideSingleton<INotificationApi, NotificationApi>();
			builder.AddOrOverrideSingleton<IPaymentsApi, PaymentsApi>();
			builder.AddOrOverrideSingleton<IPushApi, PushApi>();
			builder.AddOrOverrideSingleton<IRealmsApi, RealmsApi>();
			builder.AddOrOverrideSingleton<ISocialApi, SocialApi>();
			builder.AddOrOverrideSingleton<IStatsApi, StatsApi>();
			builder.AddOrOverrideSingleton<ITournamentsApi, TournamentsApi>();
			
			// proto-actor based services
			
			builder.AddOrOverrideSingleton<IBeamPlayerPresenceApi, BeamPlayerPresenceApi>();
			builder.AddOrOverrideSingleton<IBeamAuthApi, BeamAuthApi>();
			builder.AddOrOverrideSingleton<IBeamLobbyApi, BeamLobbyApi>();
			builder.AddOrOverrideSingleton<IBeamMailboxApi, BeamMailboxApi>();
			builder.AddOrOverrideSingleton<IBeamMatchApi, BeamMatchApi>();
			builder.AddOrOverrideSingleton<IBeamPartyApi, BeamPartyApi>();
			builder.AddOrOverrideSingleton<IBeamPlayerApi, BeamPlayerApi>();
			builder.AddOrOverrideSingleton<IBeamPresenceApi, BeamPresenceApi>();
			builder.AddOrOverrideSingleton<IBeamSchedulerApi, BeamSchedulerApi>();
			builder.AddOrOverrideSingleton<IBeamTicketApi, BeamTicketApi>();
		}
	}

	static class OpenApiRegistrationExtensions
	{
		public static void AddOrOverrideSingleton<TInterface, TImpl>(this IDependencyBuilder builder) where TImpl : TInterface
		{
			if (builder.Has<TInterface>())
			{
				builder.Remove<TInterface>();
			}
			if (builder.Has<TImpl>())
			{
				builder.Remove<TImpl>();
			}

			builder.AddSingleton<TImpl>();
			builder.AddSingleton<TInterface>(p => p.GetService<TImpl>());
		}
	}

	public interface ICustomSerializer<T>
	{
		T Deserialize(string data);
	}

	public class ClientManifestCsvResponseSerializer : ICustomSerializer<ClientManifestCsvResponse>
	{
		public ClientManifestCsvResponse Deserialize(string data)
		{
			var scanner = new CsvManifestScanner(data);
			var manifest = scanner.Parse();

			var response = new ClientManifestCsvResponse();
			response.itemsCsv = new Models.ClientContentInfo[manifest.entries.Count];
			for (var i = 0; i < response.itemsCsv.Length; i++)
			{
				response.itemsCsv[i] = new Models.ClientContentInfo
				{
					contentId = manifest.entries[i].contentId,
					tags = manifest.entries[i].tags,
					type = ContentType.Content,
					uri = manifest.entries[i].uri,
					version = manifest.entries[i].version,
				};
			}
			return response;
		}
	}
}
