
namespace Beamable.Api.Autogenerated.Commerce
{
	using Beamable.Api.Autogenerated.Models;
	using Beamable.Common;
	using Beamable.Common.Content;
	using Beamable.Common.Dependencies;
	using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
	using Method = Beamable.Common.Api.Method;

	public partial interface ICommerceApi
	{
		/// <param name="gsReq">The <see cref="SaveCatalogRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="ResultResponse"/></returns>
		Promise<ResultResponse> PostCatalogLegacy(SaveCatalogRequest gsReq);
		/// <param name="version"></param>
		/// <returns>A promise containing the <see cref="GetCatalogResponse"/></returns>
		Promise<GetCatalogResponse> GetCatalog([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> version);
		/// <param name="version"></param>
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="GetSKUsResponse"/></returns>
		Promise<GetSKUsResponse> GetSkus([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> version, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
		/// <param name="gsReq">The <see cref="SaveSKUsRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="ResultResponse"/></returns>
		Promise<ResultResponse> PostSkus(SaveSKUsRequest gsReq);
	}
	public partial class CommerceApi : ICommerceApi
	{
		/// <param name="gsReq">The <see cref="SaveCatalogRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="ResultResponse"/></returns>
		public virtual Promise<ResultResponse> PostCatalogLegacy(SaveCatalogRequest gsReq)
		{
			string gsUrl = "/basic/commerce/catalog/legacy";
			// make the request and return the result
			return _requester.Request<ResultResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<ResultResponse>);
		}
		/// <param name="version"></param>
		/// <returns>A promise containing the <see cref="GetCatalogResponse"/></returns>
		public virtual Promise<GetCatalogResponse> GetCatalog([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> version)
		{
			string gsUrl = "/basic/commerce/catalog";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			if (((version != default(OptionalLong))
						&& version.HasValue))
			{
				gsQueries.Add(string.Concat("version=", version.Value.ToString()));
			}
			if ((gsQueries.Count > 0))
			{
				gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
				gsUrl = string.Concat(gsUrl, gsQuery);
			}
			// make the request and return the result
			return _requester.Request<GetCatalogResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<GetCatalogResponse>);
		}
		/// <param name="version"></param>
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="GetSKUsResponse"/></returns>
		public virtual Promise<GetSKUsResponse> GetSkus([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> version, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/basic/commerce/skus";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			if (((version != default(OptionalLong))
						&& version.HasValue))
			{
				gsQueries.Add(string.Concat("version=", version.Value.ToString()));
			}
			if ((gsQueries.Count > 0))
			{
				gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
				gsUrl = string.Concat(gsUrl, gsQuery);
			}
			// make the request and return the result
			return _requester.Request<GetSKUsResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<GetSKUsResponse>);
		}
		/// <param name="gsReq">The <see cref="SaveSKUsRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="ResultResponse"/></returns>
		public virtual Promise<ResultResponse> PostSkus(SaveSKUsRequest gsReq)
		{
			string gsUrl = "/basic/commerce/skus";
			// make the request and return the result
			return _requester.Request<ResultResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<ResultResponse>);
		}
	}
}
