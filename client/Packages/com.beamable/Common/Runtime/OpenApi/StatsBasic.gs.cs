
namespace Beamable.Api.Autogenerated.Stats
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IStatsApi
    {
        /// <param name="gsReq">The <see cref="StatsSubscribeRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> PutSubscribe(StatsSubscribeRequest gsReq);
        /// <param name="gsReq">The <see cref="StatsUnsubscribeRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> DeleteSubscribe(StatsUnsubscribeRequest gsReq);
        /// <param name="format"></param>
        /// <param name="objectIds"></param>
        /// <param name="stats"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BatchReadStatsResponse"/></returns>
        Promise<BatchReadStatsResponse> GetClientBatch(string objectIds, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> format, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> stats, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="gsReq">The <see cref="BatchSetStatsRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> PostBatch(BatchSetStatsRequest gsReq);
        /// <param name="gsReq">The <see cref="StatsSearchRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="StatsSearchResponse"/></returns>
        Promise<StatsSearchResponse> PostSearch(StatsSearchRequest gsReq);
        /// <param name="gsReq">The <see cref="SearchExtendedRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="SearchExtendedResponse"/></returns>
        Promise<SearchExtendedResponse> PostSearchExtended(SearchExtendedRequest gsReq);
    }
    public partial class StatsApi : IStatsApi
    {
        /// <param name="gsReq">The <see cref="StatsSubscribeRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> PutSubscribe(StatsSubscribeRequest gsReq)
        {
            string gsUrl = "/basic/stats/subscribe";
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<CommonResponse>);
        }
        /// <param name="gsReq">The <see cref="StatsUnsubscribeRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> DeleteSubscribe(StatsUnsubscribeRequest gsReq)
        {
            string gsUrl = "/basic/stats/subscribe";
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<CommonResponse>);
        }
        /// <param name="format"></param>
        /// <param name="objectIds"></param>
        /// <param name="stats"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BatchReadStatsResponse"/></returns>
        public virtual Promise<BatchReadStatsResponse> GetClientBatch(string objectIds, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> format, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> stats, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/stats/client/batch";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            gsQueries.Add(string.Concat("objectIds=", _requester.EscapeURL(objectIds.ToString())));
            if (((stats != default(OptionalString)) 
                        && stats.HasValue))
            {
                gsQueries.Add(string.Concat("stats=", stats.Value.ToString()));
            }
            if (((format != default(OptionalString)) 
                        && format.HasValue))
            {
                gsQueries.Add(string.Concat("format=", format.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<BatchReadStatsResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<BatchReadStatsResponse>);
        }
        /// <param name="gsReq">The <see cref="BatchSetStatsRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> PostBatch(BatchSetStatsRequest gsReq)
        {
            string gsUrl = "/basic/stats/batch";
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
        }
        /// <param name="gsReq">The <see cref="StatsSearchRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="StatsSearchResponse"/></returns>
        public virtual Promise<StatsSearchResponse> PostSearch(StatsSearchRequest gsReq)
        {
            string gsUrl = "/basic/stats/search";
            // make the request and return the result
            return _requester.Request<StatsSearchResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<StatsSearchResponse>);
        }
        /// <param name="gsReq">The <see cref="SearchExtendedRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="SearchExtendedResponse"/></returns>
        public virtual Promise<SearchExtendedResponse> PostSearchExtended(SearchExtendedRequest gsReq)
        {
            string gsUrl = "/basic/stats/search/extended";
            // make the request and return the result
            return _requester.Request<SearchExtendedResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<SearchExtendedResponse>);
        }
    }
}
