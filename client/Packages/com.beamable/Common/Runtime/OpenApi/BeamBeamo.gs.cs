// This file generated by a copy-operation from another project. 
// Edits to this file will be overwritten by the build process. 


namespace Beamable.Api.Autogenerated.Beamo
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IBeamBeamoApi
    {
        /// <summary>
        /// POST call to `/api/beamo/manifests` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="BeamoV2PostManifestRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2ManifestChecksum"/></returns>
        Promise<BeamoV2ManifestChecksum> PostManifests(BeamoV2PostManifestRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/beamo/manifests` endpoint.
        /// </summary>
        /// <param name="archived"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2GetManifestsResponse"/></returns>
        Promise<BeamoV2GetManifestsResponse> GetManifests([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> archived, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> offset, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/beamo/manifests/{manifestId}` endpoint.
        /// </summary>
        /// <param name="archived"></param>
        /// <param name="manifestId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2Manifest"/></returns>
        Promise<BeamoV2Manifest> GetManifests(System.Guid manifestId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> archived, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/beamo/manifests/current` endpoint.
        /// </summary>
        /// <param name="archived"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2Manifest"/></returns>
        Promise<BeamoV2Manifest> GetManifestsCurrent([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> archived, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/api/beamo/manifests/current` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2EmptyMessage"/></returns>
        Promise<BeamoV2EmptyMessage> PostManifestsCurrent([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/api/beamo/manifests/promote` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="BeamoV2PromoteBeamoManifestRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2EmptyMessage"/></returns>
        Promise<BeamoV2EmptyMessage> PostManifestsPromote(BeamoV2PromoteBeamoManifestRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/beamo/templates` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2GetTemplatesResponse"/></returns>
        Promise<BeamoV2GetTemplatesResponse> GetTemplates([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/beamo/status` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2GetStatusResponse"/></returns>
        Promise<BeamoV2GetStatusResponse> GetStatus([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/beamo/registry-uri` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2UriResponse"/></returns>
        Promise<BeamoV2UriResponse> GetRegistryUri([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/api/beamo/services/registrations` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="BeamoV2ServiceRegistrationQuery"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2ServiceRegistrationResponse"/></returns>
        Promise<BeamoV2ServiceRegistrationResponse> PostServicesRegistrations(BeamoV2ServiceRegistrationQuery gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/api/beamo/services/federation` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="BeamoV2ServiceRegistrationQuery"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2FederationRegistrationResponse"/></returns>
        Promise<BeamoV2FederationRegistrationResponse> PostServicesFederation(BeamoV2ServiceRegistrationQuery gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/api/beamo/services/{serviceName}/federation/traffic` endpoint.
        /// </summary>
        /// <param name="serviceName"></param>
        /// <param name="gsReq">The <see cref="BeamoV2ServiceRegistrationRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2EmptyMessage"/></returns>
        Promise<BeamoV2EmptyMessage> PutServicesFederationTraffic(string serviceName, BeamoV2ServiceRegistrationRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// DELETE call to `/api/beamo/services/{serviceName}/federation/traffic` endpoint.
        /// </summary>
        /// <param name="serviceName"></param>
        /// <param name="gsReq">The <see cref="BeamoV2DeleteRegistrationRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2EmptyMessage"/></returns>
        Promise<BeamoV2EmptyMessage> DeleteServicesFederationTraffic(string serviceName, BeamoV2DeleteRegistrationRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/api/beamo/services/{serviceName}/metrics-request` endpoint.
        /// </summary>
        /// <param name="serviceName"></param>
        /// <param name="gsReq">The <see cref="BeamoV2GetMetricsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2SignedRequest"/></returns>
        Promise<BeamoV2SignedRequest> PostServicesMetricsRequest(string serviceName, BeamoV2GetMetricsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/api/beamo/services/{serviceName}/logs/query` endpoint.
        /// </summary>
        /// <param name="serviceName"></param>
        /// <param name="gsReq">The <see cref="BeamoV2StartServiceLogsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2QueryResponse"/></returns>
        Promise<BeamoV2QueryResponse> PostServicesLogsQuery(string serviceName, BeamoV2StartServiceLogsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// DELETE call to `/api/beamo/services/logs/query/{queryId}` endpoint.
        /// </summary>
        /// <param name="queryId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2ApiBeamoServicesLogsQueryDeleteBeamoResponse"/></returns>
        Promise<BeamoV2ApiBeamoServicesLogsQueryDeleteBeamoResponse> DeleteServicesLogsQuery(string queryId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/beamo/services/logs/query/{queryId}` endpoint.
        /// </summary>
        /// <param name="queryId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2SignedRequest"/></returns>
        Promise<BeamoV2SignedRequest> GetServicesLogsQuery(string queryId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/beamo/services/secret` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2GetServiceSecretResponse"/></returns>
        Promise<BeamoV2GetServiceSecretResponse> GetServicesSecret([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/beamo/storage/connection` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2ConnectionStringResponse"/></returns>
        Promise<BeamoV2ConnectionStringResponse> GetStorageConnection([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/beamo/storage/{storageObjectName}/performance` endpoint.
        /// </summary>
        /// <param name="EndTime"></param>
        /// <param name="Granularity"></param>
        /// <param name="Period"></param>
        /// <param name="StartTime"></param>
        /// <param name="storageObjectName"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2StoragePerformance"/></returns>
        Promise<BeamoV2StoragePerformance> GetStoragePerformance(string storageObjectName, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<System.DateTime> EndTime, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> Granularity, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> Period, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<System.DateTime> StartTime, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
    }
    public partial class BeamBeamoApi : IBeamBeamoApi
    {
        /// <summary>
        /// POST call to `/api/beamo/manifests` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="BeamoV2PostManifestRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2ManifestChecksum"/></returns>
        public virtual Promise<BeamoV2ManifestChecksum> PostManifests(BeamoV2PostManifestRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/manifests";
            // make the request and return the result
            return _requester.Request<BeamoV2ManifestChecksum>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<BeamoV2ManifestChecksum>);
        }
        /// <summary>
        /// GET call to `/api/beamo/manifests` endpoint.
        /// </summary>
        /// <param name="archived"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2GetManifestsResponse"/></returns>
        public virtual Promise<BeamoV2GetManifestsResponse> GetManifests([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> archived, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> offset, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/manifests";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((offset != default(OptionalInt)) 
                        && offset.HasValue))
            {
                gsQueries.Add(string.Concat("offset=", offset.Value.ToString()));
            }
            if (((limit != default(OptionalInt)) 
                        && limit.HasValue))
            {
                gsQueries.Add(string.Concat("limit=", limit.Value.ToString()));
            }
            if (((archived != default(OptionalBool)) 
                        && archived.HasValue))
            {
                gsQueries.Add(string.Concat("archived=", archived.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<BeamoV2GetManifestsResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<BeamoV2GetManifestsResponse>);
        }
        /// <summary>
        /// GET call to `/api/beamo/manifests/{manifestId}` endpoint.
        /// </summary>
        /// <param name="archived"></param>
        /// <param name="manifestId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2Manifest"/></returns>
        public virtual Promise<BeamoV2Manifest> GetManifests(System.Guid manifestId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> archived, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/manifests/{manifestId}";
            gsUrl = gsUrl.Replace("{manifestId}", _requester.EscapeURL(manifestId.ToString()));
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((archived != default(OptionalBool)) 
                        && archived.HasValue))
            {
                gsQueries.Add(string.Concat("archived=", archived.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<BeamoV2Manifest>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<BeamoV2Manifest>);
        }
        /// <summary>
        /// GET call to `/api/beamo/manifests/current` endpoint.
        /// </summary>
        /// <param name="archived"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2Manifest"/></returns>
        public virtual Promise<BeamoV2Manifest> GetManifestsCurrent([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> archived, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/manifests/current";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((archived != default(OptionalBool)) 
                        && archived.HasValue))
            {
                gsQueries.Add(string.Concat("archived=", archived.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<BeamoV2Manifest>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<BeamoV2Manifest>);
        }
        /// <summary>
        /// POST call to `/api/beamo/manifests/current` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2EmptyMessage"/></returns>
        public virtual Promise<BeamoV2EmptyMessage> PostManifestsCurrent([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/manifests/current";
            // make the request and return the result
            return _requester.Request<BeamoV2EmptyMessage>(Method.POST, gsUrl, default(object), includeAuthHeader, this.Serialize<BeamoV2EmptyMessage>);
        }
        /// <summary>
        /// POST call to `/api/beamo/manifests/promote` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="BeamoV2PromoteBeamoManifestRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2EmptyMessage"/></returns>
        public virtual Promise<BeamoV2EmptyMessage> PostManifestsPromote(BeamoV2PromoteBeamoManifestRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/manifests/promote";
            // make the request and return the result
            return _requester.Request<BeamoV2EmptyMessage>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<BeamoV2EmptyMessage>);
        }
        /// <summary>
        /// GET call to `/api/beamo/templates` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2GetTemplatesResponse"/></returns>
        public virtual Promise<BeamoV2GetTemplatesResponse> GetTemplates([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/templates";
            // make the request and return the result
            return _requester.Request<BeamoV2GetTemplatesResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<BeamoV2GetTemplatesResponse>);
        }
        /// <summary>
        /// GET call to `/api/beamo/status` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2GetStatusResponse"/></returns>
        public virtual Promise<BeamoV2GetStatusResponse> GetStatus([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/status";
            // make the request and return the result
            return _requester.Request<BeamoV2GetStatusResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<BeamoV2GetStatusResponse>);
        }
        /// <summary>
        /// GET call to `/api/beamo/registry-uri` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2UriResponse"/></returns>
        public virtual Promise<BeamoV2UriResponse> GetRegistryUri([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/registry-uri";
            // make the request and return the result
            return _requester.Request<BeamoV2UriResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<BeamoV2UriResponse>);
        }
        /// <summary>
        /// POST call to `/api/beamo/services/registrations` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="BeamoV2ServiceRegistrationQuery"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2ServiceRegistrationResponse"/></returns>
        public virtual Promise<BeamoV2ServiceRegistrationResponse> PostServicesRegistrations(BeamoV2ServiceRegistrationQuery gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/services/registrations";
            // make the request and return the result
            return _requester.Request<BeamoV2ServiceRegistrationResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<BeamoV2ServiceRegistrationResponse>);
        }
        /// <summary>
        /// POST call to `/api/beamo/services/federation` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="BeamoV2ServiceRegistrationQuery"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2FederationRegistrationResponse"/></returns>
        public virtual Promise<BeamoV2FederationRegistrationResponse> PostServicesFederation(BeamoV2ServiceRegistrationQuery gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/services/federation";
            // make the request and return the result
            return _requester.Request<BeamoV2FederationRegistrationResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<BeamoV2FederationRegistrationResponse>);
        }
        /// <summary>
        /// PUT call to `/api/beamo/services/{serviceName}/federation/traffic` endpoint.
        /// </summary>
        /// <param name="serviceName"></param>
        /// <param name="gsReq">The <see cref="BeamoV2ServiceRegistrationRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2EmptyMessage"/></returns>
        public virtual Promise<BeamoV2EmptyMessage> PutServicesFederationTraffic(string serviceName, BeamoV2ServiceRegistrationRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/services/{serviceName}/federation/traffic";
            gsUrl = gsUrl.Replace("{serviceName}", _requester.EscapeURL(serviceName.ToString()));
            // make the request and return the result
            return _requester.Request<BeamoV2EmptyMessage>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<BeamoV2EmptyMessage>);
        }
        /// <summary>
        /// DELETE call to `/api/beamo/services/{serviceName}/federation/traffic` endpoint.
        /// </summary>
        /// <param name="serviceName"></param>
        /// <param name="gsReq">The <see cref="BeamoV2DeleteRegistrationRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2EmptyMessage"/></returns>
        public virtual Promise<BeamoV2EmptyMessage> DeleteServicesFederationTraffic(string serviceName, BeamoV2DeleteRegistrationRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/services/{serviceName}/federation/traffic";
            gsUrl = gsUrl.Replace("{serviceName}", _requester.EscapeURL(serviceName.ToString()));
            // make the request and return the result
            return _requester.Request<BeamoV2EmptyMessage>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<BeamoV2EmptyMessage>);
        }
        /// <summary>
        /// POST call to `/api/beamo/services/{serviceName}/metrics-request` endpoint.
        /// </summary>
        /// <param name="serviceName"></param>
        /// <param name="gsReq">The <see cref="BeamoV2GetMetricsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2SignedRequest"/></returns>
        public virtual Promise<BeamoV2SignedRequest> PostServicesMetricsRequest(string serviceName, BeamoV2GetMetricsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/services/{serviceName}/metrics-request";
            gsUrl = gsUrl.Replace("{serviceName}", _requester.EscapeURL(serviceName.ToString()));
            // make the request and return the result
            return _requester.Request<BeamoV2SignedRequest>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<BeamoV2SignedRequest>);
        }
        /// <summary>
        /// POST call to `/api/beamo/services/{serviceName}/logs/query` endpoint.
        /// </summary>
        /// <param name="serviceName"></param>
        /// <param name="gsReq">The <see cref="BeamoV2StartServiceLogsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2QueryResponse"/></returns>
        public virtual Promise<BeamoV2QueryResponse> PostServicesLogsQuery(string serviceName, BeamoV2StartServiceLogsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/services/{serviceName}/logs/query";
            gsUrl = gsUrl.Replace("{serviceName}", _requester.EscapeURL(serviceName.ToString()));
            // make the request and return the result
            return _requester.Request<BeamoV2QueryResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<BeamoV2QueryResponse>);
        }
        /// <summary>
        /// DELETE call to `/api/beamo/services/logs/query/{queryId}` endpoint.
        /// </summary>
        /// <param name="queryId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2ApiBeamoServicesLogsQueryDeleteBeamoResponse"/></returns>
        public virtual Promise<BeamoV2ApiBeamoServicesLogsQueryDeleteBeamoResponse> DeleteServicesLogsQuery(string queryId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/services/logs/query/{queryId}";
            gsUrl = gsUrl.Replace("{queryId}", _requester.EscapeURL(queryId.ToString()));
            // make the request and return the result
            return _requester.Request<BeamoV2ApiBeamoServicesLogsQueryDeleteBeamoResponse>(Method.DELETE, gsUrl, default(object), includeAuthHeader, this.Serialize<BeamoV2ApiBeamoServicesLogsQueryDeleteBeamoResponse>);
        }
        /// <summary>
        /// GET call to `/api/beamo/services/logs/query/{queryId}` endpoint.
        /// </summary>
        /// <param name="queryId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2SignedRequest"/></returns>
        public virtual Promise<BeamoV2SignedRequest> GetServicesLogsQuery(string queryId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/services/logs/query/{queryId}";
            gsUrl = gsUrl.Replace("{queryId}", _requester.EscapeURL(queryId.ToString()));
            // make the request and return the result
            return _requester.Request<BeamoV2SignedRequest>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<BeamoV2SignedRequest>);
        }
        /// <summary>
        /// GET call to `/api/beamo/services/secret` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2GetServiceSecretResponse"/></returns>
        public virtual Promise<BeamoV2GetServiceSecretResponse> GetServicesSecret([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/services/secret";
            // make the request and return the result
            return _requester.Request<BeamoV2GetServiceSecretResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<BeamoV2GetServiceSecretResponse>);
        }
        /// <summary>
        /// GET call to `/api/beamo/storage/connection` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2ConnectionStringResponse"/></returns>
        public virtual Promise<BeamoV2ConnectionStringResponse> GetStorageConnection([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/storage/connection";
            // make the request and return the result
            return _requester.Request<BeamoV2ConnectionStringResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<BeamoV2ConnectionStringResponse>);
        }
        /// <summary>
        /// GET call to `/api/beamo/storage/{storageObjectName}/performance` endpoint.
        /// </summary>
        /// <param name="EndTime"></param>
        /// <param name="Granularity"></param>
        /// <param name="Period"></param>
        /// <param name="StartTime"></param>
        /// <param name="storageObjectName"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="BeamoV2StoragePerformance"/></returns>
        public virtual Promise<BeamoV2StoragePerformance> GetStoragePerformance(string storageObjectName, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<System.DateTime> EndTime, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> Granularity, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> Period, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<System.DateTime> StartTime, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/storage/{storageObjectName}/performance";
            gsUrl = gsUrl.Replace("{storageObjectName}", _requester.EscapeURL(storageObjectName.ToString()));
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((Period != default(OptionalString)) 
                        && Period.HasValue))
            {
                gsQueries.Add(string.Concat("Period=", Period.Value.ToString()));
            }
            if (((StartTime != default(OptionalDateTime)) 
                        && StartTime.HasValue))
            {
                gsQueries.Add(string.Concat("StartTime=", StartTime.Value.ToString()));
            }
            if (((EndTime != default(OptionalDateTime)) 
                        && EndTime.HasValue))
            {
                gsQueries.Add(string.Concat("EndTime=", EndTime.Value.ToString()));
            }
            if (((Granularity != default(OptionalString)) 
                        && Granularity.HasValue))
            {
                gsQueries.Add(string.Concat("Granularity=", Granularity.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<BeamoV2StoragePerformance>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<BeamoV2StoragePerformance>);
        }
    }
}
