
namespace Beamable.Api.Autogenerated.Content
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IContentApi
    {
        /// <param name="gsReq">The <see cref="ArchiveOrUnarchiveManifestsRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> PostManifestsUnarchive(ArchiveOrUnarchiveManifestsRequest gsReq);
        /// <param name="gsReq">The <see cref="PullManifestRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        Promise<ContentBasicManifest> PostManifestPull(PullManifestRequest gsReq);
        /// <param name="id"></param>
        /// <param name="limit"></param>
        /// <returns>A promise containing the <see cref="GetManifestHistoryResponse"/></returns>
        Promise<GetManifestHistoryResponse> GetManifestHistory([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit);
        /// <param name="gsReq">The <see cref="SaveBinaryRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="SaveBinaryResponse"/></returns>
        Promise<SaveBinaryResponse> PostBinary(SaveBinaryRequest gsReq);
        /// <param name="gsReq">The <see cref="PullAllManifestsRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifestChecksums"/></returns>
        Promise<ContentBasicManifestChecksums> PostManifestsPull(PullAllManifestsRequest gsReq);
        /// <param name="contentId"></param>
        /// <param name="version"></param>
        /// <returns>A promise containing the <see cref="ContentOrText"/></returns>
        Promise<ContentOrText> GetContent(string contentId, string version);
        /// <returns>A promise containing the <see cref="GetLocalizationsResponse"/></returns>
        Promise<GetLocalizationsResponse> GetLocalizations();
        /// <param name="gsReq">The <see cref="PutLocalizationsRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> PutLocalizations(PutLocalizationsRequest gsReq);
        /// <param name="gsReq">The <see cref="DeleteLocalizationRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> DeleteLocalizations(DeleteLocalizationRequest gsReq);
        /// <param name="gsReq">The <see cref="SaveTextRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="SaveTextResponse"/></returns>
        Promise<SaveTextResponse> PostText(SaveTextRequest gsReq);
        /// <param name="uid"></param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        Promise<ContentBasicManifest> GetManifestExact(string uid);
        /// <param name="id">ID of the content manifest</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        Promise<ContentBasicManifest> GetManifest([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id);
        /// <param name="gsReq">The <see cref="SaveManifestRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        Promise<ContentBasicManifest> PostManifest(SaveManifestRequest gsReq);
        /// <param name="gsReq">The <see cref="ArchiveOrUnarchiveManifestsRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> PostManifestsArchive(ArchiveOrUnarchiveManifestsRequest gsReq);
        /// <param name="gsReq">The <see cref="SaveContentRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="SaveContentResponse"/></returns>
        Promise<SaveContentResponse> Post(SaveContentRequest gsReq);
        /// <param name="id">ID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ClientManifestCsvResponse"/></returns>
        Promise<ClientManifestCsvResponse> GetManifestPublic([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="gsReq">The <see cref="RepeatManifestRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> PutManifestRepeat(RepeatManifestRequest gsReq);
        /// <param name="id">ID of the content manifest</param>
        /// <returns>A promise containing the <see cref="ClientManifestCsvResponse"/></returns>
        Promise<ClientManifestCsvResponse> GetManifestPrivate([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id);
        /// <returns>A promise containing the <see cref="ContentBasicManifestChecksums"/></returns>
        Promise<ContentBasicManifestChecksums> GetManifestChecksums();
        /// <param name="id">ID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifestChecksum"/></returns>
        Promise<ContentBasicManifestChecksum> GetManifestChecksum([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <returns>A promise containing the <see cref="ContentBasicGetManifestsResponse"/></returns>
        Promise<ContentBasicGetManifestsResponse> GetManifests();
    }
    public partial class ContentApi : IContentApi
    {
        /// <param name="gsReq">The <see cref="ArchiveOrUnarchiveManifestsRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> PostManifestsUnarchive(ArchiveOrUnarchiveManifestsRequest gsReq)
        {
            string gsUrl = "/basic/content/manifests/unarchive";
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
        }
        /// <param name="gsReq">The <see cref="PullManifestRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        public virtual Promise<ContentBasicManifest> PostManifestPull(PullManifestRequest gsReq)
        {
            string gsUrl = "/basic/content/manifest/pull";
            // make the request and return the result
            return _requester.Request<ContentBasicManifest>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<ContentBasicManifest>);
        }
        /// <param name="id"></param>
        /// <param name="limit"></param>
        /// <returns>A promise containing the <see cref="GetManifestHistoryResponse"/></returns>
        public virtual Promise<GetManifestHistoryResponse> GetManifestHistory([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit)
        {
            string gsUrl = "/basic/content/manifest/history";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((id != default(OptionalString)) 
                        && id.HasValue))
            {
                gsQueries.Add(string.Concat("id=", id.Value.ToString()));
            }
            if (((limit != default(OptionalInt)) 
                        && limit.HasValue))
            {
                gsQueries.Add(string.Concat("limit=", limit.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<GetManifestHistoryResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<GetManifestHistoryResponse>);
        }
        /// <param name="gsReq">The <see cref="SaveBinaryRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="SaveBinaryResponse"/></returns>
        public virtual Promise<SaveBinaryResponse> PostBinary(SaveBinaryRequest gsReq)
        {
            string gsUrl = "/basic/content/binary";
            // make the request and return the result
            return _requester.Request<SaveBinaryResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<SaveBinaryResponse>);
        }
        /// <param name="gsReq">The <see cref="PullAllManifestsRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifestChecksums"/></returns>
        public virtual Promise<ContentBasicManifestChecksums> PostManifestsPull(PullAllManifestsRequest gsReq)
        {
            string gsUrl = "/basic/content/manifests/pull";
            // make the request and return the result
            return _requester.Request<ContentBasicManifestChecksums>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<ContentBasicManifestChecksums>);
        }
        /// <param name="contentId"></param>
        /// <param name="version"></param>
        /// <returns>A promise containing the <see cref="ContentOrText"/></returns>
        public virtual Promise<ContentOrText> GetContent(string contentId, string version)
        {
            string gsUrl = "/basic/content/content";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            gsQueries.Add(string.Concat("contentId=", _requester.EscapeURL(contentId.ToString())));
            gsQueries.Add(string.Concat("version=", _requester.EscapeURL(version.ToString())));
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ContentOrText>(Method.GET, gsUrl, default(object), true, this.Serialize<ContentOrText>);
        }
        /// <returns>A promise containing the <see cref="GetLocalizationsResponse"/></returns>
        public virtual Promise<GetLocalizationsResponse> GetLocalizations()
        {
            string gsUrl = "/basic/content/localizations";
            // make the request and return the result
            return _requester.Request<GetLocalizationsResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<GetLocalizationsResponse>);
        }
        /// <param name="gsReq">The <see cref="PutLocalizationsRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> PutLocalizations(PutLocalizationsRequest gsReq)
        {
            string gsUrl = "/basic/content/localizations";
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<CommonResponse>);
        }
        /// <param name="gsReq">The <see cref="DeleteLocalizationRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> DeleteLocalizations(DeleteLocalizationRequest gsReq)
        {
            string gsUrl = "/basic/content/localizations";
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<CommonResponse>);
        }
        /// <param name="gsReq">The <see cref="SaveTextRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="SaveTextResponse"/></returns>
        public virtual Promise<SaveTextResponse> PostText(SaveTextRequest gsReq)
        {
            string gsUrl = "/basic/content/text";
            // make the request and return the result
            return _requester.Request<SaveTextResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<SaveTextResponse>);
        }
        /// <param name="uid"></param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        public virtual Promise<ContentBasicManifest> GetManifestExact(string uid)
        {
            string gsUrl = "/basic/content/manifest/exact";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            gsQueries.Add(string.Concat("uid=", _requester.EscapeURL(uid.ToString())));
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ContentBasicManifest>(Method.GET, gsUrl, default(object), true, this.Serialize<ContentBasicManifest>);
        }
        /// <param name="id">ID of the content manifest</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        public virtual Promise<ContentBasicManifest> GetManifest([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id)
        {
            string gsUrl = "/basic/content/manifest";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((id != default(OptionalString)) 
                        && id.HasValue))
            {
                gsQueries.Add(string.Concat("id=", id.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ContentBasicManifest>(Method.GET, gsUrl, default(object), true, this.Serialize<ContentBasicManifest>);
        }
        /// <param name="gsReq">The <see cref="SaveManifestRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        public virtual Promise<ContentBasicManifest> PostManifest(SaveManifestRequest gsReq)
        {
            string gsUrl = "/basic/content/manifest";
            // make the request and return the result
            return _requester.Request<ContentBasicManifest>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<ContentBasicManifest>);
        }
        /// <param name="gsReq">The <see cref="ArchiveOrUnarchiveManifestsRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> PostManifestsArchive(ArchiveOrUnarchiveManifestsRequest gsReq)
        {
            string gsUrl = "/basic/content/manifests/archive";
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
        }
        /// <param name="gsReq">The <see cref="SaveContentRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="SaveContentResponse"/></returns>
        public virtual Promise<SaveContentResponse> Post(SaveContentRequest gsReq)
        {
            string gsUrl = "/basic/content/";
            // make the request and return the result
            return _requester.Request<SaveContentResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<SaveContentResponse>);
        }
        /// <param name="id">ID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ClientManifestCsvResponse"/></returns>
        public virtual Promise<ClientManifestCsvResponse> GetManifestPublic([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/public";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((id != default(OptionalString)) 
                        && id.HasValue))
            {
                gsQueries.Add(string.Concat("id=", id.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ClientManifestCsvResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ClientManifestCsvResponse>);
        }
        /// <param name="gsReq">The <see cref="RepeatManifestRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> PutManifestRepeat(RepeatManifestRequest gsReq)
        {
            string gsUrl = "/basic/content/manifest/repeat";
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<CommonResponse>);
        }
        /// <param name="id">ID of the content manifest</param>
        /// <returns>A promise containing the <see cref="ClientManifestCsvResponse"/></returns>
        public virtual Promise<ClientManifestCsvResponse> GetManifestPrivate([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id)
        {
            string gsUrl = "/basic/content/manifest/private";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((id != default(OptionalString)) 
                        && id.HasValue))
            {
                gsQueries.Add(string.Concat("id=", id.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ClientManifestCsvResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<ClientManifestCsvResponse>);
        }
        /// <returns>A promise containing the <see cref="ContentBasicManifestChecksums"/></returns>
        public virtual Promise<ContentBasicManifestChecksums> GetManifestChecksums()
        {
            string gsUrl = "/basic/content/manifest/checksums";
            // make the request and return the result
            return _requester.Request<ContentBasicManifestChecksums>(Method.GET, gsUrl, default(object), true, this.Serialize<ContentBasicManifestChecksums>);
        }
        /// <param name="id">ID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifestChecksum"/></returns>
        public virtual Promise<ContentBasicManifestChecksum> GetManifestChecksum([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/checksum";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((id != default(OptionalString)) 
                        && id.HasValue))
            {
                gsQueries.Add(string.Concat("id=", id.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ContentBasicManifestChecksum>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ContentBasicManifestChecksum>);
        }
        /// <returns>A promise containing the <see cref="ContentBasicGetManifestsResponse"/></returns>
        public virtual Promise<ContentBasicGetManifestsResponse> GetManifests()
        {
            string gsUrl = "/basic/content/manifests";
            // make the request and return the result
            return _requester.Request<ContentBasicGetManifestsResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<ContentBasicGetManifestsResponse>);
        }
    }
}
