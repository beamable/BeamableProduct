// this file was copied from nuget package Beamable.Common@6.1.0-PREVIEW.RC1
// https://www.nuget.org/packages/Beamable.Common/6.1.0-PREVIEW.RC1


namespace Beamable.Api.Autogenerated.Customer
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IBeamCustomerApi
    {
        /// <summary>
        /// POST call to `/api/customers` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="CustomerActorNewCustomerRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorNewCustomerResponse"/></returns>
        Promise<CustomerActorNewCustomerResponse> PostApiCustomers(CustomerActorNewCustomerRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/customers` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorCustomersResponse"/></returns>
        Promise<CustomerActorCustomersResponse> GetApiCustomers([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/api/customers/verify` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="CustomerActorNewCustomerRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorNewCustomerResponse"/></returns>
        Promise<CustomerActorNewCustomerResponse> PostVerify(CustomerActorNewCustomerRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/api/customers/activate` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ApiCustomersActivatePutCustomerResponse"/></returns>
        Promise<ApiCustomersActivatePutCustomerResponse> PutActivate([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/customers/{customerId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorCustomerView"/></returns>
        Promise<CustomerActorCustomerView> Get(string customerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/api/customers/{customerId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="gsReq">The <see cref="UpdateCustomerRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        Promise<EmptyMessage> Put(string customerId, UpdateCustomerRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/customers/{customerId}/admin-view` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorCustomer"/></returns>
        Promise<CustomerActorCustomer> GetAdminView(string customerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/customers/{customerId}/config` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorRealmConfigResponse"/></returns>
        Promise<CustomerActorRealmConfigResponse> GetConfig(string customerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/customers/{customerId}/games` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GetGamesResponse"/></returns>
        Promise<GetGamesResponse> GetGames(string customerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/api/customers/{customerId}/games` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="gsReq">The <see cref="NewGameRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="RealmView"/></returns>
        Promise<RealmView> PostGames(string customerId, NewGameRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/customers/{customerId}/games/{gameId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="gameId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GetGamesResponse"/></returns>
        Promise<GetGamesResponse> GetGames(string customerId, string gameId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/api/customers/{customerId}/games/{gameId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="gameId"></param>
        /// <param name="gsReq">The <see cref="CustomerActorUpdateGameHierarchyRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        Promise<EmptyMessage> PutGames(string customerId, string gameId, CustomerActorUpdateGameHierarchyRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/api/customers/{customerId}/realms` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="gsReq">The <see cref="CreateRealmRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        Promise<EmptyMessage> PostRealms(string customerId, CreateRealmRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/customers/{customerId}/realms/{realmId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="RealmView"/></returns>
        Promise<RealmView> GetRealms(string customerId, string realmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// DELETE call to `/api/customers/{customerId}/realms/{realmId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        Promise<EmptyMessage> DeleteRealms(string customerId, string realmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/api/customers/{customerId}/realms/{realmId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        Promise<EmptyMessage> PutRealms(string customerId, string realmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/api/customers/{customerId}/realms/{realmId}/rename` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="gsReq">The <see cref="RenameRealmRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        Promise<EmptyMessage> PutRealmsRename(string customerId, string realmId, RenameRealmRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/customers/{customerId}/realms/{realmId}/config` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorRealmConfigResponse"/></returns>
        Promise<CustomerActorRealmConfigResponse> GetRealmsConfig(string customerId, string realmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/api/customers/{customerId}/realms/{realmId}/config` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="gsReq">The <see cref="CustomerActorRealmConfigSaveRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        Promise<EmptyMessage> PutRealmsConfig(string customerId, string realmId, CustomerActorRealmConfigSaveRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/customers/{customerId}/realms/{realmId}/config` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="gsReq">The <see cref="RealmConfigChangeRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        Promise<EmptyMessage> PatchRealmsConfig(string customerId, string realmId, RealmConfigChangeRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/customers/{customerId}/realms/{realmId}/client-defaults` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorRealmConfiguration"/></returns>
        Promise<CustomerActorRealmConfiguration> GetRealmsClientDefaults(string customerId, string realmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/api/customers/{customerId}/realms/{destinationRealmId}/promotion` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="destinationRealmId"></param>
        /// <param name="gsReq">The <see cref="CustomerActorPromoteRealmRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorPromoteRealmResponse"/></returns>
        Promise<CustomerActorPromoteRealmResponse> PostRealmsPromotion(string customerId, string destinationRealmId, CustomerActorPromoteRealmRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/customers/{customerId}/realms/{destinationRealmId}/promotion` endpoint.
        /// </summary>
        /// <param name="contentIds"></param>
        /// <param name="customerId"></param>
        /// <param name="destinationRealmId"></param>
        /// <param name="promotables"></param>
        /// <param name="sourceRealmId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorPromoteRealmResponse"/></returns>
        Promise<CustomerActorPromoteRealmResponse> GetRealmsPromotion(string customerId, string destinationRealmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> contentIds, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> promotables, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> sourceRealmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/customers/aliases/{alias}` endpoint.
        /// </summary>
        /// <param name="alias"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorAliasAvailableResponse"/></returns>
        Promise<CustomerActorAliasAvailableResponse> GetAliases(string alias, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/api/customers/{customerId}/alias` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="gsReq">The <see cref="SetCustomerAliasRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        Promise<EmptyMessage> PutAlias(string customerId, SetCustomerAliasRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
    }
    public partial class BeamCustomerApi : IBeamCustomerApi
    {
        /// <summary>
        /// POST call to `/api/customers` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="CustomerActorNewCustomerRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorNewCustomerResponse"/></returns>
        public virtual Promise<CustomerActorNewCustomerResponse> PostApiCustomers(CustomerActorNewCustomerRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers";
            // make the request and return the result
            return _requester.Request<CustomerActorNewCustomerResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<CustomerActorNewCustomerResponse>);
        }
        /// <summary>
        /// GET call to `/api/customers` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorCustomersResponse"/></returns>
        public virtual Promise<CustomerActorCustomersResponse> GetApiCustomers([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers";
            // make the request and return the result
            return _requester.Request<CustomerActorCustomersResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<CustomerActorCustomersResponse>);
        }
        /// <summary>
        /// POST call to `/api/customers/verify` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="CustomerActorNewCustomerRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorNewCustomerResponse"/></returns>
        public virtual Promise<CustomerActorNewCustomerResponse> PostVerify(CustomerActorNewCustomerRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/verify";
            // make the request and return the result
            return _requester.Request<CustomerActorNewCustomerResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<CustomerActorNewCustomerResponse>);
        }
        /// <summary>
        /// PUT call to `/api/customers/activate` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ApiCustomersActivatePutCustomerResponse"/></returns>
        public virtual Promise<ApiCustomersActivatePutCustomerResponse> PutActivate([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/activate";
            // make the request and return the result
            return _requester.Request<ApiCustomersActivatePutCustomerResponse>(Method.PUT, gsUrl, default(object), includeAuthHeader, this.Serialize<ApiCustomersActivatePutCustomerResponse>);
        }
        /// <summary>
        /// GET call to `/api/customers/{customerId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorCustomerView"/></returns>
        public virtual Promise<CustomerActorCustomerView> Get(string customerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            // make the request and return the result
            return _requester.Request<CustomerActorCustomerView>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<CustomerActorCustomerView>);
        }
        /// <summary>
        /// PUT call to `/api/customers/{customerId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="gsReq">The <see cref="UpdateCustomerRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        public virtual Promise<EmptyMessage> Put(string customerId, UpdateCustomerRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyMessage>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyMessage>);
        }
        /// <summary>
        /// GET call to `/api/customers/{customerId}/admin-view` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorCustomer"/></returns>
        public virtual Promise<CustomerActorCustomer> GetAdminView(string customerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/admin-view";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            // make the request and return the result
            return _requester.Request<CustomerActorCustomer>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<CustomerActorCustomer>);
        }
        /// <summary>
        /// GET call to `/api/customers/{customerId}/config` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorRealmConfigResponse"/></returns>
        public virtual Promise<CustomerActorRealmConfigResponse> GetConfig(string customerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/config";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            // make the request and return the result
            return _requester.Request<CustomerActorRealmConfigResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<CustomerActorRealmConfigResponse>);
        }
        /// <summary>
        /// GET call to `/api/customers/{customerId}/games` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GetGamesResponse"/></returns>
        public virtual Promise<GetGamesResponse> GetGames(string customerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/games";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            // make the request and return the result
            return _requester.Request<GetGamesResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<GetGamesResponse>);
        }
        /// <summary>
        /// POST call to `/api/customers/{customerId}/games` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="gsReq">The <see cref="NewGameRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="RealmView"/></returns>
        public virtual Promise<RealmView> PostGames(string customerId, NewGameRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/games";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            // make the request and return the result
            return _requester.Request<RealmView>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<RealmView>);
        }
        /// <summary>
        /// GET call to `/api/customers/{customerId}/games/{gameId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="gameId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GetGamesResponse"/></returns>
        public virtual Promise<GetGamesResponse> GetGames(string customerId, string gameId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/games/{gameId}";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            gsUrl = gsUrl.Replace("{gameId}", _requester.EscapeURL(gameId.ToString()));
            // make the request and return the result
            return _requester.Request<GetGamesResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<GetGamesResponse>);
        }
        /// <summary>
        /// PUT call to `/api/customers/{customerId}/games/{gameId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="gameId"></param>
        /// <param name="gsReq">The <see cref="CustomerActorUpdateGameHierarchyRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        public virtual Promise<EmptyMessage> PutGames(string customerId, string gameId, CustomerActorUpdateGameHierarchyRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/games/{gameId}";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            gsUrl = gsUrl.Replace("{gameId}", _requester.EscapeURL(gameId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyMessage>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyMessage>);
        }
        /// <summary>
        /// POST call to `/api/customers/{customerId}/realms` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="gsReq">The <see cref="CreateRealmRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        public virtual Promise<EmptyMessage> PostRealms(string customerId, CreateRealmRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/realms";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyMessage>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyMessage>);
        }
        /// <summary>
        /// GET call to `/api/customers/{customerId}/realms/{realmId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="RealmView"/></returns>
        public virtual Promise<RealmView> GetRealms(string customerId, string realmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/realms/{realmId}";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            gsUrl = gsUrl.Replace("{realmId}", _requester.EscapeURL(realmId.ToString()));
            // make the request and return the result
            return _requester.Request<RealmView>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<RealmView>);
        }
        /// <summary>
        /// DELETE call to `/api/customers/{customerId}/realms/{realmId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        public virtual Promise<EmptyMessage> DeleteRealms(string customerId, string realmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/realms/{realmId}";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            gsUrl = gsUrl.Replace("{realmId}", _requester.EscapeURL(realmId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyMessage>(Method.DELETE, gsUrl, default(object), includeAuthHeader, this.Serialize<EmptyMessage>);
        }
        /// <summary>
        /// PUT call to `/api/customers/{customerId}/realms/{realmId}` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        public virtual Promise<EmptyMessage> PutRealms(string customerId, string realmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/realms/{realmId}";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            gsUrl = gsUrl.Replace("{realmId}", _requester.EscapeURL(realmId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyMessage>(Method.PUT, gsUrl, default(object), includeAuthHeader, this.Serialize<EmptyMessage>);
        }
        /// <summary>
        /// PUT call to `/api/customers/{customerId}/realms/{realmId}/rename` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="gsReq">The <see cref="RenameRealmRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        public virtual Promise<EmptyMessage> PutRealmsRename(string customerId, string realmId, RenameRealmRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/realms/{realmId}/rename";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            gsUrl = gsUrl.Replace("{realmId}", _requester.EscapeURL(realmId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyMessage>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyMessage>);
        }
        /// <summary>
        /// GET call to `/api/customers/{customerId}/realms/{realmId}/config` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorRealmConfigResponse"/></returns>
        public virtual Promise<CustomerActorRealmConfigResponse> GetRealmsConfig(string customerId, string realmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/realms/{realmId}/config";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            gsUrl = gsUrl.Replace("{realmId}", _requester.EscapeURL(realmId.ToString()));
            // make the request and return the result
            return _requester.Request<CustomerActorRealmConfigResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<CustomerActorRealmConfigResponse>);
        }
        /// <summary>
        /// PUT call to `/api/customers/{customerId}/realms/{realmId}/config` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="gsReq">The <see cref="CustomerActorRealmConfigSaveRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        public virtual Promise<EmptyMessage> PutRealmsConfig(string customerId, string realmId, CustomerActorRealmConfigSaveRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/realms/{realmId}/config";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            gsUrl = gsUrl.Replace("{realmId}", _requester.EscapeURL(realmId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyMessage>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyMessage>);
        }
        /// <summary>
        /// GET call to `/api/customers/{customerId}/realms/{realmId}/config` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="gsReq">The <see cref="RealmConfigChangeRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        public virtual Promise<EmptyMessage> PatchRealmsConfig(string customerId, string realmId, RealmConfigChangeRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/realms/{realmId}/config";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            gsUrl = gsUrl.Replace("{realmId}", _requester.EscapeURL(realmId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyMessage>(Method.GET, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyMessage>);
        }
        /// <summary>
        /// GET call to `/api/customers/{customerId}/realms/{realmId}/client-defaults` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="realmId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorRealmConfiguration"/></returns>
        public virtual Promise<CustomerActorRealmConfiguration> GetRealmsClientDefaults(string customerId, string realmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/realms/{realmId}/client-defaults";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            gsUrl = gsUrl.Replace("{realmId}", _requester.EscapeURL(realmId.ToString()));
            // make the request and return the result
            return _requester.Request<CustomerActorRealmConfiguration>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<CustomerActorRealmConfiguration>);
        }
        /// <summary>
        /// POST call to `/api/customers/{customerId}/realms/{destinationRealmId}/promotion` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="destinationRealmId"></param>
        /// <param name="gsReq">The <see cref="CustomerActorPromoteRealmRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorPromoteRealmResponse"/></returns>
        public virtual Promise<CustomerActorPromoteRealmResponse> PostRealmsPromotion(string customerId, string destinationRealmId, CustomerActorPromoteRealmRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/realms/{destinationRealmId}/promotion";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            gsUrl = gsUrl.Replace("{destinationRealmId}", _requester.EscapeURL(destinationRealmId.ToString()));
            // make the request and return the result
            return _requester.Request<CustomerActorPromoteRealmResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<CustomerActorPromoteRealmResponse>);
        }
        /// <summary>
        /// GET call to `/api/customers/{customerId}/realms/{destinationRealmId}/promotion` endpoint.
        /// </summary>
        /// <param name="contentIds"></param>
        /// <param name="customerId"></param>
        /// <param name="destinationRealmId"></param>
        /// <param name="promotables"></param>
        /// <param name="sourceRealmId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorPromoteRealmResponse"/></returns>
        public virtual Promise<CustomerActorPromoteRealmResponse> GetRealmsPromotion(string customerId, string destinationRealmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> contentIds, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> promotables, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> sourceRealmId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/realms/{destinationRealmId}/promotion";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            gsUrl = gsUrl.Replace("{destinationRealmId}", _requester.EscapeURL(destinationRealmId.ToString()));
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((sourceRealmId != default(OptionalString)) 
                        && sourceRealmId.HasValue))
            {
                gsQueries.Add(string.Concat("sourceRealmId=", sourceRealmId.Value.ToString()));
            }
            if (((promotables != default(OptionalString)) 
                        && promotables.HasValue))
            {
                gsQueries.Add(string.Concat("promotables=", promotables.Value.ToString()));
            }
            if (((contentIds != default(OptionalString)) 
                        && contentIds.HasValue))
            {
                gsQueries.Add(string.Concat("contentIds=", contentIds.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<CustomerActorPromoteRealmResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<CustomerActorPromoteRealmResponse>);
        }
        /// <summary>
        /// GET call to `/api/customers/aliases/{alias}` endpoint.
        /// </summary>
        /// <param name="alias"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CustomerActorAliasAvailableResponse"/></returns>
        public virtual Promise<CustomerActorAliasAvailableResponse> GetAliases(string alias, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/aliases/{alias}";
            gsUrl = gsUrl.Replace("{alias}", _requester.EscapeURL(alias.ToString()));
            // make the request and return the result
            return _requester.Request<CustomerActorAliasAvailableResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<CustomerActorAliasAvailableResponse>);
        }
        /// <summary>
        /// PUT call to `/api/customers/{customerId}/alias` endpoint.
        /// </summary>
        /// <param name="customerId"></param>
        /// <param name="gsReq">The <see cref="SetCustomerAliasRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        public virtual Promise<EmptyMessage> PutAlias(string customerId, SetCustomerAliasRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/customers/{customerId}/alias";
            gsUrl = gsUrl.Replace("{customerId}", _requester.EscapeURL(customerId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyMessage>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyMessage>);
        }
    }
}
