// this file was copied from nuget package Beamable.Common@5.1.0-PREVIEW.RC1
// https://www.nuget.org/packages/Beamable.Common/5.1.0-PREVIEW.RC1


namespace Beamable.Api.Autogenerated.Accounts
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IAccountsApi
    {
        /// <summary>
        /// PUT call to `/object/accounts/{objectId}/admin/email` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="EmailUpdateRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Account"/></returns>
        Promise<Account> ObjectPutAdminEmail(long objectId, EmailUpdateRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/object/accounts/{objectId}/available-roles` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AvailableRolesResponse"/></returns>
        Promise<AvailableRolesResponse> ObjectGetAvailableRoles(long objectId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/object/accounts/{objectId}/role/report` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AccountRolesReport"/></returns>
        Promise<AccountRolesReport> ObjectGetRoleReport(long objectId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/object/accounts/{objectId}/role` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="UpdateRole"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectPutRole(long objectId, UpdateRole gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// DELETE call to `/object/accounts/{objectId}/role` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DeleteRole"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectDeleteRole(long objectId, DeleteRole gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/object/accounts/{objectId}/admin/scope` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="UpdateRole"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectPutAdminScope(long objectId, UpdateRole gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// DELETE call to `/object/accounts/{objectId}/admin/scope` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DeleteRole"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectDeleteAdminScope(long objectId, DeleteRole gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/object/accounts/{objectId}/admin/third-party` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="TransferThirdPartyAssociation"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectPutAdminThirdParty(long objectId, TransferThirdPartyAssociation gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// DELETE call to `/object/accounts/{objectId}/admin/third-party` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DeleteThirdPartyAssociation"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectDeleteAdminThirdParty(long objectId, DeleteThirdPartyAssociation gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/object/accounts/{objectId}/` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="AccountUpdate"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Account"/></returns>
        Promise<Account> ObjectPut(long objectId, AccountUpdate gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// DELETE call to `/object/accounts/{objectId}/admin/forget` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Account"/></returns>
        Promise<Account> ObjectDeleteAdminForget(long objectId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
    }
    public partial class AccountsApi : IAccountsApi
    {
        /// <summary>
        /// PUT call to `/object/accounts/{objectId}/admin/email` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="EmailUpdateRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Account"/></returns>
        public virtual Promise<Account> ObjectPutAdminEmail(long objectId, EmailUpdateRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/accounts/{objectId}/admin/email";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<Account>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<Account>);
        }
        /// <summary>
        /// GET call to `/object/accounts/{objectId}/available-roles` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AvailableRolesResponse"/></returns>
        public virtual Promise<AvailableRolesResponse> ObjectGetAvailableRoles(long objectId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/accounts/{objectId}/available-roles";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<AvailableRolesResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<AvailableRolesResponse>);
        }
        /// <summary>
        /// GET call to `/object/accounts/{objectId}/role/report` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AccountRolesReport"/></returns>
        public virtual Promise<AccountRolesReport> ObjectGetRoleReport(long objectId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/accounts/{objectId}/role/report";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<AccountRolesReport>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<AccountRolesReport>);
        }
        /// <summary>
        /// PUT call to `/object/accounts/{objectId}/role` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="UpdateRole"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectPutRole(long objectId, UpdateRole gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/accounts/{objectId}/role";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyResponse>);
        }
        /// <summary>
        /// DELETE call to `/object/accounts/{objectId}/role` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DeleteRole"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectDeleteRole(long objectId, DeleteRole gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/accounts/{objectId}/role";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyResponse>);
        }
        /// <summary>
        /// PUT call to `/object/accounts/{objectId}/admin/scope` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="UpdateRole"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectPutAdminScope(long objectId, UpdateRole gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/accounts/{objectId}/admin/scope";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyResponse>);
        }
        /// <summary>
        /// DELETE call to `/object/accounts/{objectId}/admin/scope` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DeleteRole"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectDeleteAdminScope(long objectId, DeleteRole gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/accounts/{objectId}/admin/scope";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyResponse>);
        }
        /// <summary>
        /// PUT call to `/object/accounts/{objectId}/admin/third-party` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="TransferThirdPartyAssociation"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectPutAdminThirdParty(long objectId, TransferThirdPartyAssociation gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/accounts/{objectId}/admin/third-party";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyResponse>);
        }
        /// <summary>
        /// DELETE call to `/object/accounts/{objectId}/admin/third-party` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DeleteThirdPartyAssociation"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectDeleteAdminThirdParty(long objectId, DeleteThirdPartyAssociation gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/accounts/{objectId}/admin/third-party";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyResponse>);
        }
        /// <summary>
        /// PUT call to `/object/accounts/{objectId}/` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="AccountUpdate"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Account"/></returns>
        public virtual Promise<Account> ObjectPut(long objectId, AccountUpdate gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/accounts/{objectId}/";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<Account>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<Account>);
        }
        /// <summary>
        /// DELETE call to `/object/accounts/{objectId}/admin/forget` endpoint.
        /// </summary>
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Account"/></returns>
        public virtual Promise<Account> ObjectDeleteAdminForget(long objectId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/accounts/{objectId}/admin/forget";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<Account>(Method.DELETE, gsUrl, default(object), includeAuthHeader, this.Serialize<Account>);
        }
    }
}
