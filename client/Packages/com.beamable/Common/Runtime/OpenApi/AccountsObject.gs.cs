
namespace Beamable.Api.Autogenerated.Accounts
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IAccountsApi
    {
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="EmailUpdateRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="Account"/></returns>
        Promise<Account> ObjectPutAdminEmail(long objectId, EmailUpdateRequest gsReq);
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AvailableRolesResponse"/></returns>
        Promise<AvailableRolesResponse> ObjectGetAvailableRoles(long objectId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="AccountRolesReport"/></returns>
        Promise<AccountRolesReport> ObjectGetRoleReport(long objectId);
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="UpdateRole"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectPutRole(long objectId, UpdateRole gsReq);
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DeleteRole"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectDeleteRole(long objectId, DeleteRole gsReq);
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="UpdateRole"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectPutAdminScope(long objectId, UpdateRole gsReq);
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DeleteRole"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectDeleteAdminScope(long objectId, DeleteRole gsReq);
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="TransferThirdPartyAssociation"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectPutAdminThirdParty(long objectId, TransferThirdPartyAssociation gsReq);
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DeleteThirdPartyAssociation"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectDeleteAdminThirdParty(long objectId, DeleteThirdPartyAssociation gsReq);
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="AccountUpdate"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="Account"/></returns>
        Promise<Account> ObjectPut(long objectId, AccountUpdate gsReq);
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="Account"/></returns>
        Promise<Account> ObjectDeleteAdminForget(long objectId);
    }
    public partial class AccountsApi : IAccountsApi
    {
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="EmailUpdateRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="Account"/></returns>
        public virtual Promise<Account> ObjectPutAdminEmail(long objectId, EmailUpdateRequest gsReq)
        {
            string gsUrl = "/object/accounts/{objectId}/admin/email";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<Account>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<Account>);
        }
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AvailableRolesResponse"/></returns>
        public virtual Promise<AvailableRolesResponse> ObjectGetAvailableRoles(long objectId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/accounts/{objectId}/available-roles";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<AvailableRolesResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<AvailableRolesResponse>);
        }
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="AccountRolesReport"/></returns>
        public virtual Promise<AccountRolesReport> ObjectGetRoleReport(long objectId)
        {
            string gsUrl = "/object/accounts/{objectId}/role/report";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<AccountRolesReport>(Method.GET, gsUrl, default(object), true, this.Serialize<AccountRolesReport>);
        }
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="UpdateRole"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectPutRole(long objectId, UpdateRole gsReq)
        {
            string gsUrl = "/object/accounts/{objectId}/role";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
        }
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DeleteRole"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectDeleteRole(long objectId, DeleteRole gsReq)
        {
            string gsUrl = "/object/accounts/{objectId}/role";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
        }
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="UpdateRole"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectPutAdminScope(long objectId, UpdateRole gsReq)
        {
            string gsUrl = "/object/accounts/{objectId}/admin/scope";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
        }
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DeleteRole"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectDeleteAdminScope(long objectId, DeleteRole gsReq)
        {
            string gsUrl = "/object/accounts/{objectId}/admin/scope";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
        }
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="TransferThirdPartyAssociation"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectPutAdminThirdParty(long objectId, TransferThirdPartyAssociation gsReq)
        {
            string gsUrl = "/object/accounts/{objectId}/admin/third-party";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
        }
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DeleteThirdPartyAssociation"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectDeleteAdminThirdParty(long objectId, DeleteThirdPartyAssociation gsReq)
        {
            string gsUrl = "/object/accounts/{objectId}/admin/third-party";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
        }
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="AccountUpdate"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="Account"/></returns>
        public virtual Promise<Account> ObjectPut(long objectId, AccountUpdate gsReq)
        {
            string gsUrl = "/object/accounts/{objectId}/";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<Account>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<Account>);
        }
        /// <param name="objectId">AccountId of the player.Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="Account"/></returns>
        public virtual Promise<Account> ObjectDeleteAdminForget(long objectId)
        {
            string gsUrl = "/object/accounts/{objectId}/admin/forget";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<Account>(Method.DELETE, gsUrl, default(object), true, this.Serialize<Account>);
        }
    }
}
