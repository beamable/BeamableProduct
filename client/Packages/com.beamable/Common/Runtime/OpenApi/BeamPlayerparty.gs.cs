// this file was copied from nuget package Beamable.Common@5.3.0
// https://www.nuget.org/packages/Beamable.Common/5.3.0


namespace Beamable.Api.Autogenerated.Playerparty
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IBeamPlayerpartyApi
    {
        /// <summary>
        /// Fetch the requested player's party information
        /// 
        /// GET call to `/api/players/{playerId}/parties` endpoint.
        /// </summary>
        /// <param name="playerId">Player Id</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Party"/></returns>
        Promise<Party> GetParties(string playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// If the requested player is in a party, remove the player
        /// 
        /// DELETE call to `/api/players/{playerId}/parties` endpoint.
        /// </summary>
        /// <param name="playerId">Player Id</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ApiPlayersPartiesDeletePlayerPartyResponse"/></returns>
        Promise<ApiPlayersPartiesDeletePlayerPartyResponse> DeleteParties(string playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// Return list of party invites for player.
        /// 
        /// GET call to `/api/players/{playerId}/parties/invites` endpoint.
        /// </summary>
        /// <param name="playerId">PlayerId</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="PartyInvitesForPlayerResponse"/></returns>
        Promise<PartyInvitesForPlayerResponse> GetPartiesInvites(string playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// Return list of party invites for player.
        /// 
        /// GET call to `/api/players/{playerId}/party/invites` endpoint.
        /// </summary>
        /// <param name="playerId">PlayerId</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="PartyInvitesForPlayerResponse"/></returns>
        Promise<PartyInvitesForPlayerResponse> GetPartyInvites(string playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
    }
    public partial class BeamPlayerpartyApi : IBeamPlayerpartyApi
    {
        /// <summary>
        /// Fetch the requested player's party information
        /// 
        /// GET call to `/api/players/{playerId}/parties` endpoint.
        /// </summary>
        /// <param name="playerId">Player Id</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Party"/></returns>
        public virtual Promise<Party> GetParties(string playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/players/{playerId}/parties";
            gsUrl = gsUrl.Replace("{playerId}", _requester.EscapeURL(playerId.ToString()));
            // make the request and return the result
            return _requester.Request<Party>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<Party>);
        }
        /// <summary>
        /// If the requested player is in a party, remove the player
        /// 
        /// DELETE call to `/api/players/{playerId}/parties` endpoint.
        /// </summary>
        /// <param name="playerId">Player Id</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ApiPlayersPartiesDeletePlayerPartyResponse"/></returns>
        public virtual Promise<ApiPlayersPartiesDeletePlayerPartyResponse> DeleteParties(string playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/players/{playerId}/parties";
            gsUrl = gsUrl.Replace("{playerId}", _requester.EscapeURL(playerId.ToString()));
            // make the request and return the result
            return _requester.Request<ApiPlayersPartiesDeletePlayerPartyResponse>(Method.DELETE, gsUrl, default(object), includeAuthHeader, this.Serialize<ApiPlayersPartiesDeletePlayerPartyResponse>);
        }
        /// <summary>
        /// Return list of party invites for player.
        /// 
        /// GET call to `/api/players/{playerId}/parties/invites` endpoint.
        /// </summary>
        /// <param name="playerId">PlayerId</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="PartyInvitesForPlayerResponse"/></returns>
        public virtual Promise<PartyInvitesForPlayerResponse> GetPartiesInvites(string playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/players/{playerId}/parties/invites";
            gsUrl = gsUrl.Replace("{playerId}", _requester.EscapeURL(playerId.ToString()));
            // make the request and return the result
            return _requester.Request<PartyInvitesForPlayerResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<PartyInvitesForPlayerResponse>);
        }
        /// <summary>
        /// Return list of party invites for player.
        /// 
        /// GET call to `/api/players/{playerId}/party/invites` endpoint.
        /// </summary>
        /// <param name="playerId">PlayerId</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="PartyInvitesForPlayerResponse"/></returns>
        public virtual Promise<PartyInvitesForPlayerResponse> GetPartyInvites(string playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/players/{playerId}/party/invites";
            gsUrl = gsUrl.Replace("{playerId}", _requester.EscapeURL(playerId.ToString()));
            // make the request and return the result
            return _requester.Request<PartyInvitesForPlayerResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<PartyInvitesForPlayerResponse>);
        }
    }
}
