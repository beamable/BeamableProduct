// this file was copied from nuget package Beamable.Common@5.1.0-PREVIEW.RC1
// https://www.nuget.org/packages/Beamable.Common/5.1.0-PREVIEW.RC1


namespace Beamable.Api.Autogenerated.Auth
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IBeamAuthApi
    {
        /// <summary>
        /// Generate a new access token for a previously authenticated account. DEPRECATED: Use `tokens/refresh-token` instead.
        /// 
        /// POST call to `/api/auth/refresh-token` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="RefreshTokenAuthRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AuthResponse"/></returns>
        Promise<AuthResponse> PostRefreshToken(RefreshTokenAuthRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// Generate a new access token for a previously authenticated account.
        /// 
        /// POST call to `/api/auth/tokens/refresh-token` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="RefreshTokenAuthRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AuthResponse"/></returns>
        Promise<AuthResponse> PostTokensRefreshToken(RefreshTokenAuthRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// Generate a new access token for a brand-new player.
        /// 
        /// POST call to `/api/auth/tokens/guest` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="GuestAuthRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AuthResponse"/></returns>
        Promise<AuthResponse> PostTokensGuest(GuestAuthRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// Generate a new access token when given email and password credentials
        /// 
        /// POST call to `/api/auth/tokens/password` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="PasswordAuthRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AuthResponse"/></returns>
        Promise<AuthResponse> PostTokensPassword(PasswordAuthRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// Generate a new access token for a machine with a shared secret
        /// 
        /// POST call to `/api/auth/server` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ServerTokenAuthRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ServerTokenResponse"/></returns>
        Promise<ServerTokenResponse> PostServer(ServerTokenAuthRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
    }
    public partial class BeamAuthApi : IBeamAuthApi
    {
        /// <summary>
        /// Generate a new access token for a previously authenticated account. DEPRECATED: Use `tokens/refresh-token` instead.
        /// 
        /// POST call to `/api/auth/refresh-token` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="RefreshTokenAuthRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AuthResponse"/></returns>
        public virtual Promise<AuthResponse> PostRefreshToken(RefreshTokenAuthRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/auth/refresh-token";
            // make the request and return the result
            return _requester.Request<AuthResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<AuthResponse>);
        }
        /// <summary>
        /// Generate a new access token for a previously authenticated account.
        /// 
        /// POST call to `/api/auth/tokens/refresh-token` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="RefreshTokenAuthRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AuthResponse"/></returns>
        public virtual Promise<AuthResponse> PostTokensRefreshToken(RefreshTokenAuthRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/auth/tokens/refresh-token";
            // make the request and return the result
            return _requester.Request<AuthResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<AuthResponse>);
        }
        /// <summary>
        /// Generate a new access token for a brand-new player.
        /// 
        /// POST call to `/api/auth/tokens/guest` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="GuestAuthRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AuthResponse"/></returns>
        public virtual Promise<AuthResponse> PostTokensGuest(GuestAuthRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/auth/tokens/guest";
            // make the request and return the result
            return _requester.Request<AuthResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<AuthResponse>);
        }
        /// <summary>
        /// Generate a new access token when given email and password credentials
        /// 
        /// POST call to `/api/auth/tokens/password` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="PasswordAuthRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="AuthResponse"/></returns>
        public virtual Promise<AuthResponse> PostTokensPassword(PasswordAuthRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/auth/tokens/password";
            // make the request and return the result
            return _requester.Request<AuthResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<AuthResponse>);
        }
        /// <summary>
        /// Generate a new access token for a machine with a shared secret
        /// 
        /// POST call to `/api/auth/server` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ServerTokenAuthRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ServerTokenResponse"/></returns>
        public virtual Promise<ServerTokenResponse> PostServer(ServerTokenAuthRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/auth/server";
            // make the request and return the result
            return _requester.Request<ServerTokenResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<ServerTokenResponse>);
        }
    }
}
