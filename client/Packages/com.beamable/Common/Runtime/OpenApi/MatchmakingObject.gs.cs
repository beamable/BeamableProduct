
namespace Beamable.Api.Autogenerated.Matchmaking
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    
    public partial interface IMatchmakingApi
    {
        /// <param name="objectId">Gamertag of the player. Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectPutTick(long objectId);
        /// <param name="objectId">Gamertag of the player. Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="MatchUpdate"/></returns>
        Promise<MatchUpdate> ObjectGetMatch(long objectId);
        /// <param name="objectId">Gamertag of the player. Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="MatchUpdate"/></returns>
        Promise<MatchUpdate> ObjectPostMatch(long objectId);
        /// <param name="objectId">Gamertag of the player. Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectDeleteMatch(long objectId);
    }
    public partial class MatchmakingApi : IMatchmakingApi
    {
        /// <param name="objectId">Gamertag of the player. Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectPutTick(long objectId)
        {
            string gsUrl = "/object/matchmaking/{objectId}/tick";
            gsUrl = gsUrl.Replace("{objectId}", objectId.ToString());
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.PUT, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<EmptyResponse>);
        }
        /// <param name="objectId">Gamertag of the player. Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="MatchUpdate"/></returns>
        public virtual Promise<MatchUpdate> ObjectGetMatch(long objectId)
        {
            string gsUrl = "/object/matchmaking/{objectId}/match";
            gsUrl = gsUrl.Replace("{objectId}", objectId.ToString());
            // make the request and return the result
            return _requester.Request<MatchUpdate>(Method.GET, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<MatchUpdate>);
        }
        /// <param name="objectId">Gamertag of the player. Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="MatchUpdate"/></returns>
        public virtual Promise<MatchUpdate> ObjectPostMatch(long objectId)
        {
            string gsUrl = "/object/matchmaking/{objectId}/match";
            gsUrl = gsUrl.Replace("{objectId}", objectId.ToString());
            // make the request and return the result
            return _requester.Request<MatchUpdate>(Method.POST, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<MatchUpdate>);
        }
        /// <param name="objectId">Gamertag of the player. Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectDeleteMatch(long objectId)
        {
            string gsUrl = "/object/matchmaking/{objectId}/match";
            gsUrl = gsUrl.Replace("{objectId}", objectId.ToString());
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.DELETE, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<EmptyResponse>);
        }
    }
}
