
namespace Beamable.Api.Autogenerated.Matchmaking
{
	using Beamable.Api.Autogenerated.Models;
	using Beamable.Common;
	using Beamable.Common.Content;
	using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
	using Method = Beamable.Common.Api.Method;

	public partial interface IMatchmakingApi
	{
		Promise<EmptyResponse> PutTick(string objectId);
		Promise<MatchUpdate> GetMatch(string objectId);
		Promise<MatchUpdate> PostMatch(string objectId);
		Promise<EmptyResponse> DeleteMatch(string objectId);
	}
	public partial class MatchmakingApi : IMatchmakingApi
	{
		public virtual Promise<EmptyResponse> PutTick(string objectId)
		{
			string gsUrl = "/object/matchmaking/{objectId}/tick";
			gsUrl = gsUrl.Replace("{objectId}", objectId);
			// make the request and return the result
			return _requester.Request<EmptyResponse>(Method.PUT, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<EmptyResponse>);
		}
		public virtual Promise<MatchUpdate> GetMatch(string objectId)
		{
			string gsUrl = "/object/matchmaking/{objectId}/match";
			gsUrl = gsUrl.Replace("{objectId}", objectId);
			// make the request and return the result
			return _requester.Request<MatchUpdate>(Method.GET, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<MatchUpdate>);
		}
		public virtual Promise<MatchUpdate> PostMatch(string objectId)
		{
			string gsUrl = "/object/matchmaking/{objectId}/match";
			gsUrl = gsUrl.Replace("{objectId}", objectId);
			// make the request and return the result
			return _requester.Request<MatchUpdate>(Method.POST, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<MatchUpdate>);
		}
		public virtual Promise<EmptyResponse> DeleteMatch(string objectId)
		{
			string gsUrl = "/object/matchmaking/{objectId}/match";
			gsUrl = gsUrl.Replace("{objectId}", objectId);
			// make the request and return the result
			return _requester.Request<EmptyResponse>(Method.DELETE, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<EmptyResponse>);
		}
	}
}
