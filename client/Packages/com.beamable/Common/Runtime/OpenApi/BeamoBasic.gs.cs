
namespace Beamable.Api.Autogenerated.Beamo
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IBeamoApi
    {
        /// <param name="gsReq">The <see cref="GetServiceURLsRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="PreSignedUrlsResponse"/></returns>
        Promise<PreSignedUrlsResponse> PostImageUrls(GetServiceURLsRequest gsReq);
        /// <param name="gsReq">The <see cref="GetMetricsUrlRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="GetSignedUrlResponse"/></returns>
        Promise<GetSignedUrlResponse> PostMetricsUrl(GetMetricsUrlRequest gsReq);
        /// <returns>A promise containing the <see cref="MicroserviceSecretResponse"/></returns>
        Promise<MicroserviceSecretResponse> GetMicroserviceSecret();
        /// <param name="gsReq">The <see cref="Query"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="GetSignedUrlResponse"/></returns>
        Promise<GetSignedUrlResponse> PostQueryLogsResult(Query gsReq);
        /// <param name="endDate"></param>
        /// <param name="granularity"></param>
        /// <param name="period"></param>
        /// <param name="startDate"></param>
        /// <param name="storageObjectName"></param>
        /// <returns>A promise containing the <see cref="PerformanceResponse"/></returns>
        Promise<PerformanceResponse> GetStoragePerformance(string granularity, string storageObjectName, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> endDate, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> period, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> startDate);
        /// <param name="archived"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <returns>A promise containing the <see cref="BeamoBasicGetManifestsResponse"/></returns>
        Promise<BeamoBasicGetManifestsResponse> GetManifests([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> archived, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> offset);
        /// <returns>A promise containing the <see cref="GetTemplatesResponse"/></returns>
        Promise<GetTemplatesResponse> GetTemplates();
        /// <param name="gsReq">The <see cref="GetLogsInsightUrlRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="Query"/></returns>
        Promise<Query> PostQueryLogs(GetLogsInsightUrlRequest gsReq);
        /// <param name="gsReq">The <see cref="Query"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> DeleteQueryLogs(Query gsReq);
        /// <param name="gsReq">The <see cref="GetLogsUrlRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="GetSignedUrlResponse"/></returns>
        Promise<GetSignedUrlResponse> PostLogsUrl(GetLogsUrlRequest gsReq);
        /// <param name="gsReq">The <see cref="CommitImageRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="LambdaResponse"/></returns>
        Promise<LambdaResponse> PutImageCommit(CommitImageRequest gsReq);
        /// <returns>A promise containing the <see cref="GetLambdaURI"/></returns>
        Promise<GetLambdaURI> GetUploadAPI();
        /// <returns>A promise containing the <see cref="GetStatusResponse"/></returns>
        Promise<GetStatusResponse> GetStatus();
        /// <param name="archived"></param>
        /// <returns>A promise containing the <see cref="GetCurrentManifestResponse"/></returns>
        Promise<GetCurrentManifestResponse> GetManifestCurrent([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> archived);
        /// <param name="gsReq">The <see cref="PullBeamoManifestRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="BeamoBasicManifestChecksums"/></returns>
        Promise<BeamoBasicManifestChecksums> PostManifestPull(PullBeamoManifestRequest gsReq);
        /// <returns>A promise containing the <see cref="GetElasticContainerRegistryURI"/></returns>
        Promise<GetElasticContainerRegistryURI> GetRegistry();
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> PostManifestDeploy();
        /// <returns>A promise containing the <see cref="ConnectionString"/></returns>
        Promise<ConnectionString> GetStorageConnection();
        /// <param name="archived"></param>
        /// <param name="id"></param>
        /// <returns>A promise containing the <see cref="GetManifestResponse"/></returns>
        Promise<GetManifestResponse> GetManifest(string id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> archived);
        /// <param name="gsReq">The <see cref="PostManifestRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="PostManifestResponse"/></returns>
        Promise<PostManifestResponse> PostManifest(PostManifestRequest gsReq);
    }
    public partial class BeamoApi : IBeamoApi
    {
        /// <param name="gsReq">The <see cref="GetServiceURLsRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="PreSignedUrlsResponse"/></returns>
        public virtual Promise<PreSignedUrlsResponse> PostImageUrls(GetServiceURLsRequest gsReq)
        {
            string gsUrl = "/basic/beamo/image/urls";
            // make the request and return the result
            return _requester.Request<PreSignedUrlsResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<PreSignedUrlsResponse>);
        }
        /// <param name="gsReq">The <see cref="GetMetricsUrlRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="GetSignedUrlResponse"/></returns>
        public virtual Promise<GetSignedUrlResponse> PostMetricsUrl(GetMetricsUrlRequest gsReq)
        {
            string gsUrl = "/basic/beamo/metricsUrl";
            // make the request and return the result
            return _requester.Request<GetSignedUrlResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<GetSignedUrlResponse>);
        }
        /// <returns>A promise containing the <see cref="MicroserviceSecretResponse"/></returns>
        public virtual Promise<MicroserviceSecretResponse> GetMicroserviceSecret()
        {
            string gsUrl = "/basic/beamo/microservice/secret";
            // make the request and return the result
            return _requester.Request<MicroserviceSecretResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<MicroserviceSecretResponse>);
        }
        /// <param name="gsReq">The <see cref="Query"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="GetSignedUrlResponse"/></returns>
        public virtual Promise<GetSignedUrlResponse> PostQueryLogsResult(Query gsReq)
        {
            string gsUrl = "/basic/beamo/queryLogs/result";
            // make the request and return the result
            return _requester.Request<GetSignedUrlResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<GetSignedUrlResponse>);
        }
        /// <param name="endDate"></param>
        /// <param name="granularity"></param>
        /// <param name="period"></param>
        /// <param name="startDate"></param>
        /// <param name="storageObjectName"></param>
        /// <returns>A promise containing the <see cref="PerformanceResponse"/></returns>
        public virtual Promise<PerformanceResponse> GetStoragePerformance(string granularity, string storageObjectName, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> endDate, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> period, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> startDate)
        {
            string gsUrl = "/basic/beamo/storage/performance";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((endDate != default(OptionalString)) 
                        && endDate.HasValue))
            {
                gsQueries.Add(string.Concat("endDate=", endDate.Value.ToString()));
            }
            gsQueries.Add(string.Concat("storageObjectName=", _requester.EscapeURL(storageObjectName.ToString())));
            gsQueries.Add(string.Concat("granularity=", _requester.EscapeURL(granularity.ToString())));
            if (((startDate != default(OptionalString)) 
                        && startDate.HasValue))
            {
                gsQueries.Add(string.Concat("startDate=", startDate.Value.ToString()));
            }
            if (((period != default(OptionalString)) 
                        && period.HasValue))
            {
                gsQueries.Add(string.Concat("period=", period.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<PerformanceResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<PerformanceResponse>);
        }
        /// <param name="archived"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <returns>A promise containing the <see cref="BeamoBasicGetManifestsResponse"/></returns>
        public virtual Promise<BeamoBasicGetManifestsResponse> GetManifests([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> archived, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> offset)
        {
            string gsUrl = "/basic/beamo/manifests";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((offset != default(OptionalInt)) 
                        && offset.HasValue))
            {
                gsQueries.Add(string.Concat("offset=", offset.Value.ToString()));
            }
            if (((limit != default(OptionalInt)) 
                        && limit.HasValue))
            {
                gsQueries.Add(string.Concat("limit=", limit.Value.ToString()));
            }
            if (((archived != default(OptionalBool)) 
                        && archived.HasValue))
            {
                gsQueries.Add(string.Concat("archived=", archived.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<BeamoBasicGetManifestsResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<BeamoBasicGetManifestsResponse>);
        }
        /// <returns>A promise containing the <see cref="GetTemplatesResponse"/></returns>
        public virtual Promise<GetTemplatesResponse> GetTemplates()
        {
            string gsUrl = "/basic/beamo/templates";
            // make the request and return the result
            return _requester.Request<GetTemplatesResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<GetTemplatesResponse>);
        }
        /// <param name="gsReq">The <see cref="GetLogsInsightUrlRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="Query"/></returns>
        public virtual Promise<Query> PostQueryLogs(GetLogsInsightUrlRequest gsReq)
        {
            string gsUrl = "/basic/beamo/queryLogs";
            // make the request and return the result
            return _requester.Request<Query>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<Query>);
        }
        /// <param name="gsReq">The <see cref="Query"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> DeleteQueryLogs(Query gsReq)
        {
            string gsUrl = "/basic/beamo/queryLogs";
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<CommonResponse>);
        }
        /// <param name="gsReq">The <see cref="GetLogsUrlRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="GetSignedUrlResponse"/></returns>
        public virtual Promise<GetSignedUrlResponse> PostLogsUrl(GetLogsUrlRequest gsReq)
        {
            string gsUrl = "/basic/beamo/logsUrl";
            // make the request and return the result
            return _requester.Request<GetSignedUrlResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<GetSignedUrlResponse>);
        }
        /// <param name="gsReq">The <see cref="CommitImageRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="LambdaResponse"/></returns>
        public virtual Promise<LambdaResponse> PutImageCommit(CommitImageRequest gsReq)
        {
            string gsUrl = "/basic/beamo/image/commit";
            // make the request and return the result
            return _requester.Request<LambdaResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<LambdaResponse>);
        }
        /// <returns>A promise containing the <see cref="GetLambdaURI"/></returns>
        public virtual Promise<GetLambdaURI> GetUploadAPI()
        {
            string gsUrl = "/basic/beamo/uploadAPI";
            // make the request and return the result
            return _requester.Request<GetLambdaURI>(Method.GET, gsUrl, default(object), true, this.Serialize<GetLambdaURI>);
        }
        /// <returns>A promise containing the <see cref="GetStatusResponse"/></returns>
        public virtual Promise<GetStatusResponse> GetStatus()
        {
            string gsUrl = "/basic/beamo/status";
            // make the request and return the result
            return _requester.Request<GetStatusResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<GetStatusResponse>);
        }
        /// <param name="archived"></param>
        /// <returns>A promise containing the <see cref="GetCurrentManifestResponse"/></returns>
        public virtual Promise<GetCurrentManifestResponse> GetManifestCurrent([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> archived)
        {
            string gsUrl = "/basic/beamo/manifest/current";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((archived != default(OptionalBool)) 
                        && archived.HasValue))
            {
                gsQueries.Add(string.Concat("archived=", archived.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<GetCurrentManifestResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<GetCurrentManifestResponse>);
        }
        /// <param name="gsReq">The <see cref="PullBeamoManifestRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="BeamoBasicManifestChecksums"/></returns>
        public virtual Promise<BeamoBasicManifestChecksums> PostManifestPull(PullBeamoManifestRequest gsReq)
        {
            string gsUrl = "/basic/beamo/manifest/pull";
            // make the request and return the result
            return _requester.Request<BeamoBasicManifestChecksums>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<BeamoBasicManifestChecksums>);
        }
        /// <returns>A promise containing the <see cref="GetElasticContainerRegistryURI"/></returns>
        public virtual Promise<GetElasticContainerRegistryURI> GetRegistry()
        {
            string gsUrl = "/basic/beamo/registry";
            // make the request and return the result
            return _requester.Request<GetElasticContainerRegistryURI>(Method.GET, gsUrl, default(object), true, this.Serialize<GetElasticContainerRegistryURI>);
        }
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> PostManifestDeploy()
        {
            string gsUrl = "/basic/beamo/manifest/deploy";
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.POST, gsUrl, default(object), true, this.Serialize<EmptyResponse>);
        }
        /// <returns>A promise containing the <see cref="ConnectionString"/></returns>
        public virtual Promise<ConnectionString> GetStorageConnection()
        {
            string gsUrl = "/basic/beamo/storage/connection";
            // make the request and return the result
            return _requester.Request<ConnectionString>(Method.GET, gsUrl, default(object), true, this.Serialize<ConnectionString>);
        }
        /// <param name="archived"></param>
        /// <param name="id"></param>
        /// <returns>A promise containing the <see cref="GetManifestResponse"/></returns>
        public virtual Promise<GetManifestResponse> GetManifest(string id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> archived)
        {
            string gsUrl = "/basic/beamo/manifest";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            gsQueries.Add(string.Concat("id=", _requester.EscapeURL(id.ToString())));
            if (((archived != default(OptionalBool)) 
                        && archived.HasValue))
            {
                gsQueries.Add(string.Concat("archived=", archived.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<GetManifestResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<GetManifestResponse>);
        }
        /// <param name="gsReq">The <see cref="PostManifestRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="PostManifestResponse"/></returns>
        public virtual Promise<PostManifestResponse> PostManifest(PostManifestRequest gsReq)
        {
            string gsUrl = "/basic/beamo/manifest";
            // make the request and return the result
            return _requester.Request<PostManifestResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<PostManifestResponse>);
        }
    }
}
