// this file was copied from nuget package Beamable.Common@6.1.0-PREVIEW.RC1
// https://www.nuget.org/packages/Beamable.Common/6.1.0-PREVIEW.RC1


namespace Beamable.Api.Autogenerated.Serviceplan
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IBeamServiceplanApi
    {
        /// <summary>
        /// GET call to `/api/service-plans` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ServicePlanActorServicePlansResponse"/></returns>
        Promise<ServicePlanActorServicePlansResponse> GetApiServicePlans([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/api/service-plans` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="CreateServicePlanRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        Promise<EmptyMessage> PostApiServicePlans(CreateServicePlanRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/service-plans/{name}` endpoint.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ServicePlanActorServicePlan"/></returns>
        Promise<ServicePlanActorServicePlan> Get(string name, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// DELETE call to `/api/service-plans/{name}` endpoint.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        Promise<EmptyMessage> Delete(string name, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
    }
    public partial class BeamServiceplanApi : IBeamServiceplanApi
    {
        /// <summary>
        /// GET call to `/api/service-plans` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ServicePlanActorServicePlansResponse"/></returns>
        public virtual Promise<ServicePlanActorServicePlansResponse> GetApiServicePlans([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/service-plans";
            // make the request and return the result
            return _requester.Request<ServicePlanActorServicePlansResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ServicePlanActorServicePlansResponse>);
        }
        /// <summary>
        /// POST call to `/api/service-plans` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="CreateServicePlanRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        public virtual Promise<EmptyMessage> PostApiServicePlans(CreateServicePlanRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/service-plans";
            // make the request and return the result
            return _requester.Request<EmptyMessage>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyMessage>);
        }
        /// <summary>
        /// GET call to `/api/service-plans/{name}` endpoint.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ServicePlanActorServicePlan"/></returns>
        public virtual Promise<ServicePlanActorServicePlan> Get(string name, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/service-plans/{name}";
            gsUrl = gsUrl.Replace("{name}", _requester.EscapeURL(name.ToString()));
            // make the request and return the result
            return _requester.Request<ServicePlanActorServicePlan>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ServicePlanActorServicePlan>);
        }
        /// <summary>
        /// DELETE call to `/api/service-plans/{name}` endpoint.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyMessage"/></returns>
        public virtual Promise<EmptyMessage> Delete(string name, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/service-plans/{name}";
            gsUrl = gsUrl.Replace("{name}", _requester.EscapeURL(name.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyMessage>(Method.DELETE, gsUrl, default(object), includeAuthHeader, this.Serialize<EmptyMessage>);
        }
    }
}
