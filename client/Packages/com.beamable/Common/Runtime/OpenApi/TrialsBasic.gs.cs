
namespace Beamable.Api.Autogenerated.Trials
{
	using Beamable.Api.Autogenerated.Models;
	using Beamable.Common;
	using Beamable.Common.Content;
	using Beamable.Common.Dependencies;
	using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
	using Method = Beamable.Common.Api.Method;

	public partial interface ITrialsApi
	{
		/// <param name="id"></param>
		/// <returns>A promise containing the <see cref="GetS3DataResponse"/></returns>
		Promise<GetS3DataResponse> GetAdminData(long id);
		/// <param name="gsReq">The <see cref="UploadTrialDataRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="SaveGameDataResponse"/></returns>
		Promise<SaveGameDataResponse> PostData(UploadTrialDataRequest gsReq);
		/// <param name="gsReq">The <see cref="DeleteTrialDataRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="TrialSuccessResponse"/></returns>
		Promise<TrialSuccessResponse> DeleteData(DeleteTrialDataRequest gsReq);
		/// <param name="gsReq">The <see cref="PauseTrialRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="TrialSuccessResponse"/></returns>
		Promise<TrialSuccessResponse> PutPause(PauseTrialRequest gsReq);
		/// <param name="gsReq">The <see cref="ScheduleTrialRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="TrialSuccessResponse"/></returns>
		Promise<TrialSuccessResponse> PutSchedule(ScheduleTrialRequest gsReq);
		/// <returns>A promise containing the <see cref="ListTrialsResponse"/></returns>
		Promise<ListTrialsResponse> Get();
		/// <param name="gsReq">The <see cref="CreateTrialRestRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="TrialSuccessResponse"/></returns>
		Promise<TrialSuccessResponse> Post(CreateTrialRestRequest gsReq);
		/// <param name="gsReq">The <see cref="DeleteTrialRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="TrialSuccessResponse"/></returns>
		Promise<TrialSuccessResponse> Delete(DeleteTrialRequest gsReq);
		/// <param name="dbid"></param>
		/// <returns>A promise containing the <see cref="GetPlayerTrialsResponse"/></returns>
		Promise<GetPlayerTrialsResponse> GetAdmin(long dbid);
		/// <param name="gsReq">The <see cref="StartTrialRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="TrialSuccessResponse"/></returns>
		Promise<TrialSuccessResponse> PutStart(StartTrialRequest gsReq);
	}
	public partial class TrialsApi : ITrialsApi
	{
		/// <param name="id"></param>
		/// <returns>A promise containing the <see cref="GetS3DataResponse"/></returns>
		public virtual Promise<GetS3DataResponse> GetAdminData(long id)
		{
			string gsUrl = "/basic/trials/admin/data";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			gsQueries.Add(string.Concat("id=", _requester.EscapeURL(id.ToString())));
			if ((gsQueries.Count > 0))
			{
				gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
				gsUrl = string.Concat(gsUrl, gsQuery);
			}
			// make the request and return the result
			return _requester.Request<GetS3DataResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<GetS3DataResponse>);
		}
		/// <param name="gsReq">The <see cref="UploadTrialDataRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="SaveGameDataResponse"/></returns>
		public virtual Promise<SaveGameDataResponse> PostData(UploadTrialDataRequest gsReq)
		{
			string gsUrl = "/basic/trials/data";
			// make the request and return the result
			return _requester.Request<SaveGameDataResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<SaveGameDataResponse>);
		}
		/// <param name="gsReq">The <see cref="DeleteTrialDataRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="TrialSuccessResponse"/></returns>
		public virtual Promise<TrialSuccessResponse> DeleteData(DeleteTrialDataRequest gsReq)
		{
			string gsUrl = "/basic/trials/data";
			// make the request and return the result
			return _requester.Request<TrialSuccessResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<TrialSuccessResponse>);
		}
		/// <param name="gsReq">The <see cref="PauseTrialRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="TrialSuccessResponse"/></returns>
		public virtual Promise<TrialSuccessResponse> PutPause(PauseTrialRequest gsReq)
		{
			string gsUrl = "/basic/trials/pause";
			// make the request and return the result
			return _requester.Request<TrialSuccessResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<TrialSuccessResponse>);
		}
		/// <param name="gsReq">The <see cref="ScheduleTrialRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="TrialSuccessResponse"/></returns>
		public virtual Promise<TrialSuccessResponse> PutSchedule(ScheduleTrialRequest gsReq)
		{
			string gsUrl = "/basic/trials/schedule";
			// make the request and return the result
			return _requester.Request<TrialSuccessResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<TrialSuccessResponse>);
		}
		/// <returns>A promise containing the <see cref="ListTrialsResponse"/></returns>
		public virtual Promise<ListTrialsResponse> Get()
		{
			string gsUrl = "/basic/trials/";
			// make the request and return the result
			return _requester.Request<ListTrialsResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<ListTrialsResponse>);
		}
		/// <param name="gsReq">The <see cref="CreateTrialRestRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="TrialSuccessResponse"/></returns>
		public virtual Promise<TrialSuccessResponse> Post(CreateTrialRestRequest gsReq)
		{
			string gsUrl = "/basic/trials/";
			// make the request and return the result
			return _requester.Request<TrialSuccessResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<TrialSuccessResponse>);
		}
		/// <param name="gsReq">The <see cref="DeleteTrialRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="TrialSuccessResponse"/></returns>
		public virtual Promise<TrialSuccessResponse> Delete(DeleteTrialRequest gsReq)
		{
			string gsUrl = "/basic/trials/";
			// make the request and return the result
			return _requester.Request<TrialSuccessResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<TrialSuccessResponse>);
		}
		/// <param name="dbid"></param>
		/// <returns>A promise containing the <see cref="GetPlayerTrialsResponse"/></returns>
		public virtual Promise<GetPlayerTrialsResponse> GetAdmin(long dbid)
		{
			string gsUrl = "/basic/trials/admin";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			gsQueries.Add(string.Concat("dbid=", _requester.EscapeURL(dbid.ToString())));
			if ((gsQueries.Count > 0))
			{
				gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
				gsUrl = string.Concat(gsUrl, gsQuery);
			}
			// make the request and return the result
			return _requester.Request<GetPlayerTrialsResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<GetPlayerTrialsResponse>);
		}
		/// <param name="gsReq">The <see cref="StartTrialRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="TrialSuccessResponse"/></returns>
		public virtual Promise<TrialSuccessResponse> PutStart(StartTrialRequest gsReq)
		{
			string gsUrl = "/basic/trials/start";
			// make the request and return the result
			return _requester.Request<TrialSuccessResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<TrialSuccessResponse>);
		}
	}
}
