
namespace Beamable.Api.Autogenerated.EventPlayers
{
	using Beamable.Api.Autogenerated.Models;
	using Beamable.Common;
	using Beamable.Common.Content;
	using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
	using Method = Beamable.Common.Api.Method;

	public partial interface IEventPlayersApi
	{
		Promise<EventPlayerView> Get(string objectId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
		Promise<EventClaimResponse> PostClaim(string objectId, EventClaimRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
		Promise<CommonResponse> PutScore(string objectId, EventScoreRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
	}
	public partial class EventPlayersApi : IEventPlayersApi
	{
		public virtual Promise<EventPlayerView> Get(string objectId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/object/event-players/{objectId}/";
			gsUrl = gsUrl.Replace("{objectId}", objectId);
			// make the request and return the result
			return _requester.Request<EventPlayerView>(Method.GET, gsUrl, default(object), includeAuthHeader, Beamable.Serialization.JsonSerializable.FromJson<EventPlayerView>);
		}
		public virtual Promise<EventClaimResponse> PostClaim(string objectId, EventClaimRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/object/event-players/{objectId}/claim";
			gsUrl = gsUrl.Replace("{objectId}", objectId);
			// make the request and return the result
			return _requester.Request<EventClaimResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, Beamable.Serialization.JsonSerializable.FromJson<EventClaimResponse>);
		}
		public virtual Promise<CommonResponse> PutScore(string objectId, EventScoreRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/object/event-players/{objectId}/score";
			gsUrl = gsUrl.Replace("{objectId}", objectId);
			// make the request and return the result
			return _requester.Request<CommonResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, Beamable.Serialization.JsonSerializable.FromJson<CommonResponse>);
		}
	}
}
