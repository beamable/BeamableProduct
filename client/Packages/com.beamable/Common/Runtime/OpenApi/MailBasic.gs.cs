
namespace Beamable.Api.Autogenerated.Mail
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IMailApi
    {
        /// <param name="gsReq">The <see cref="AcceptMultipleAttachments"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="MailSuccessResponse"/></returns>
        Promise<MailSuccessResponse> PutAttachments(AcceptMultipleAttachments gsReq);
        /// <param name="gamerTag"></param>
        /// <param name="templateName"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="MailTemplate"/></returns>
        Promise<MailTemplate> GetTemplate(long gamerTag, string templateName, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="mid"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="MailResponse"/></returns>
        Promise<MailResponse> Get(long mid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="gsReq">The <see cref="UpdateMailRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="MailSuccessResponse"/></returns>
        Promise<MailSuccessResponse> Put(UpdateMailRequest gsReq);
        /// <param name="gsReq">The <see cref="BulkSendMailRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="MailSuccessResponse"/></returns>
        Promise<MailSuccessResponse> PostBulk(BulkSendMailRequest gsReq);
    }
    public partial class MailApi : IMailApi
    {
        /// <param name="gsReq">The <see cref="AcceptMultipleAttachments"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="MailSuccessResponse"/></returns>
        public virtual Promise<MailSuccessResponse> PutAttachments(AcceptMultipleAttachments gsReq)
        {
            string gsUrl = "/basic/mail/attachments";
            // make the request and return the result
            return _requester.Request<MailSuccessResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<MailSuccessResponse>);
        }
        /// <param name="gamerTag"></param>
        /// <param name="templateName"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="MailTemplate"/></returns>
        public virtual Promise<MailTemplate> GetTemplate(long gamerTag, string templateName, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/mail/template";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            gsQueries.Add(string.Concat("templateName=", _requester.EscapeURL(templateName.ToString())));
            gsQueries.Add(string.Concat("gamerTag=", _requester.EscapeURL(gamerTag.ToString())));
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<MailTemplate>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<MailTemplate>);
        }
        /// <param name="mid"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="MailResponse"/></returns>
        public virtual Promise<MailResponse> Get(long mid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/mail/";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            gsQueries.Add(string.Concat("mid=", _requester.EscapeURL(mid.ToString())));
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<MailResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<MailResponse>);
        }
        /// <param name="gsReq">The <see cref="UpdateMailRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="MailSuccessResponse"/></returns>
        public virtual Promise<MailSuccessResponse> Put(UpdateMailRequest gsReq)
        {
            string gsUrl = "/basic/mail/";
            // make the request and return the result
            return _requester.Request<MailSuccessResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<MailSuccessResponse>);
        }
        /// <param name="gsReq">The <see cref="BulkSendMailRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="MailSuccessResponse"/></returns>
        public virtual Promise<MailSuccessResponse> PostBulk(BulkSendMailRequest gsReq)
        {
            string gsUrl = "/basic/mail/bulk";
            // make the request and return the result
            return _requester.Request<MailSuccessResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<MailSuccessResponse>);
        }
    }
}
