
namespace Beamable.Api.Autogenerated.Announcements
{
	using Beamable.Api.Autogenerated.Models;
	using Beamable.Common;
	using Beamable.Common.Content;
	using Beamable.Common.Dependencies;
	using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
	using Method = Beamable.Common.Api.Method;

	public partial interface IAnnouncementsApi
	{
		/// <param name="tagNameFilter"></param>
		/// <returns>A promise containing the <see cref="ListTagsResponse"/></returns>
		Promise<ListTagsResponse> GetListTags([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> tagNameFilter);
		/// <returns>A promise containing the <see cref="AnnouncementContentResponse"/></returns>
		Promise<AnnouncementContentResponse> GetList();
		/// <param name="date"></param>
		/// <returns>A promise containing the <see cref="AnnouncementContentResponse"/></returns>
		Promise<AnnouncementContentResponse> GetSearch([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> date);
		/// <returns>A promise containing the <see cref="ListDefinitionsResponse"/></returns>
		Promise<ListDefinitionsResponse> GetListDefinitions();
		/// <param name="gsReq">The <see cref="AnnouncementDto"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
		Promise<EmptyResponse> Post(AnnouncementDto gsReq);
		/// <param name="gsReq">The <see cref="DeleteAnnouncementRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
		Promise<EmptyResponse> Delete(DeleteAnnouncementRequest gsReq);
		/// <returns>A promise containing the <see cref="AnnouncementContentResponse"/></returns>
		Promise<AnnouncementContentResponse> GetContent();
	}
	public partial class AnnouncementsApi : IAnnouncementsApi
	{
		/// <param name="tagNameFilter"></param>
		/// <returns>A promise containing the <see cref="ListTagsResponse"/></returns>
		public virtual Promise<ListTagsResponse> GetListTags([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> tagNameFilter)
		{
			string gsUrl = "/basic/announcements/list/tags";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			if (((tagNameFilter != default(OptionalString))
						&& tagNameFilter.HasValue))
			{
				gsQueries.Add(string.Concat("tagNameFilter=", tagNameFilter.Value.ToString()));
			}
			if ((gsQueries.Count > 0))
			{
				gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
				gsUrl = string.Concat(gsUrl, gsQuery);
			}
			// make the request and return the result
			return _requester.Request<ListTagsResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<ListTagsResponse>);
		}
		/// <returns>A promise containing the <see cref="AnnouncementContentResponse"/></returns>
		public virtual Promise<AnnouncementContentResponse> GetList()
		{
			string gsUrl = "/basic/announcements/list";
			// make the request and return the result
			return _requester.Request<AnnouncementContentResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<AnnouncementContentResponse>);
		}
		/// <param name="date"></param>
		/// <returns>A promise containing the <see cref="AnnouncementContentResponse"/></returns>
		public virtual Promise<AnnouncementContentResponse> GetSearch([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> date)
		{
			string gsUrl = "/basic/announcements/search";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			if (((date != default(OptionalString))
						&& date.HasValue))
			{
				gsQueries.Add(string.Concat("date=", date.Value.ToString()));
			}
			if ((gsQueries.Count > 0))
			{
				gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
				gsUrl = string.Concat(gsUrl, gsQuery);
			}
			// make the request and return the result
			return _requester.Request<AnnouncementContentResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<AnnouncementContentResponse>);
		}
		/// <returns>A promise containing the <see cref="ListDefinitionsResponse"/></returns>
		public virtual Promise<ListDefinitionsResponse> GetListDefinitions()
		{
			string gsUrl = "/basic/announcements/list/definitions";
			// make the request and return the result
			return _requester.Request<ListDefinitionsResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<ListDefinitionsResponse>);
		}
		/// <param name="gsReq">The <see cref="AnnouncementDto"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
		public virtual Promise<EmptyResponse> Post(AnnouncementDto gsReq)
		{
			string gsUrl = "/basic/announcements/";
			// make the request and return the result
			return _requester.Request<EmptyResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
		}
		/// <param name="gsReq">The <see cref="DeleteAnnouncementRequest"/> instance to use for the request</param>
		/// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
		public virtual Promise<EmptyResponse> Delete(DeleteAnnouncementRequest gsReq)
		{
			string gsUrl = "/basic/announcements/";
			// make the request and return the result
			return _requester.Request<EmptyResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
		}
		/// <returns>A promise containing the <see cref="AnnouncementContentResponse"/></returns>
		public virtual Promise<AnnouncementContentResponse> GetContent()
		{
			string gsUrl = "/basic/announcements/content";
			// make the request and return the result
			return _requester.Request<AnnouncementContentResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<AnnouncementContentResponse>);
		}
	}
}
