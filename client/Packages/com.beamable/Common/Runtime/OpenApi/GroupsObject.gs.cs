
namespace Beamable.Api.Autogenerated.Groups
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IGroupsApi
    {
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="RoleChangeRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> ObjectPutRole(long objectId, RoleChangeRequest gsReq);
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="KickRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GroupMembershipResponse"/></returns>
        Promise<GroupMembershipResponse> ObjectPostKick(long objectId, KickRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="GroupApplication"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> ObjectPostApply(long objectId, GroupApplication gsReq);
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="CreateDonationRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectPostDonations(long objectId, CreateDonationRequest gsReq);
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="MakeDonationRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectPutDonations(long objectId, MakeDonationRequest gsReq);
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="KickRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GroupMembershipResponse"/></returns>
        Promise<GroupMembershipResponse> ObjectDeleteMember(long objectId, KickRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Group"/></returns>
        Promise<Group> ObjectGet(long objectId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="GroupUpdate"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> ObjectPut(long objectId, GroupUpdate gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DisbandRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> ObjectDelete(long objectId, DisbandRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> ObjectPutDonationsClaim(long objectId);
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="GroupInvite"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> ObjectPostInvite(long objectId, GroupInvite gsReq);
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="GroupApplication"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> ObjectPostPetition(long objectId, GroupApplication gsReq);
    }
    public partial class GroupsApi : IGroupsApi
    {
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="RoleChangeRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> ObjectPutRole(long objectId, RoleChangeRequest gsReq)
        {
            string gsUrl = "/object/groups/{objectId}/role";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<CommonResponse>);
        }
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="KickRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GroupMembershipResponse"/></returns>
        public virtual Promise<GroupMembershipResponse> ObjectPostKick(long objectId, KickRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/groups/{objectId}/kick";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<GroupMembershipResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<GroupMembershipResponse>);
        }
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="GroupApplication"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> ObjectPostApply(long objectId, GroupApplication gsReq)
        {
            string gsUrl = "/object/groups/{objectId}/apply";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<CommonResponse>);
        }
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="CreateDonationRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectPostDonations(long objectId, CreateDonationRequest gsReq)
        {
            string gsUrl = "/object/groups/{objectId}/donations";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
        }
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="MakeDonationRequest"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectPutDonations(long objectId, MakeDonationRequest gsReq)
        {
            string gsUrl = "/object/groups/{objectId}/donations";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<EmptyResponse>);
        }
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="KickRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GroupMembershipResponse"/></returns>
        public virtual Promise<GroupMembershipResponse> ObjectDeleteMember(long objectId, KickRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/groups/{objectId}/member";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<GroupMembershipResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<GroupMembershipResponse>);
        }
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Group"/></returns>
        public virtual Promise<Group> ObjectGet(long objectId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/groups/{objectId}/";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<Group>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<Group>);
        }
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="GroupUpdate"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> ObjectPut(long objectId, GroupUpdate gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/groups/{objectId}/";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<CommonResponse>);
        }
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="DisbandRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> ObjectDelete(long objectId, DisbandRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/object/groups/{objectId}/";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<CommonResponse>);
        }
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> ObjectPutDonationsClaim(long objectId)
        {
            string gsUrl = "/object/groups/{objectId}/donations/claim";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.PUT, gsUrl, default(object), true, this.Serialize<EmptyResponse>);
        }
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="GroupInvite"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> ObjectPostInvite(long objectId, GroupInvite gsReq)
        {
            string gsUrl = "/object/groups/{objectId}/invite";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<CommonResponse>);
        }
        /// <param name="objectId">Gamertag of the player.Underlying objectId type is integer in format int64.</param>
        /// <param name="gsReq">The <see cref="GroupApplication"/> instance to use for the request</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> ObjectPostPetition(long objectId, GroupApplication gsReq)
        {
            string gsUrl = "/object/groups/{objectId}/petition";
            gsUrl = gsUrl.Replace("{objectId}", _requester.EscapeURL(objectId.ToString()));
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, this.Serialize<CommonResponse>);
        }
    }
}
