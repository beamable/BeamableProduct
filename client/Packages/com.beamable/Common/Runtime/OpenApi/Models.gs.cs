
namespace Beamable.Api.Autogenerated.Models
{
	using Beamable.Common.Content;

	[System.SerializableAttribute()]
	public class PullBeamoManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string sourceRealmPid;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("sourceRealmPid", ref sourceRealmPid);
		}
	}
	[System.SerializableAttribute()]
	public class GetManifestsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ManifestView[] manifests;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("manifests", ref manifests);
		}
	}
	[System.SerializableAttribute()]
	public class GetLogsUrlRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong startTime = new OptionalLong();
		public string serviceName;
		public OptionalString nextToken = new OptionalString();
		public OptionalString filter = new OptionalString();
		public OptionalLong endTime = new OptionalLong();
		public OptionalInt limit = new OptionalInt();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("startTime")
						|| ((startTime != default(OptionalLong))
						&& startTime.HasValue)))
			{
				s.Serialize("startTime", ref startTime.Value);
				startTime.HasValue = true;
			}
			s.Serialize("serviceName", ref serviceName);
			if ((s.HasKey("nextToken")
						|| ((nextToken != default(OptionalString))
						&& nextToken.HasValue)))
			{
				s.Serialize("nextToken", ref nextToken.Value);
				nextToken.HasValue = true;
			}
			if ((s.HasKey("filter")
						|| ((filter != default(OptionalString))
						&& filter.HasValue)))
			{
				s.Serialize("filter", ref filter.Value);
				filter.HasValue = true;
			}
			if ((s.HasKey("endTime")
						|| ((endTime != default(OptionalLong))
						&& endTime.HasValue)))
			{
				s.Serialize("endTime", ref endTime.Value);
				endTime.HasValue = true;
			}
			if ((s.HasKey("limit")
						|| ((limit != default(OptionalInt))
						&& limit.HasValue)))
			{
				s.Serialize("limit", ref limit.Value);
				limit.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GetLogsUrlHeader : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string key;
		public string value;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("key", ref key);
			s.Serialize("value", ref value);
		}
	}
	[System.SerializableAttribute()]
	public class GetManifestsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInt offset = new OptionalInt();
		public OptionalInt limit = new OptionalInt();
		public OptionalBool archived = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("offset")
						|| ((offset != default(OptionalInt))
						&& offset.HasValue)))
			{
				s.Serialize("offset", ref offset.Value);
				offset.HasValue = true;
			}
			if ((s.HasKey("limit")
						|| ((limit != default(OptionalInt))
						&& limit.HasValue)))
			{
				s.Serialize("limit", ref limit.Value);
				limit.HasValue = true;
			}
			if ((s.HasKey("archived")
						|| ((archived != default(OptionalBool))
						&& archived.HasValue)))
			{
				s.Serialize("archived", ref archived.Value);
				archived.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GetCurrentManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalBool archived = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("archived")
						|| ((archived != default(OptionalBool))
						&& archived.HasValue)))
			{
				s.Serialize("archived", ref archived.Value);
				archived.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class DatabasePerformanceRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString endDate = new OptionalString();
		public string storageObjectName;
		public string granularity;
		public OptionalString startDate = new OptionalString();
		public OptionalString period = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("endDate")
						|| ((endDate != default(OptionalString))
						&& endDate.HasValue)))
			{
				s.Serialize("endDate", ref endDate.Value);
				endDate.HasValue = true;
			}
			s.Serialize("storageObjectName", ref storageObjectName);
			s.Serialize("granularity", ref granularity);
			if ((s.HasKey("startDate")
						|| ((startDate != default(OptionalString))
						&& startDate.HasValue)))
			{
				s.Serialize("startDate", ref startDate.Value);
				startDate.HasValue = true;
			}
			if ((s.HasKey("period")
						|| ((period != default(OptionalString))
						&& period.HasValue)))
			{
				s.Serialize("period", ref period.Value);
				period.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class PostManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ServiceReference[] manifest;
		public OptionalString comments = new OptionalString();
		public OptionalBool autoDeploy = new OptionalBool();
		public OptionalServiceStorageReferenceArray storageReferences = new OptionalServiceStorageReferenceArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("manifest", ref manifest);
			if ((s.HasKey("comments")
						|| ((comments != default(OptionalString))
						&& comments.HasValue)))
			{
				s.Serialize("comments", ref comments.Value);
				comments.HasValue = true;
			}
			if ((s.HasKey("autoDeploy")
						|| ((autoDeploy != default(OptionalBool))
						&& autoDeploy.HasValue)))
			{
				s.Serialize("autoDeploy", ref autoDeploy.Value);
				autoDeploy.HasValue = true;
			}
			if ((s.HasKey("storageReferences")
						|| ((storageReferences != default(OptionalServiceStorageReferenceArray))
						&& storageReferences.HasValue)))
			{
				s.SerializeArray("storageReferences", ref storageReferences.Value);
				storageReferences.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ServiceStorageStatus : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public string storageType;
		public bool isRunning;
		public bool isCurrent;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.Serialize("storageType", ref storageType);
			s.Serialize("isRunning", ref isRunning);
			s.Serialize("isCurrent", ref isCurrent);
		}
	}
	[System.SerializableAttribute()]
	public class PASlowQuery : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string line;
		public string namespaceKey;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("line", ref line);
			s.Serialize("namespace", ref namespaceKey);
		}
	}
	[System.SerializableAttribute()]
	public class GetSignedUrlResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public GetLogsUrlHeader[] headers;
		public string url;
		public string body;
		public string method;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("headers", ref headers);
			s.Serialize("url", ref url);
			s.Serialize("body", ref body);
			s.Serialize("method", ref method);
		}
	}
	[System.SerializableAttribute()]
	public class ConnectionString : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string connectionString;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("connectionString", ref connectionString);
		}
	}
	[System.SerializableAttribute()]
	public class ServiceTemplate : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
		}
	}
	[System.SerializableAttribute()]
	public class GetManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public OptionalBool archived = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			if ((s.HasKey("archived")
						|| ((archived != default(OptionalBool))
						&& archived.HasValue)))
			{
				s.Serialize("archived", ref archived.Value);
				archived.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class DatabaseMeasurement : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public DataPoint[] dataPoints;
		public string name;
		public string units;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("dataPoints", ref dataPoints);
			s.Serialize("name", ref name);
			s.Serialize("units", ref units);
		}
	}
	[System.SerializableAttribute()]
	public class ManifestView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long createdByAccountId;
		public string id;
		public string checksum;
		public OptionalServiceStorageReferenceArray storageReference = new OptionalServiceStorageReferenceArray();
		public ServiceReference[] manifest;
		public long created;
		public OptionalString comments = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("createdByAccountId", ref createdByAccountId);
			s.Serialize("id", ref id);
			s.Serialize("checksum", ref checksum);
			if ((s.HasKey("storageReference")
						|| ((storageReference != default(OptionalServiceStorageReferenceArray))
						&& storageReference.HasValue)))
			{
				s.SerializeArray("storageReference", ref storageReference.Value);
				storageReference.HasValue = true;
			}
			s.SerializeArray("manifest", ref manifest);
			s.Serialize("created", ref created);
			if ((s.HasKey("comments")
						|| ((comments != default(OptionalString))
						&& comments.HasValue)))
			{
				s.Serialize("comments", ref comments.Value);
				comments.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ServiceDependencyReference : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public string storageType;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.Serialize("storageType", ref storageType);
		}
	}
	[System.SerializableAttribute()]
	public class ManifestChecksum : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public string checksum;
		public long createdAt;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.Serialize("checksum", ref checksum);
			s.Serialize("createdAt", ref createdAt);
		}
	}
	[System.SerializableAttribute()]
	public class DataPoint : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string timestamp;
		public string value;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("timestamp", ref timestamp);
			s.Serialize("value", ref value);
		}
	}
	[System.SerializableAttribute()]
	public class ServiceStatus : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public bool isCurrent;
		public bool running;
		public string serviceName;
		public string imageId;
		public OptionalServiceDependencyReferenceArray serviceDependencyReferences = new OptionalServiceDependencyReferenceArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("isCurrent", ref isCurrent);
			s.Serialize("running", ref running);
			s.Serialize("serviceName", ref serviceName);
			s.Serialize("imageId", ref imageId);
			if ((s.HasKey("serviceDependencyReferences")
						|| ((serviceDependencyReferences != default(OptionalServiceDependencyReferenceArray))
						&& serviceDependencyReferences.HasValue)))
			{
				s.SerializeArray("serviceDependencyReferences", ref serviceDependencyReferences.Value);
				serviceDependencyReferences.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class PASuggestedIndex : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string weight;
		public string[] impact;
		public string id;
		public string namespaceKey;
		public string[] index;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("weight", ref weight);
			s.SerializeArray("impact", ref impact);
			s.Serialize("id", ref id);
			s.Serialize("namespace", ref namespaceKey);
			s.SerializeArray("index", ref index);
		}
	}
	[System.SerializableAttribute()]
	public class GetLambdaURI : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string uri;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("uri", ref uri);
		}
	}
	[System.SerializableAttribute()]
	public class GetManifestResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ManifestView manifest = new ManifestView();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class DatabaseMeasurements : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalDatabaseMeasurementArray measurements = new OptionalDatabaseMeasurementArray();
		public OptionalString groupId = new OptionalString();
		public Link[] links;
		public OptionalString hostId = new OptionalString();
		public OptionalString granularity = new OptionalString();
		public OptionalString end = new OptionalString();
		public string databaseName;
		public OptionalString start = new OptionalString();
		public OptionalString processId = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("measurements")
						|| ((measurements != default(OptionalDatabaseMeasurementArray))
						&& measurements.HasValue)))
			{
				s.SerializeArray("measurements", ref measurements.Value);
				measurements.HasValue = true;
			}
			if ((s.HasKey("groupId")
						|| ((groupId != default(OptionalString))
						&& groupId.HasValue)))
			{
				s.Serialize("groupId", ref groupId.Value);
				groupId.HasValue = true;
			}
			s.SerializeArray("links", ref links);
			if ((s.HasKey("hostId")
						|| ((hostId != default(OptionalString))
						&& hostId.HasValue)))
			{
				s.Serialize("hostId", ref hostId.Value);
				hostId.HasValue = true;
			}
			if ((s.HasKey("granularity")
						|| ((granularity != default(OptionalString))
						&& granularity.HasValue)))
			{
				s.Serialize("granularity", ref granularity.Value);
				granularity.HasValue = true;
			}
			if ((s.HasKey("end")
						|| ((end != default(OptionalString))
						&& end.HasValue)))
			{
				s.Serialize("end", ref end.Value);
				end.HasValue = true;
			}
			s.Serialize("databaseName", ref databaseName);
			if ((s.HasKey("start")
						|| ((start != default(OptionalString))
						&& start.HasValue)))
			{
				s.Serialize("start", ref start.Value);
				start.HasValue = true;
			}
			if ((s.HasKey("processId")
						|| ((processId != default(OptionalString))
						&& processId.HasValue)))
			{
				s.Serialize("processId", ref processId.Value);
				processId.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ServiceReference : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong containerHealthCheckPort = new OptionalLong();
		public bool archived;
		public string serviceName;
		public bool enabled;
		public bool arm;
		public string checksum;
		public string templateId;
		public string imageId;
		public OptionalString imageCpuArch = new OptionalString();
		public OptionalServiceDependencyReferenceArray dependencies = new OptionalServiceDependencyReferenceArray();
		public OptionalString comments = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("containerHealthCheckPort")
						|| ((containerHealthCheckPort != default(OptionalLong))
						&& containerHealthCheckPort.HasValue)))
			{
				s.Serialize("containerHealthCheckPort", ref containerHealthCheckPort.Value);
				containerHealthCheckPort.HasValue = true;
			}
			s.Serialize("archived", ref archived);
			s.Serialize("serviceName", ref serviceName);
			s.Serialize("enabled", ref enabled);
			s.Serialize("arm", ref arm);
			s.Serialize("checksum", ref checksum);
			s.Serialize("templateId", ref templateId);
			s.Serialize("imageId", ref imageId);
			if ((s.HasKey("imageCpuArch")
						|| ((imageCpuArch != default(OptionalString))
						&& imageCpuArch.HasValue)))
			{
				s.Serialize("imageCpuArch", ref imageCpuArch.Value);
				imageCpuArch.HasValue = true;
			}
			if ((s.HasKey("dependencies")
						|| ((dependencies != default(OptionalServiceDependencyReferenceArray))
						&& dependencies.HasValue)))
			{
				s.SerializeArray("dependencies", ref dependencies.Value);
				dependencies.HasValue = true;
			}
			if ((s.HasKey("comments")
						|| ((comments != default(OptionalString))
						&& comments.HasValue)))
			{
				s.Serialize("comments", ref comments.Value);
				comments.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GetStatusResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ServiceStatus[] services;
		public bool isCurrent;
		public OptionalServiceStorageStatusArray storageStatuses = new OptionalServiceStorageStatusArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("services", ref services);
			s.Serialize("isCurrent", ref isCurrent);
			if ((s.HasKey("storageStatuses")
						|| ((storageStatuses != default(OptionalServiceStorageStatusArray))
						&& storageStatuses.HasValue)))
			{
				s.SerializeArray("storageStatuses", ref storageStatuses.Value);
				storageStatuses.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class EmptyResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string result;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("result", ref result);
		}
	}
	[System.SerializableAttribute()]
	public class PerformanceResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public PANamespace[] namespaces;
		public PASuggestedIndex[] indexes;
		public PASlowQuery[] queries;
		public DatabaseMeasurements databaseMeasurements = new DatabaseMeasurements();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("namespaces", ref namespaces);
			s.SerializeArray("indexes", ref indexes);
			s.SerializeArray("queries", ref queries);
		}
	}
	[System.SerializableAttribute()]
	public class GetTemplatesResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ServiceTemplate[] templates;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("templates", ref templates);
		}
	}
	[System.SerializableAttribute()]
	public class ServiceStorageReference : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public bool archived;
		public bool enabled;
		public string storageType;
		public string id;
		public string checksum;
		public OptionalString templateId = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("archived", ref archived);
			s.Serialize("enabled", ref enabled);
			s.Serialize("storageType", ref storageType);
			s.Serialize("id", ref id);
			s.Serialize("checksum", ref checksum);
			if ((s.HasKey("templateId")
						|| ((templateId != default(OptionalString))
						&& templateId.HasValue)))
			{
				s.Serialize("templateId", ref templateId.Value);
				templateId.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ManifestChecksums : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ManifestChecksum[] manifests;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("manifests", ref manifests);
		}
	}
	[System.SerializableAttribute()]
	public class GetCurrentManifestResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ManifestView manifest = new ManifestView();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class PostManifestResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalManifestChecksum manifest = new OptionalManifestChecksum();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class GetMetricsUrlRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong startTime = new OptionalLong();
		public string serviceName;
		public string metricName;
		public OptionalLong endTime = new OptionalLong();
		public OptionalInt period = new OptionalInt();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("startTime")
						|| ((startTime != default(OptionalLong))
						&& startTime.HasValue)))
			{
				s.Serialize("startTime", ref startTime.Value);
				startTime.HasValue = true;
			}
			s.Serialize("serviceName", ref serviceName);
			s.Serialize("metricName", ref metricName);
			if ((s.HasKey("endTime")
						|| ((endTime != default(OptionalLong))
						&& endTime.HasValue)))
			{
				s.Serialize("endTime", ref endTime.Value);
				endTime.HasValue = true;
			}
			if ((s.HasKey("period")
						|| ((period != default(OptionalInt))
						&& period.HasValue)))
			{
				s.Serialize("period", ref period.Value);
				period.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GetElasticContainerRegistryURI : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string uri;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("uri", ref uri);
		}
	}
	[System.SerializableAttribute()]
	public class PANamespace : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string namespaceKey;
		public string type;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("namespace", ref namespaceKey);
			s.Serialize("type", ref type);
		}
	}
	[System.SerializableAttribute()]
	public class Link : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string href;
		public string rel;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("href", ref href);
			s.Serialize("rel", ref rel);
		}
	}
	[System.SerializableAttribute()]
	public class EventInventoryRewardItem : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public OptionalMapOfString properties = new OptionalMapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			if ((s.HasKey("properties")
						|| ((properties != default(OptionalMapOfString))
						&& properties.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("properties", ref properties.Value);
				properties.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ItemCreateRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string contentId;
		public ItemProperty[] properties;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("contentId", ref contentId);
			s.SerializeArray("properties", ref properties);
		}
	}
	[System.SerializableAttribute()]
	public class EventClaimResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public EventPlayerStateView view = new EventPlayerStateView();
		public string gameRspJson;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("gameRspJson", ref gameRspJson);
		}
	}
	[System.SerializableAttribute()]
	public class EventPlayerView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public EventPlayerStateView[] running;
		public EventPlayerStateView[] done;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("running", ref running);
			s.SerializeArray("done", ref done);
		}
	}
	[System.SerializableAttribute()]
	public class CommonResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string result;
		public MapOfString data = new MapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("result", ref result);
			s.SerializeDictionary<MapOfString, string>("data", ref data);
		}
	}
	[System.SerializableAttribute()]
	public class EventRewardState : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public EventInventoryPendingRewards pendingInventoryRewards = new EventInventoryPendingRewards();
		public OptionalEventInventoryRewardCurrencyArray currencies = new OptionalEventInventoryRewardCurrencyArray();
		public OptionalMapOfString pendingCurrencyRewards = new OptionalMapOfString();
		public OptionalItemCreateRequestArray pendingItemRewards = new OptionalItemCreateRequestArray();
		public OptionalEventInventoryRewardItemArray items = new OptionalEventInventoryRewardItemArray();
		public double min;
		public OptionalDouble max = new OptionalDouble();
		public bool earned;
		public bool claimed;
		public OptionalMapOfString pendingEntitlementRewards = new OptionalMapOfString();
		public OptionalEventRewardObtainArray obtain = new OptionalEventRewardObtainArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("currencies")
						|| ((currencies != default(OptionalEventInventoryRewardCurrencyArray))
						&& currencies.HasValue)))
			{
				s.SerializeArray("currencies", ref currencies.Value);
				currencies.HasValue = true;
			}
			if ((s.HasKey("pendingCurrencyRewards")
						|| ((pendingCurrencyRewards != default(OptionalMapOfString))
						&& pendingCurrencyRewards.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("pendingCurrencyRewards", ref pendingCurrencyRewards.Value);
				pendingCurrencyRewards.HasValue = true;
			}
			if ((s.HasKey("pendingItemRewards")
						|| ((pendingItemRewards != default(OptionalItemCreateRequestArray))
						&& pendingItemRewards.HasValue)))
			{
				s.SerializeArray("pendingItemRewards", ref pendingItemRewards.Value);
				pendingItemRewards.HasValue = true;
			}
			if ((s.HasKey("items")
						|| ((items != default(OptionalEventInventoryRewardItemArray))
						&& items.HasValue)))
			{
				s.SerializeArray("items", ref items.Value);
				items.HasValue = true;
			}
			s.Serialize("min", ref min);
			if ((s.HasKey("max")
						|| ((max != default(OptionalDouble))
						&& max.HasValue)))
			{
				s.Serialize("max", ref max.Value);
				max.HasValue = true;
			}
			s.Serialize("earned", ref earned);
			s.Serialize("claimed", ref claimed);
			if ((s.HasKey("pendingEntitlementRewards")
						|| ((pendingEntitlementRewards != default(OptionalMapOfString))
						&& pendingEntitlementRewards.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("pendingEntitlementRewards", ref pendingEntitlementRewards.Value);
				pendingEntitlementRewards.HasValue = true;
			}
			if ((s.HasKey("obtain")
						|| ((obtain != default(OptionalEventRewardObtainArray))
						&& obtain.HasValue)))
			{
				s.SerializeArray("obtain", ref obtain.Value);
				obtain.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class EventScoreRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string eventId;
		public double score;
		public OptionalBool increment = new OptionalBool();
		public OptionalMapOfString stats = new OptionalMapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("eventId", ref eventId);
			s.Serialize("score", ref score);
			if ((s.HasKey("increment")
						|| ((increment != default(OptionalBool))
						&& increment.HasValue)))
			{
				s.Serialize("increment", ref increment.Value);
				increment.HasValue = true;
			}
			if ((s.HasKey("stats")
						|| ((stats != default(OptionalMapOfString))
						&& stats.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("stats", ref stats.Value);
				stats.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class EventRewardObtain : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string symbol;
		public int count;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("symbol", ref symbol);
			s.Serialize("count", ref count);
		}
	}
	[System.SerializableAttribute()]
	public class EventClaimRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string eventId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("eventId", ref eventId);
		}
	}
	[System.SerializableAttribute()]
	public class EventInventoryRewardCurrency : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public long amount;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.Serialize("amount", ref amount);
		}
	}
	[System.SerializableAttribute()]
	public class EventInventoryPendingRewards : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalMapOfString currencies = new OptionalMapOfString();
		public OptionalItemCreateRequestArray items = new OptionalItemCreateRequestArray();
		public bool empty;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("currencies")
						|| ((currencies != default(OptionalMapOfString))
						&& currencies.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("currencies", ref currencies.Value);
				currencies.HasValue = true;
			}
			if ((s.HasKey("items")
						|| ((items != default(OptionalItemCreateRequestArray))
						&& items.HasValue)))
			{
				s.SerializeArray("items", ref items.Value);
				items.HasValue = true;
			}
			s.Serialize("empty", ref empty);
		}
	}
	[System.SerializableAttribute()]
	public class EventPlayerStateView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public bool running;
		public EventPlayerPhaseView[] allPhases;
		public long rank;
		public double score;
		public OptionalEventPlayerPhaseView currentPhase = new OptionalEventPlayerPhaseView();
		public long secondsRemaining;
		public string id;
		public string leaderboardId;
		public EventRewardState[] rankRewards;
		public OptionalEventPlayerGroupState groupRewards = new OptionalEventPlayerGroupState();
		public EventRewardState[] scoreRewards;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("running", ref running);
			s.SerializeArray("allPhases", ref allPhases);
			s.Serialize("rank", ref rank);
			s.Serialize("score", ref score);
			s.Serialize("secondsRemaining", ref secondsRemaining);
			s.Serialize("id", ref id);
			s.Serialize("leaderboardId", ref leaderboardId);
			s.SerializeArray("rankRewards", ref rankRewards);
			s.SerializeArray("scoreRewards", ref scoreRewards);
		}
	}
	[System.SerializableAttribute()]
	public class EventPlayerPhaseView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public long durationSeconds;
		public EventRule[] rules;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("durationSeconds", ref durationSeconds);
			s.SerializeArray("rules", ref rules);
		}
	}
	[System.SerializableAttribute()]
	public class ItemProperty : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string value;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("value", ref value);
		}
	}
	[System.SerializableAttribute()]
	public class EventRule : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string rule;
		public string value;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("rule", ref rule);
			s.Serialize("value", ref value);
		}
	}
	[System.SerializableAttribute()]
	public class EventPlayerGroupState : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public double groupScore;
		public OptionalString groupId = new OptionalString();
		public EventRewardState[] rankRewards;
		public long groupRank;
		public EventRewardState[] scoreRewards;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("groupScore", ref groupScore);
			if ((s.HasKey("groupId")
						|| ((groupId != default(OptionalString))
						&& groupId.HasValue)))
			{
				s.Serialize("groupId", ref groupId.Value);
				groupId.HasValue = true;
			}
			s.SerializeArray("rankRewards", ref rankRewards);
			s.Serialize("groupRank", ref groupRank);
			s.SerializeArray("scoreRewards", ref scoreRewards);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardCohort : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public OptionalString description = new OptionalString();
		public PlayerStatRequirement[] statRequirements;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			if ((s.HasKey("description")
						|| ((description != default(OptionalString))
						&& description.HasValue)))
			{
				s.Serialize("description", ref description.Value);
				description.HasValue = true;
			}
			s.SerializeArray("statRequirements", ref statRequirements);
		}
	}
	[System.SerializableAttribute()]
	public class InFlightMessage : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string method;
		public string body;
		public string path;
		public OptionalLong gamerTag = new OptionalLong();
		public OptionalString shard = new OptionalString();
		public string service;
		public string id;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("method", ref method);
			s.Serialize("body", ref body);
			s.Serialize("path", ref path);
			if ((s.HasKey("gamerTag")
						|| ((gamerTag != default(OptionalLong))
						&& gamerTag.HasValue)))
			{
				s.Serialize("gamerTag", ref gamerTag.Value);
				gamerTag.HasValue = true;
			}
			if ((s.HasKey("shard")
						|| ((shard != default(OptionalString))
						&& shard.HasValue)))
			{
				s.Serialize("shard", ref shard.Value);
				shard.HasValue = true;
			}
			s.Serialize("service", ref service);
			s.Serialize("id", ref id);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardCohortSettings : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public LeaderboardCohort[] cohorts;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("cohorts", ref cohorts);
		}
	}
	[System.SerializableAttribute()]
	public class Event : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string start_date;
		public EventPhase[] phases;
		public OptionalInt partition_size = new OptionalInt();
		public OptionalEventGroupRewards group_rewards = new OptionalEventGroupRewards();
		public OptionalLeaderboardCohortSettings cohortSettings = new OptionalLeaderboardCohortSettings();
		public OptionalClientPermission permissions = new OptionalClientPermission();
		public OptionalStringArray stores = new OptionalStringArray();
		public string symbol;
		public OptionalEventRewardContentArray score_rewards = new OptionalEventRewardContentArray();
		public OptionalSchedule schedule = new OptionalSchedule();
		public OptionalEventRewardContentArray rank_rewards = new OptionalEventRewardContentArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("start_date", ref start_date);
			s.SerializeArray("phases", ref phases);
			if ((s.HasKey("partition_size")
						|| ((partition_size != default(OptionalInt))
						&& partition_size.HasValue)))
			{
				s.Serialize("partition_size", ref partition_size.Value);
				partition_size.HasValue = true;
			}
			if ((s.HasKey("stores")
						|| ((stores != default(OptionalStringArray))
						&& stores.HasValue)))
			{
				s.SerializeArray("stores", ref stores.Value);
				stores.HasValue = true;
			}
			s.Serialize("symbol", ref symbol);
			if ((s.HasKey("score_rewards")
						|| ((score_rewards != default(OptionalEventRewardContentArray))
						&& score_rewards.HasValue)))
			{
				s.SerializeArray("score_rewards", ref score_rewards.Value);
				score_rewards.HasValue = true;
			}
			if ((s.HasKey("rank_rewards")
						|| ((rank_rewards != default(OptionalEventRewardContentArray))
						&& rank_rewards.HasValue)))
			{
				s.SerializeArray("rank_rewards", ref rank_rewards.Value);
				rank_rewards.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class EventPhaseTime : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public OptionalLong startTime = new OptionalLong();
		public OptionalLong endTime = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			if ((s.HasKey("startTime")
						|| ((startTime != default(OptionalLong))
						&& startTime.HasValue)))
			{
				s.Serialize("startTime", ref startTime.Value);
				startTime.HasValue = true;
			}
			if ((s.HasKey("endTime")
						|| ((endTime != default(OptionalLong))
						&& endTime.HasValue)))
			{
				s.Serialize("endTime", ref endTime.Value);
				endTime.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class EventQueryResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public EventObjectData[] events;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("events", ref events);
		}
	}
	[System.SerializableAttribute()]
	public class PlayerStatRequirement : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString domain = new OptionalString();
		public string stat;
		public string constraint;
		public string value;
		public OptionalString access = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("domain")
						|| ((domain != default(OptionalString))
						&& domain.HasValue)))
			{
				s.Serialize("domain", ref domain.Value);
				domain.HasValue = true;
			}
			s.Serialize("stat", ref stat);
			s.Serialize("constraint", ref constraint);
			s.Serialize("value", ref value);
			if ((s.HasKey("access")
						|| ((access != default(OptionalString))
						&& access.HasValue)))
			{
				s.Serialize("access", ref access.Value);
				access.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class EventGroupRewards : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalEventRewardContentArray scoreRewards = new OptionalEventRewardContentArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("scoreRewards")
						|| ((scoreRewards != default(OptionalEventRewardContentArray))
						&& scoreRewards.HasValue)))
			{
				s.SerializeArray("scoreRewards", ref scoreRewards.Value);
				scoreRewards.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class EventsWithinDateRangeRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString from = new OptionalString();
		public OptionalString to = new OptionalString();
		public OptionalString query = new OptionalString();
		public OptionalInt limit = new OptionalInt();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("from")
						|| ((from != default(OptionalString))
						&& from.HasValue)))
			{
				s.Serialize("from", ref from.Value);
				from.HasValue = true;
			}
			if ((s.HasKey("to")
						|| ((to != default(OptionalString))
						&& to.HasValue)))
			{
				s.Serialize("to", ref to.Value);
				to.HasValue = true;
			}
			if ((s.HasKey("query")
						|| ((query != default(OptionalString))
						&& query.HasValue)))
			{
				s.Serialize("query", ref query.Value);
				query.HasValue = true;
			}
			if ((s.HasKey("limit")
						|| ((limit != default(OptionalInt))
						&& limit.HasValue)))
			{
				s.Serialize("limit", ref limit.Value);
				limit.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ClientPermission : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public bool write_self;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("write_self", ref write_self);
		}
	}
	[System.SerializableAttribute()]
	public class EventRewardContent : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalEventInventoryRewardCurrencyArray currencies = new OptionalEventInventoryRewardCurrencyArray();
		public OptionalEventInventoryRewardItemArray items = new OptionalEventInventoryRewardItemArray();
		public double min;
		public OptionalDouble max = new OptionalDouble();
		public OptionalEventRewardObtainArray obtain = new OptionalEventRewardObtainArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("currencies")
						|| ((currencies != default(OptionalEventInventoryRewardCurrencyArray))
						&& currencies.HasValue)))
			{
				s.SerializeArray("currencies", ref currencies.Value);
				currencies.HasValue = true;
			}
			if ((s.HasKey("items")
						|| ((items != default(OptionalEventInventoryRewardItemArray))
						&& items.HasValue)))
			{
				s.SerializeArray("items", ref items.Value);
				items.HasValue = true;
			}
			s.Serialize("min", ref min);
			if ((s.HasKey("max")
						|| ((max != default(OptionalDouble))
						&& max.HasValue)))
			{
				s.Serialize("max", ref max.Value);
				max.HasValue = true;
			}
			if ((s.HasKey("obtain")
						|| ((obtain != default(OptionalEventRewardObtainArray))
						&& obtain.HasValue)))
			{
				s.SerializeArray("obtain", ref obtain.Value);
				obtain.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class EventPhaseRuntime : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public long startTime;
		public long endTime;
		public EventRule[] rules;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("startTime", ref startTime);
			s.Serialize("endTime", ref endTime);
			s.SerializeArray("rules", ref rules);
		}
	}
	[System.SerializableAttribute()]
	public class EventDateRanges : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string state;
		public string id;
		public DateRange[] dates;
		public OptionalLong createdAt = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("state", ref state);
			s.Serialize("id", ref id);
			s.SerializeArray("dates", ref dates);
			if ((s.HasKey("createdAt")
						|| ((createdAt != default(OptionalLong))
						&& createdAt.HasValue)))
			{
				s.Serialize("createdAt", ref createdAt.Value);
				createdAt.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class EventObjectData : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInFlightMessageArray inFlight = new OptionalInFlightMessageArray();
		public OptionalLong startTime = new OptionalLong();
		public OptionalString rootEventId = new OptionalString();
		public OptionalString originType = new OptionalString();
		public EventState state;
		public bool running;
		public OptionalEventPhaseRuntime phase = new OptionalEventPhaseRuntime();
		public OptionalClientPermission permissions = new OptionalClientPermission();
		public OptionalString lastChildEventId = new OptionalString();
		public OptionalLong endTime = new OptionalLong();
		public string id;
		public OptionalString origin = new OptionalString();
		public OptionalLong createdAt = new OptionalLong();
		public Event content = new Event();
		public bool done;
		public string leaderboardId;
		public OptionalEventPhaseTimeArray phaseTimes = new OptionalEventPhaseTimeArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("inFlight")
						|| ((inFlight != default(OptionalInFlightMessageArray))
						&& inFlight.HasValue)))
			{
				s.SerializeArray("inFlight", ref inFlight.Value);
				inFlight.HasValue = true;
			}
			if ((s.HasKey("startTime")
						|| ((startTime != default(OptionalLong))
						&& startTime.HasValue)))
			{
				s.Serialize("startTime", ref startTime.Value);
				startTime.HasValue = true;
			}
			if ((s.HasKey("rootEventId")
						|| ((rootEventId != default(OptionalString))
						&& rootEventId.HasValue)))
			{
				s.Serialize("rootEventId", ref rootEventId.Value);
				rootEventId.HasValue = true;
			}
			if ((s.HasKey("originType")
						|| ((originType != default(OptionalString))
						&& originType.HasValue)))
			{
				s.Serialize("originType", ref originType.Value);
				originType.HasValue = true;
			}
			s.Serialize("state", ref state);
			s.Serialize("running", ref running);
			if ((s.HasKey("lastChildEventId")
						|| ((lastChildEventId != default(OptionalString))
						&& lastChildEventId.HasValue)))
			{
				s.Serialize("lastChildEventId", ref lastChildEventId.Value);
				lastChildEventId.HasValue = true;
			}
			if ((s.HasKey("endTime")
						|| ((endTime != default(OptionalLong))
						&& endTime.HasValue)))
			{
				s.Serialize("endTime", ref endTime.Value);
				endTime.HasValue = true;
			}
			s.Serialize("id", ref id);
			if ((s.HasKey("origin")
						|| ((origin != default(OptionalString))
						&& origin.HasValue)))
			{
				s.Serialize("origin", ref origin.Value);
				origin.HasValue = true;
			}
			if ((s.HasKey("createdAt")
						|| ((createdAt != default(OptionalLong))
						&& createdAt.HasValue)))
			{
				s.Serialize("createdAt", ref createdAt.Value);
				createdAt.HasValue = true;
			}
			s.Serialize("done", ref done);
			s.Serialize("leaderboardId", ref leaderboardId);
			if ((s.HasKey("phaseTimes")
						|| ((phaseTimes != default(OptionalEventPhaseTimeArray))
						&& phaseTimes.HasValue)))
			{
				s.SerializeArray("phaseTimes", ref phaseTimes.Value);
				phaseTimes.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class DateRange : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string from;
		public string to;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("from", ref from);
			s.Serialize("to", ref to);
		}
	}
	[System.SerializableAttribute()]
	public class EventState : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class EventsInDateRangeResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public EventDateRanges[] eventInDateRange;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("eventInDateRange", ref eventInDateRange);
		}
	}
	[System.SerializableAttribute()]
	public class EventApplyRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public Event content = new Event();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class Schedule : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString description = new OptionalString();
		public OptionalStringArray crons = new OptionalStringArray();
		public OptionalString activeTo = new OptionalString();
		public string activeFrom;
		public OptionalScheduleDefinitionArray definitions = new OptionalScheduleDefinitionArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("description")
						|| ((description != default(OptionalString))
						&& description.HasValue)))
			{
				s.Serialize("description", ref description.Value);
				description.HasValue = true;
			}
			if ((s.HasKey("crons")
						|| ((crons != default(OptionalStringArray))
						&& crons.HasValue)))
			{
				s.SerializeArray("crons", ref crons.Value);
				crons.HasValue = true;
			}
			if ((s.HasKey("activeTo")
						|| ((activeTo != default(OptionalString))
						&& activeTo.HasValue)))
			{
				s.Serialize("activeTo", ref activeTo.Value);
				activeTo.HasValue = true;
			}
			s.Serialize("activeFrom", ref activeFrom);
			if ((s.HasKey("definitions")
						|| ((definitions != default(OptionalScheduleDefinitionArray))
						&& definitions.HasValue)))
			{
				s.SerializeArray("definitions", ref definitions.Value);
				definitions.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ScheduleDefinition : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string[] dayOfWeek;
		public string[] minute;
		public string[] dayOfMonth;
		public string[] year;
		public string[] hour;
		public string[] second;
		public string[] month;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("dayOfWeek", ref dayOfWeek);
			s.SerializeArray("minute", ref minute);
			s.SerializeArray("dayOfMonth", ref dayOfMonth);
			s.SerializeArray("year", ref year);
			s.SerializeArray("hour", ref hour);
			s.SerializeArray("second", ref second);
			s.SerializeArray("month", ref month);
		}
	}
	[System.SerializableAttribute()]
	public class EventPhase : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public int duration_minutes;
		public long durationMillis;
		public OptionalEventRuleArray rules = new OptionalEventRuleArray();
		public long durationSeconds;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("duration_minutes", ref duration_minutes);
			s.Serialize("durationMillis", ref durationMillis);
			if ((s.HasKey("rules")
						|| ((rules != default(OptionalEventRuleArray))
						&& rules.HasValue)))
			{
				s.SerializeArray("rules", ref rules.Value);
				rules.HasValue = true;
			}
			s.Serialize("durationSeconds", ref durationSeconds);
		}
	}
	[System.SerializableAttribute()]
	public class EventContentResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public Event[] content;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("content", ref content);
		}
	}
	[System.SerializableAttribute()]
	public class EventPhaseEndRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString time = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("time")
						|| ((time != default(OptionalString))
						&& time.HasValue)))
			{
				s.Serialize("time", ref time.Value);
				time.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class PingRsp : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public bool keepAlive;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("keepAlive", ref keepAlive);
		}
	}
	[System.SerializableAttribute()]
	public class SetContentRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public Event eventKey = new Event();
		public string origin;
		public OptionalString rootEventId = new OptionalString();
		public OptionalString originType = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("origin", ref origin);
			if ((s.HasKey("rootEventId")
						|| ((rootEventId != default(OptionalString))
						&& rootEventId.HasValue)))
			{
				s.Serialize("rootEventId", ref rootEventId.Value);
				rootEventId.HasValue = true;
			}
			if ((s.HasKey("originType")
						|| ((originType != default(OptionalString))
						&& originType.HasValue)))
			{
				s.Serialize("originType", ref originType.Value);
				originType.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GroupCreate : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string enrollmentType;
		public OptionalString tag = new OptionalString();
		public long requirement;
		public OptionalString clientData = new OptionalString();
		public OptionalGroupScoreBindingArray scores = new OptionalGroupScoreBindingArray();
		public OptionalMapOfObject time = new OptionalMapOfObject();
		public GroupType type;
		public int maxSize;
		public OptionalLong group = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("enrollmentType", ref enrollmentType);
			if ((s.HasKey("tag")
						|| ((tag != default(OptionalString))
						&& tag.HasValue)))
			{
				s.Serialize("tag", ref tag.Value);
				tag.HasValue = true;
			}
			s.Serialize("requirement", ref requirement);
			if ((s.HasKey("clientData")
						|| ((clientData != default(OptionalString))
						&& clientData.HasValue)))
			{
				s.Serialize("clientData", ref clientData.Value);
				clientData.HasValue = true;
			}
			if ((s.HasKey("scores")
						|| ((scores != default(OptionalGroupScoreBindingArray))
						&& scores.HasValue)))
			{
				s.SerializeArray("scores", ref scores.Value);
				scores.HasValue = true;
			}
			if ((s.HasKey("time")
						|| ((time != default(OptionalMapOfObject))
						&& time.HasValue)))
			{
				s.SerializeDictionary<MapOfObject, object>("time", ref time.Value);
				time.HasValue = true;
			}
			s.Serialize("type", ref type);
			s.Serialize("maxSize", ref maxSize);
			if ((s.HasKey("group")
						|| ((group != default(OptionalLong))
						&& group.HasValue)))
			{
				s.Serialize("group", ref group.Value);
				group.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class DonationEntry : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long playerId;
		public long amount;
		public long time;
		public OptionalBool claimed = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
			s.Serialize("amount", ref amount);
			s.Serialize("time", ref time);
			if ((s.HasKey("claimed")
						|| ((claimed != default(OptionalBool))
						&& claimed.HasValue)))
			{
				s.Serialize("claimed", ref claimed.Value);
				claimed.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GroupType : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class Member : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalBool canDemote = new OptionalBool();
		public OptionalBool canKick = new OptionalBool();
		public string role;
		public long gamerTag;
		public OptionalBool canPromote = new OptionalBool();
		public OptionalGroupScoreBindingArray scores = new OptionalGroupScoreBindingArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("canDemote")
						|| ((canDemote != default(OptionalBool))
						&& canDemote.HasValue)))
			{
				s.Serialize("canDemote", ref canDemote.Value);
				canDemote.HasValue = true;
			}
			if ((s.HasKey("canKick")
						|| ((canKick != default(OptionalBool))
						&& canKick.HasValue)))
			{
				s.Serialize("canKick", ref canKick.Value);
				canKick.HasValue = true;
			}
			s.Serialize("role", ref role);
			s.Serialize("gamerTag", ref gamerTag);
			if ((s.HasKey("canPromote")
						|| ((canPromote != default(OptionalBool))
						&& canPromote.HasValue)))
			{
				s.Serialize("canPromote", ref canPromote.Value);
				canPromote.HasValue = true;
			}
			if ((s.HasKey("scores")
						|| ((scores != default(OptionalGroupScoreBindingArray))
						&& scores.HasValue)))
			{
				s.SerializeArray("scores", ref scores.Value);
				scores.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GroupMembershipResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong gamerTag = new OptionalLong();
		public bool member;
		public GroupType type;
		public long[] subGroups;
		public GroupMetaData group = new GroupMetaData();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("gamerTag")
						|| ((gamerTag != default(OptionalLong))
						&& gamerTag.HasValue)))
			{
				s.Serialize("gamerTag", ref gamerTag.Value);
				gamerTag.HasValue = true;
			}
			s.Serialize("member", ref member);
			s.Serialize("type", ref type);
			s.SerializeArray("subGroups", ref subGroups);
		}
	}
	[System.SerializableAttribute()]
	public class GroupRole : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string[] permissions;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.SerializeArray("permissions", ref permissions);
		}
	}
	[System.SerializableAttribute()]
	public class AvailabilityResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public bool name;
		public bool tag;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("tag", ref tag);
		}
	}
	[System.SerializableAttribute()]
	public class DonationRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long timeRequested;
		public DonationEntry[] progress;
		public bool satisfied;
		public long playerId;
		public Currency currency = new Currency();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("timeRequested", ref timeRequested);
			s.SerializeArray("progress", ref progress);
			s.Serialize("satisfied", ref satisfied);
			s.Serialize("playerId", ref playerId);
		}
	}
	[System.SerializableAttribute()]
	public class GroupCreateResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public GroupMetaData group = new GroupMetaData();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class GroupSearchResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public Group[] groups;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("groups", ref groups);
		}
	}
	[System.SerializableAttribute()]
	public class GroupUserMember : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long id;
		public GroupUserMember[] subGroups;
		public OptionalLong joined = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.SerializeArray("subGroups", ref subGroups);
			if ((s.HasKey("joined")
						|| ((joined != default(OptionalLong))
						&& joined.HasValue)))
			{
				s.Serialize("joined", ref joined.Value);
				joined.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class CurrencyProperty : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string value;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("value", ref value);
		}
	}
	[System.SerializableAttribute()]
	public class Group : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInFlightMessageArray inFlight = new OptionalInFlightMessageArray();
		public string name;
		public string enrollmentType;
		public OptionalDonationRequestArray donations = new OptionalDonationRequestArray();
		public int freeSlots;
		public OptionalMapOfDonationRequest maybeDonations = new OptionalMapOfDonationRequest();
		public OptionalString tag = new OptionalString();
		public OptionalBool canUpdateMOTD = new OptionalBool();
		public OptionalString shard = new OptionalString();
		public OptionalBool canUpdateSlogan = new OptionalBool();
		public long leader;
		public string slogan;
		public long requirement;
		public string motd;
		public OptionalInt version = new OptionalInt();
		public long id;
		public OptionalString clientData = new OptionalString();
		public OptionalGroupRoleArray roles = new OptionalGroupRoleArray();
		public MapOfString scores = new MapOfString();
		public OptionalBool canUpdateEnrollment = new OptionalBool();
		public Member[] members;
		public OptionalBool canDisband = new OptionalBool();
		public GroupType type;
		public int maxSize;
		public Group[] subGroups;
		public MapOfObject created = new MapOfObject();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("inFlight")
						|| ((inFlight != default(OptionalInFlightMessageArray))
						&& inFlight.HasValue)))
			{
				s.SerializeArray("inFlight", ref inFlight.Value);
				inFlight.HasValue = true;
			}
			s.Serialize("name", ref name);
			s.Serialize("enrollmentType", ref enrollmentType);
			if ((s.HasKey("donations")
						|| ((donations != default(OptionalDonationRequestArray))
						&& donations.HasValue)))
			{
				s.SerializeArray("donations", ref donations.Value);
				donations.HasValue = true;
			}
			s.Serialize("freeSlots", ref freeSlots);
			if ((s.HasKey("maybeDonations")
						|| ((maybeDonations != default(OptionalMapOfDonationRequest))
						&& maybeDonations.HasValue)))
			{
				s.SerializeDictionary<MapOfDonationRequest, DonationRequest>("maybeDonations", ref maybeDonations.Value);
				maybeDonations.HasValue = true;
			}
			if ((s.HasKey("tag")
						|| ((tag != default(OptionalString))
						&& tag.HasValue)))
			{
				s.Serialize("tag", ref tag.Value);
				tag.HasValue = true;
			}
			if ((s.HasKey("canUpdateMOTD")
						|| ((canUpdateMOTD != default(OptionalBool))
						&& canUpdateMOTD.HasValue)))
			{
				s.Serialize("canUpdateMOTD", ref canUpdateMOTD.Value);
				canUpdateMOTD.HasValue = true;
			}
			if ((s.HasKey("shard")
						|| ((shard != default(OptionalString))
						&& shard.HasValue)))
			{
				s.Serialize("shard", ref shard.Value);
				shard.HasValue = true;
			}
			if ((s.HasKey("canUpdateSlogan")
						|| ((canUpdateSlogan != default(OptionalBool))
						&& canUpdateSlogan.HasValue)))
			{
				s.Serialize("canUpdateSlogan", ref canUpdateSlogan.Value);
				canUpdateSlogan.HasValue = true;
			}
			s.Serialize("leader", ref leader);
			s.Serialize("slogan", ref slogan);
			s.Serialize("requirement", ref requirement);
			s.Serialize("motd", ref motd);
			if ((s.HasKey("version")
						|| ((version != default(OptionalInt))
						&& version.HasValue)))
			{
				s.Serialize("version", ref version.Value);
				version.HasValue = true;
			}
			s.Serialize("id", ref id);
			if ((s.HasKey("clientData")
						|| ((clientData != default(OptionalString))
						&& clientData.HasValue)))
			{
				s.Serialize("clientData", ref clientData.Value);
				clientData.HasValue = true;
			}
			if ((s.HasKey("roles")
						|| ((roles != default(OptionalGroupRoleArray))
						&& roles.HasValue)))
			{
				s.SerializeArray("roles", ref roles.Value);
				roles.HasValue = true;
			}
			s.SerializeDictionary<MapOfString, string>("scores", ref scores);
			if ((s.HasKey("canUpdateEnrollment")
						|| ((canUpdateEnrollment != default(OptionalBool))
						&& canUpdateEnrollment.HasValue)))
			{
				s.Serialize("canUpdateEnrollment", ref canUpdateEnrollment.Value);
				canUpdateEnrollment.HasValue = true;
			}
			s.SerializeArray("members", ref members);
			if ((s.HasKey("canDisband")
						|| ((canDisband != default(OptionalBool))
						&& canDisband.HasValue)))
			{
				s.Serialize("canDisband", ref canDisband.Value);
				canDisband.HasValue = true;
			}
			s.Serialize("type", ref type);
			s.Serialize("maxSize", ref maxSize);
			s.SerializeArray("subGroups", ref subGroups);
			s.SerializeDictionary<MapOfObject, object>("created", ref created);
		}
	}
	[System.SerializableAttribute()]
	public class Currency : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public long amount;
		public OptionalCurrencyPropertyArray properties = new OptionalCurrencyPropertyArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.Serialize("amount", ref amount);
			if ((s.HasKey("properties")
						|| ((properties != default(OptionalCurrencyPropertyArray))
						&& properties.HasValue)))
			{
				s.SerializeArray("properties", ref properties.Value);
				properties.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GroupMembershipRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong successor = new OptionalLong();
		public OptionalLong score = new OptionalLong();
		public OptionalLong subGroup = new OptionalLong();
		public GroupType type;
		public long group;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("successor")
						|| ((successor != default(OptionalLong))
						&& successor.HasValue)))
			{
				s.Serialize("successor", ref successor.Value);
				successor.HasValue = true;
			}
			if ((s.HasKey("score")
						|| ((score != default(OptionalLong))
						&& score.HasValue)))
			{
				s.Serialize("score", ref score.Value);
				score.HasValue = true;
			}
			if ((s.HasKey("subGroup")
						|| ((subGroup != default(OptionalLong))
						&& subGroup.HasValue)))
			{
				s.Serialize("subGroup", ref subGroup.Value);
				subGroup.HasValue = true;
			}
			s.Serialize("type", ref type);
			s.Serialize("group", ref group);
		}
	}
	[System.SerializableAttribute()]
	public class GroupScoreBinding : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string board;
		public string[] derivatives;
		public long score;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("board", ref board);
			s.SerializeArray("derivatives", ref derivatives);
			s.Serialize("score", ref score);
		}
	}
	[System.SerializableAttribute()]
	public class AvailabilityRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString name = new OptionalString();
		public OptionalString tag = new OptionalString();
		public GroupType type;
		public OptionalBool subGroup = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("name")
						|| ((name != default(OptionalString))
						&& name.HasValue)))
			{
				s.Serialize("name", ref name.Value);
				name.HasValue = true;
			}
			if ((s.HasKey("tag")
						|| ((tag != default(OptionalString))
						&& tag.HasValue)))
			{
				s.Serialize("tag", ref tag.Value);
				tag.HasValue = true;
			}
			s.Serialize("type", ref type);
			if ((s.HasKey("subGroup")
						|| ((subGroup != default(OptionalBool))
						&& subGroup.HasValue)))
			{
				s.Serialize("subGroup", ref subGroup.Value);
				subGroup.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GroupSearchRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString name = new OptionalString();
		public OptionalLong scoreMin = new OptionalLong();
		public OptionalString sortField = new OptionalString();
		public OptionalLong userScore = new OptionalLong();
		public OptionalBool hasSlots = new OptionalBool();
		public OptionalString enrollmentTypes = new OptionalString();
		public OptionalInt offset = new OptionalInt();
		public OptionalLong scoreMax = new OptionalLong();
		public OptionalBool subGroup = new OptionalBool();
		public OptionalInt sortValue = new OptionalInt();
		public GroupType type;
		public OptionalInt limit = new OptionalInt();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("name")
						|| ((name != default(OptionalString))
						&& name.HasValue)))
			{
				s.Serialize("name", ref name.Value);
				name.HasValue = true;
			}
			if ((s.HasKey("scoreMin")
						|| ((scoreMin != default(OptionalLong))
						&& scoreMin.HasValue)))
			{
				s.Serialize("scoreMin", ref scoreMin.Value);
				scoreMin.HasValue = true;
			}
			if ((s.HasKey("sortField")
						|| ((sortField != default(OptionalString))
						&& sortField.HasValue)))
			{
				s.Serialize("sortField", ref sortField.Value);
				sortField.HasValue = true;
			}
			if ((s.HasKey("userScore")
						|| ((userScore != default(OptionalLong))
						&& userScore.HasValue)))
			{
				s.Serialize("userScore", ref userScore.Value);
				userScore.HasValue = true;
			}
			if ((s.HasKey("hasSlots")
						|| ((hasSlots != default(OptionalBool))
						&& hasSlots.HasValue)))
			{
				s.Serialize("hasSlots", ref hasSlots.Value);
				hasSlots.HasValue = true;
			}
			if ((s.HasKey("enrollmentTypes")
						|| ((enrollmentTypes != default(OptionalString))
						&& enrollmentTypes.HasValue)))
			{
				s.Serialize("enrollmentTypes", ref enrollmentTypes.Value);
				enrollmentTypes.HasValue = true;
			}
			if ((s.HasKey("offset")
						|| ((offset != default(OptionalInt))
						&& offset.HasValue)))
			{
				s.Serialize("offset", ref offset.Value);
				offset.HasValue = true;
			}
			if ((s.HasKey("scoreMax")
						|| ((scoreMax != default(OptionalLong))
						&& scoreMax.HasValue)))
			{
				s.Serialize("scoreMax", ref scoreMax.Value);
				scoreMax.HasValue = true;
			}
			if ((s.HasKey("subGroup")
						|| ((subGroup != default(OptionalBool))
						&& subGroup.HasValue)))
			{
				s.Serialize("subGroup", ref subGroup.Value);
				subGroup.HasValue = true;
			}
			if ((s.HasKey("sortValue")
						|| ((sortValue != default(OptionalInt))
						&& sortValue.HasValue)))
			{
				s.Serialize("sortValue", ref sortValue.Value);
				sortValue.HasValue = true;
			}
			s.Serialize("type", ref type);
			if ((s.HasKey("limit")
						|| ((limit != default(OptionalInt))
						&& limit.HasValue)))
			{
				s.Serialize("limit", ref limit.Value);
				limit.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GroupMetaData : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long id;
		public OptionalString name = new OptionalString();
		public OptionalString tag = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			if ((s.HasKey("name")
						|| ((name != default(OptionalString))
						&& name.HasValue)))
			{
				s.Serialize("name", ref name.Value);
				name.HasValue = true;
			}
			if ((s.HasKey("tag")
						|| ((tag != default(OptionalString))
						&& tag.HasValue)))
			{
				s.Serialize("tag", ref tag.Value);
				tag.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GroupUser : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInFlightMessageArray inFlight = new OptionalInFlightMessageArray();
		public long gamerTag;
		public GroupUserMember[] allGroups;
		public MapOfObject updated = new MapOfObject();
		public MapOfStringArray member = new MapOfStringArray();
		public OptionalGroupScoreBindingArray scores = new OptionalGroupScoreBindingArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("inFlight")
						|| ((inFlight != default(OptionalInFlightMessageArray))
						&& inFlight.HasValue)))
			{
				s.SerializeArray("inFlight", ref inFlight.Value);
				inFlight.HasValue = true;
			}
			s.Serialize("gamerTag", ref gamerTag);
			s.SerializeArray("allGroups", ref allGroups);
			s.SerializeDictionary<MapOfObject, object>("updated", ref updated);
			s.SerializeDictionary<MapOfStringArray, string[]>("member", ref member);
			if ((s.HasKey("scores")
						|| ((scores != default(OptionalGroupScoreBindingArray))
						&& scores.HasValue)))
			{
				s.SerializeArray("scores", ref scores.Value);
				scores.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GroupInvite : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long gamerTag;
		public OptionalLong subGroup = new OptionalLong();
		public OptionalBool useNewRewardsSystem = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("gamerTag", ref gamerTag);
			if ((s.HasKey("subGroup")
						|| ((subGroup != default(OptionalLong))
						&& subGroup.HasValue)))
			{
				s.Serialize("subGroup", ref subGroup.Value);
				subGroup.HasValue = true;
			}
			if ((s.HasKey("useNewRewardsSystem")
						|| ((useNewRewardsSystem != default(OptionalBool))
						&& useNewRewardsSystem.HasValue)))
			{
				s.Serialize("useNewRewardsSystem", ref useNewRewardsSystem.Value);
				useNewRewardsSystem.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class CreateDonationRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string currencyId;
		public long amount;
		public OptionalString config = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("currencyId", ref currencyId);
			s.Serialize("amount", ref amount);
			if ((s.HasKey("config")
						|| ((config != default(OptionalString))
						&& config.HasValue)))
			{
				s.Serialize("config", ref config.Value);
				config.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class KickRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long gamerTag;
		public OptionalLong subGroup = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("gamerTag", ref gamerTag);
			if ((s.HasKey("subGroup")
						|| ((subGroup != default(OptionalLong))
						&& subGroup.HasValue)))
			{
				s.Serialize("subGroup", ref subGroup.Value);
				subGroup.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GroupUpdate : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString name = new OptionalString();
		public OptionalString enrollmentType = new OptionalString();
		public OptionalString tag = new OptionalString();
		public OptionalString slogan = new OptionalString();
		public OptionalLong requirement = new OptionalLong();
		public OptionalString motd = new OptionalString();
		public OptionalString clientData = new OptionalString();
		public OptionalLong subGroup = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("name")
						|| ((name != default(OptionalString))
						&& name.HasValue)))
			{
				s.Serialize("name", ref name.Value);
				name.HasValue = true;
			}
			if ((s.HasKey("enrollmentType")
						|| ((enrollmentType != default(OptionalString))
						&& enrollmentType.HasValue)))
			{
				s.Serialize("enrollmentType", ref enrollmentType.Value);
				enrollmentType.HasValue = true;
			}
			if ((s.HasKey("tag")
						|| ((tag != default(OptionalString))
						&& tag.HasValue)))
			{
				s.Serialize("tag", ref tag.Value);
				tag.HasValue = true;
			}
			if ((s.HasKey("slogan")
						|| ((slogan != default(OptionalString))
						&& slogan.HasValue)))
			{
				s.Serialize("slogan", ref slogan.Value);
				slogan.HasValue = true;
			}
			if ((s.HasKey("requirement")
						|| ((requirement != default(OptionalLong))
						&& requirement.HasValue)))
			{
				s.Serialize("requirement", ref requirement.Value);
				requirement.HasValue = true;
			}
			if ((s.HasKey("motd")
						|| ((motd != default(OptionalString))
						&& motd.HasValue)))
			{
				s.Serialize("motd", ref motd.Value);
				motd.HasValue = true;
			}
			if ((s.HasKey("clientData")
						|| ((clientData != default(OptionalString))
						&& clientData.HasValue)))
			{
				s.Serialize("clientData", ref clientData.Value);
				clientData.HasValue = true;
			}
			if ((s.HasKey("subGroup")
						|| ((subGroup != default(OptionalLong))
						&& subGroup.HasValue)))
			{
				s.Serialize("subGroup", ref subGroup.Value);
				subGroup.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GroupApplication : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong subGroup = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("subGroup")
						|| ((subGroup != default(OptionalLong))
						&& subGroup.HasValue)))
			{
				s.Serialize("subGroup", ref subGroup.Value);
				subGroup.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class MakeDonationRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long recipientId;
		public long amount;
		public OptionalBool autoClaim = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("recipientId", ref recipientId);
			s.Serialize("amount", ref amount);
			if ((s.HasKey("autoClaim")
						|| ((autoClaim != default(OptionalBool))
						&& autoClaim.HasValue)))
			{
				s.Serialize("autoClaim", ref autoClaim.Value);
				autoClaim.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class RoleChangeRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long gamerTag;
		public string role;
		public OptionalLong subGroup = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("gamerTag", ref gamerTag);
			s.Serialize("role", ref role);
			if ((s.HasKey("subGroup")
						|| ((subGroup != default(OptionalLong))
						&& subGroup.HasValue)))
			{
				s.Serialize("subGroup", ref subGroup.Value);
				subGroup.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class DisbandRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong subGroup = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("subGroup")
						|| ((subGroup != default(OptionalLong))
						&& subGroup.HasValue)))
			{
				s.Serialize("subGroup", ref subGroup.Value);
				subGroup.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class CurrencyContentResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public CurrencyArchetype[] content;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("content", ref content);
		}
	}
	[System.SerializableAttribute()]
	public class CurrencyArchetype : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string symbol;
		public OptionalInventoryProxySettings proxy = new OptionalInventoryProxySettings();
		public OptionalClientPermission clientPermission = new OptionalClientPermission();
		public OptionalLong startingAmount = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("symbol", ref symbol);
			if ((s.HasKey("startingAmount")
						|| ((startingAmount != default(OptionalLong))
						&& startingAmount.HasValue)))
			{
				s.Serialize("startingAmount", ref startingAmount.Value);
				startingAmount.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class InventoryProxySettings : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string service;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("service", ref service);
		}
	}
	[System.SerializableAttribute()]
	public class ItemArchetype : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string symbol;
		public OptionalInventoryProxySettings proxy = new OptionalInventoryProxySettings();
		public OptionalClientPermission clientPermission = new OptionalClientPermission();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("symbol", ref symbol);
		}
	}
	[System.SerializableAttribute()]
	public class ItemContentResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ItemArchetype[] content;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("content", ref content);
		}
	}
	[System.SerializableAttribute()]
	public class ItemGroup : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public Item[] items;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.SerializeArray("items", ref items);
		}
	}
	[System.SerializableAttribute()]
	public class ItemUpdateRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string contentId;
		public long id;
		public ItemProperty[] properties;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("contentId", ref contentId);
			s.Serialize("id", ref id);
			s.SerializeArray("properties", ref properties);
		}
	}
	[System.SerializableAttribute()]
	public class CurrencyPreview : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public long amount;
		public long originalAmount;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.Serialize("amount", ref amount);
			s.Serialize("originalAmount", ref originalAmount);
		}
	}
	[System.SerializableAttribute()]
	public class CurrencyView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public long amount;
		public CurrencyProperty[] properties;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.Serialize("amount", ref amount);
			s.SerializeArray("properties", ref properties);
		}
	}
	[System.SerializableAttribute()]
	public class InventoryView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public CurrencyView[] currencies;
		public ItemGroup[] items;
		public OptionalString scope = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("currencies", ref currencies);
			s.SerializeArray("items", ref items);
			if ((s.HasKey("scope")
						|| ((scope != default(OptionalString))
						&& scope.HasValue)))
			{
				s.Serialize("scope", ref scope.Value);
				scope.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class InventoryGetRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString scope = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("scope")
						|| ((scope != default(OptionalString))
						&& scope.HasValue)))
			{
				s.Serialize("scope", ref scope.Value);
				scope.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class MultipliersGetResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public VipBonus[] multipliers;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("multipliers", ref multipliers);
		}
	}
	[System.SerializableAttribute()]
	public class EndTransactionRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string transaction;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("transaction", ref transaction);
		}
	}
	[System.SerializableAttribute()]
	public class InventoryUpdateRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalMapOfLong currencies = new OptionalMapOfLong();
		public bool empty;
		public OptionalMapOfCurrencyPropertyArray currencyProperties = new OptionalMapOfCurrencyPropertyArray();
		public string[] currencyContentIds;
		public OptionalBool applyVipBonus = new OptionalBool();
		public string[] itemContentIds;
		public OptionalItemUpdateRequestArray updateItems = new OptionalItemUpdateRequestArray();
		public OptionalItemCreateRequestArray newItems = new OptionalItemCreateRequestArray();
		public OptionalString transaction = new OptionalString();
		public OptionalItemDeleteRequestArray deleteItems = new OptionalItemDeleteRequestArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("currencies")
						|| ((currencies != default(OptionalMapOfLong))
						&& currencies.HasValue)))
			{
				s.SerializeDictionary<MapOfLong, long>("currencies", ref currencies.Value);
				currencies.HasValue = true;
			}
			s.Serialize("empty", ref empty);
			if ((s.HasKey("currencyProperties")
						|| ((currencyProperties != default(OptionalMapOfCurrencyPropertyArray))
						&& currencyProperties.HasValue)))
			{
				s.SerializeDictionary<MapOfCurrencyPropertyArray, CurrencyProperty[]>("currencyProperties", ref currencyProperties.Value);
				currencyProperties.HasValue = true;
			}
			s.SerializeArray("currencyContentIds", ref currencyContentIds);
			if ((s.HasKey("applyVipBonus")
						|| ((applyVipBonus != default(OptionalBool))
						&& applyVipBonus.HasValue)))
			{
				s.Serialize("applyVipBonus", ref applyVipBonus.Value);
				applyVipBonus.HasValue = true;
			}
			s.SerializeArray("itemContentIds", ref itemContentIds);
			if ((s.HasKey("updateItems")
						|| ((updateItems != default(OptionalItemUpdateRequestArray))
						&& updateItems.HasValue)))
			{
				s.SerializeArray("updateItems", ref updateItems.Value);
				updateItems.HasValue = true;
			}
			if ((s.HasKey("newItems")
						|| ((newItems != default(OptionalItemCreateRequestArray))
						&& newItems.HasValue)))
			{
				s.SerializeArray("newItems", ref newItems.Value);
				newItems.HasValue = true;
			}
			if ((s.HasKey("transaction")
						|| ((transaction != default(OptionalString))
						&& transaction.HasValue)))
			{
				s.Serialize("transaction", ref transaction.Value);
				transaction.HasValue = true;
			}
			if ((s.HasKey("deleteItems")
						|| ((deleteItems != default(OptionalItemDeleteRequestArray))
						&& deleteItems.HasValue)))
			{
				s.SerializeArray("deleteItems", ref deleteItems.Value);
				deleteItems.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class Item : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong updatedAt = new OptionalLong();
		public OptionalString proxyId = new OptionalString();
		public long id;
		public ItemProperty[] properties;
		public OptionalLong createdAt = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("updatedAt")
						|| ((updatedAt != default(OptionalLong))
						&& updatedAt.HasValue)))
			{
				s.Serialize("updatedAt", ref updatedAt.Value);
				updatedAt.HasValue = true;
			}
			if ((s.HasKey("proxyId")
						|| ((proxyId != default(OptionalString))
						&& proxyId.HasValue)))
			{
				s.Serialize("proxyId", ref proxyId.Value);
				proxyId.HasValue = true;
			}
			s.Serialize("id", ref id);
			s.SerializeArray("properties", ref properties);
			if ((s.HasKey("createdAt")
						|| ((createdAt != default(OptionalLong))
						&& createdAt.HasValue)))
			{
				s.Serialize("createdAt", ref createdAt.Value);
				createdAt.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class InventoryQueryRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalStringArray scopes = new OptionalStringArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("scopes")
						|| ((scopes != default(OptionalStringArray))
						&& scopes.HasValue)))
			{
				s.SerializeArray("scopes", ref scopes.Value);
				scopes.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ItemDeleteRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string contentId;
		public long id;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("contentId", ref contentId);
			s.Serialize("id", ref id);
		}
	}
	[System.SerializableAttribute()]
	public class VipBonus : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string currency;
		public double multiplier;
		public int roundToNearest;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("currency", ref currency);
			s.Serialize("multiplier", ref multiplier);
			s.Serialize("roundToNearest", ref roundToNearest);
		}
	}
	[System.SerializableAttribute()]
	public class PreviewVipBonusResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public CurrencyPreview[] currencies;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("currencies", ref currencies);
		}
	}
	[System.SerializableAttribute()]
	public class TransferRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString transaction = new OptionalString();
		public long recipientPlayer;
		public OptionalMapOfLong currencies = new OptionalMapOfLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("transaction")
						|| ((transaction != default(OptionalString))
						&& transaction.HasValue)))
			{
				s.Serialize("transaction", ref transaction.Value);
				transaction.HasValue = true;
			}
			s.Serialize("recipientPlayer", ref recipientPlayer);
			if ((s.HasKey("currencies")
						|| ((currencies != default(OptionalMapOfLong))
						&& currencies.HasValue)))
			{
				s.SerializeDictionary<MapOfLong, long>("currencies", ref currencies.Value);
				currencies.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class RankEntryStat : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string value;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("value", ref value);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardUidResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long id;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
		}
	}
	[System.SerializableAttribute()]
	public class ListLeaderBoardViewResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string result;
		public LeaderBoardView[] lbs;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("result", ref result);
			s.SerializeArray("lbs", ref lbs);
		}
	}
	[System.SerializableAttribute()]
	public class RankEntry : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalRankEntryStatArray stats = new OptionalRankEntryStatArray();
		public long rank;
		public OptionalDouble score = new OptionalDouble();
		public MapOfLong columns = new MapOfLong();
		public long gt;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("stats")
						|| ((stats != default(OptionalRankEntryStatArray))
						&& stats.HasValue)))
			{
				s.SerializeArray("stats", ref stats.Value);
				stats.HasValue = true;
			}
			s.Serialize("rank", ref rank);
			if ((s.HasKey("score")
						|| ((score != default(OptionalDouble))
						&& score.HasValue)))
			{
				s.Serialize("score", ref score.Value);
				score.HasValue = true;
			}
			s.SerializeDictionary<MapOfLong, long>("columns", ref columns);
			s.Serialize("gt", ref gt);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardPlayerAssignmentRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string boardId;
		public OptionalBool joinBoard = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("boardId", ref boardId);
			if ((s.HasKey("joinBoard")
						|| ((joinBoard != default(OptionalBool))
						&& joinBoard.HasValue)))
			{
				s.Serialize("joinBoard", ref joinBoard.Value);
				joinBoard.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardPlayerRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long dbid;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("dbid", ref dbid);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardListRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInt skip = new OptionalInt();
		public OptionalInt limit = new OptionalInt();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("skip")
						|| ((skip != default(OptionalInt))
						&& skip.HasValue)))
			{
				s.Serialize("skip", ref skip.Value);
				skip.HasValue = true;
			}
			if ((s.HasKey("limit")
						|| ((limit != default(OptionalInt))
						&& limit.HasValue)))
			{
				s.Serialize("limit", ref limit.Value);
				limit.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardAssignmentInfo : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long playerId;
		public string leaderboardId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
			s.Serialize("leaderboardId", ref leaderboardId);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardListResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public int total;
		public int offset;
		public string[] nameList;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("total", ref total);
			s.Serialize("offset", ref offset);
			s.SerializeArray("nameList", ref nameList);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderBoardView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string lbId;
		public long boardSize;
		public OptionalRankEntry rankgt = new OptionalRankEntry();
		public RankEntry[] rankings;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("lbId", ref lbId);
			s.Serialize("boardSize", ref boardSize);
			s.SerializeArray("rankings", ref rankings);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardPartitionInfo : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long playerId;
		public string leaderboardId;
		public bool isEmpty;
		public OptionalInt partition = new OptionalInt();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
			s.Serialize("leaderboardId", ref leaderboardId);
			s.Serialize("isEmpty", ref isEmpty);
			if ((s.HasKey("partition")
						|| ((partition != default(OptionalInt))
						&& partition.HasValue)))
			{
				s.Serialize("partition", ref partition.Value);
				partition.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardPartitionRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long playerId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
		}
	}
	[System.SerializableAttribute()]
	public class OrderRule : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string v;
		public int o;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("v", ref v);
			s.Serialize("o", ref o);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardMembershipRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long playerId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardRemoveCacheEntryRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long playerId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardGetRanksRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string ids;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("ids", ref ids);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardApiViewRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInt max = new OptionalInt();
		public OptionalLong focus = new OptionalLong();
		public OptionalBool friends = new OptionalBool();
		public OptionalInt from = new OptionalInt();
		public OptionalLong outlier = new OptionalLong();
		public OptionalBool guild = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("max")
						|| ((max != default(OptionalInt))
						&& max.HasValue)))
			{
				s.Serialize("max", ref max.Value);
				max.HasValue = true;
			}
			if ((s.HasKey("focus")
						|| ((focus != default(OptionalLong))
						&& focus.HasValue)))
			{
				s.Serialize("focus", ref focus.Value);
				focus.HasValue = true;
			}
			if ((s.HasKey("friends")
						|| ((friends != default(OptionalBool))
						&& friends.HasValue)))
			{
				s.Serialize("friends", ref friends.Value);
				friends.HasValue = true;
			}
			if ((s.HasKey("from")
						|| ((from != default(OptionalInt))
						&& from.HasValue)))
			{
				s.Serialize("from", ref from.Value);
				from.HasValue = true;
			}
			if ((s.HasKey("outlier")
						|| ((outlier != default(OptionalLong))
						&& outlier.HasValue)))
			{
				s.Serialize("outlier", ref outlier.Value);
				outlier.HasValue = true;
			}
			if ((s.HasKey("guild")
						|| ((guild != default(OptionalBool))
						&& guild.HasValue)))
			{
				s.Serialize("guild", ref guild.Value);
				guild.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class MetadataView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong freezeTime = new OptionalLong();
		public OptionalStringArray derivatives = new OptionalStringArray();
		public string parentLeaderboard;
		public OptionalLeaderboardCohortSettings cohortSettings = new OptionalLeaderboardCohortSettings();
		public OptionalClientPermission permissions = new OptionalClientPermission();
		public bool frozen;
		public OptionalInt maxEntries = new OptionalInt();
		public bool partitioned;
		public bool cohorted;
		public OptionalLong expiration = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("freezeTime")
						|| ((freezeTime != default(OptionalLong))
						&& freezeTime.HasValue)))
			{
				s.Serialize("freezeTime", ref freezeTime.Value);
				freezeTime.HasValue = true;
			}
			if ((s.HasKey("derivatives")
						|| ((derivatives != default(OptionalStringArray))
						&& derivatives.HasValue)))
			{
				s.SerializeArray("derivatives", ref derivatives.Value);
				derivatives.HasValue = true;
			}
			s.Serialize("parentLeaderboard", ref parentLeaderboard);
			s.Serialize("frozen", ref frozen);
			if ((s.HasKey("maxEntries")
						|| ((maxEntries != default(OptionalInt))
						&& maxEntries.HasValue)))
			{
				s.Serialize("maxEntries", ref maxEntries.Value);
				maxEntries.HasValue = true;
			}
			s.Serialize("partitioned", ref partitioned);
			s.Serialize("cohorted", ref cohorted);
			if ((s.HasKey("expiration")
						|| ((expiration != default(OptionalLong))
						&& expiration.HasValue)))
			{
				s.Serialize("expiration", ref expiration.Value);
				expiration.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class MatchMakingRanking : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long gt;
		public int rank;
		public bool isUnranked;
		public MapOfString variables = new MapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("gt", ref gt);
			s.Serialize("rank", ref rank);
			s.Serialize("isUnranked", ref isUnranked);
			s.SerializeDictionary<MapOfString, string>("variables", ref variables);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderBoardViewResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string result;
		public LeaderBoardView lb = new LeaderBoardView();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("result", ref result);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardDetails : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string lbid;
		public OptionalOrderRules orules = new OptionalOrderRules();
		public int numberOfEntries;
		public string fullName;
		public OptionalMetadataView metaData = new OptionalMetadataView();
		public LeaderBoardView view = new LeaderBoardView();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("lbid", ref lbid);
			s.Serialize("numberOfEntries", ref numberOfEntries);
			s.Serialize("fullName", ref fullName);
		}
	}
	[System.SerializableAttribute()]
	public class OrderRules : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OrderRule[] orules;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("orules", ref orules);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardRemoveEntryRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long id;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
		}
	}
	[System.SerializableAttribute()]
	public class MatchMakingMatchesPvpResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string result;
		public int totalEntries;
		public MatchMakingRanking playerRank = new MatchMakingRanking();
		public MatchMakingWindowResp[] windows;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("result", ref result);
			s.Serialize("totalEntries", ref totalEntries);
			s.SerializeArray("windows", ref windows);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardGetMatchRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public int poolSize;
		public int windows;
		public int windowSize;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("poolSize", ref poolSize);
			s.Serialize("windows", ref windows);
			s.Serialize("windowSize", ref windowSize);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardCreateRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong freezeTime = new OptionalLong();
		public OptionalStringArray derivatives = new OptionalStringArray();
		public OptionalString scoreName = new OptionalString();
		public OptionalLeaderboardCohortSettings cohortSettings = new OptionalLeaderboardCohortSettings();
		public OptionalClientPermission permissions = new OptionalClientPermission();
		public OptionalInt maxEntries = new OptionalInt();
		public OptionalBool partitioned = new OptionalBool();
		public bool sharded;
		public OptionalLong ttl = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("freezeTime")
						|| ((freezeTime != default(OptionalLong))
						&& freezeTime.HasValue)))
			{
				s.Serialize("freezeTime", ref freezeTime.Value);
				freezeTime.HasValue = true;
			}
			if ((s.HasKey("derivatives")
						|| ((derivatives != default(OptionalStringArray))
						&& derivatives.HasValue)))
			{
				s.SerializeArray("derivatives", ref derivatives.Value);
				derivatives.HasValue = true;
			}
			if ((s.HasKey("scoreName")
						|| ((scoreName != default(OptionalString))
						&& scoreName.HasValue)))
			{
				s.Serialize("scoreName", ref scoreName.Value);
				scoreName.HasValue = true;
			}
			if ((s.HasKey("maxEntries")
						|| ((maxEntries != default(OptionalInt))
						&& maxEntries.HasValue)))
			{
				s.Serialize("maxEntries", ref maxEntries.Value);
				maxEntries.HasValue = true;
			}
			if ((s.HasKey("partitioned")
						|| ((partitioned != default(OptionalBool))
						&& partitioned.HasValue)))
			{
				s.Serialize("partitioned", ref partitioned.Value);
				partitioned.HasValue = true;
			}
			s.Serialize("sharded", ref sharded);
			if ((s.HasKey("ttl")
						|| ((ttl != default(OptionalLong))
						&& ttl.HasValue)))
			{
				s.Serialize("ttl", ref ttl.Value);
				ttl.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardDetailsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInt from = new OptionalInt();
		public OptionalInt max = new OptionalInt();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("from")
						|| ((from != default(OptionalInt))
						&& from.HasValue)))
			{
				s.Serialize("from", ref from.Value);
				from.HasValue = true;
			}
			if ((s.HasKey("max")
						|| ((max != default(OptionalInt))
						&& max.HasValue)))
			{
				s.Serialize("max", ref max.Value);
				max.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class MatchMakingWindowResp : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public int difficulty;
		public MatchMakingRanking[] matches;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("difficulty", ref difficulty);
			s.SerializeArray("matches", ref matches);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardSwapRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong winnerId = new OptionalLong();
		public OptionalLong loserId = new OptionalLong();
		public long swapBase;
		public long delta;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("winnerId")
						|| ((winnerId != default(OptionalLong))
						&& winnerId.HasValue)))
			{
				s.Serialize("winnerId", ref winnerId.Value);
				winnerId.HasValue = true;
			}
			if ((s.HasKey("loserId")
						|| ((loserId != default(OptionalLong))
						&& loserId.HasValue)))
			{
				s.Serialize("loserId", ref loserId.Value);
				loserId.HasValue = true;
			}
			s.Serialize("swapBase", ref swapBase);
			s.Serialize("delta", ref delta);
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardAddRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalDouble maxScore = new OptionalDouble();
		public OptionalMapOfString stats = new OptionalMapOfString();
		public double score;
		public OptionalDouble minScore = new OptionalDouble();
		public long id;
		public OptionalBool increment = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("maxScore")
						|| ((maxScore != default(OptionalDouble))
						&& maxScore.HasValue)))
			{
				s.Serialize("maxScore", ref maxScore.Value);
				maxScore.HasValue = true;
			}
			if ((s.HasKey("stats")
						|| ((stats != default(OptionalMapOfString))
						&& stats.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("stats", ref stats.Value);
				stats.HasValue = true;
			}
			s.Serialize("score", ref score);
			if ((s.HasKey("minScore")
						|| ((minScore != default(OptionalDouble))
						&& minScore.HasValue)))
			{
				s.Serialize("minScore", ref minScore.Value);
				minScore.HasValue = true;
			}
			s.Serialize("id", ref id);
			if ((s.HasKey("increment")
						|| ((increment != default(OptionalBool))
						&& increment.HasValue)))
			{
				s.Serialize("increment", ref increment.Value);
				increment.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class LeaderboardMembershipResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public bool result;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("result", ref result);
		}
	}
	[System.SerializableAttribute()]
	public class PasswordUpdateConfirmation : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string code;
		public string newPassword;
		public OptionalString email = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("code", ref code);
			s.Serialize("newPassword", ref newPassword);
			if ((s.HasKey("email")
						|| ((email != default(OptionalString))
						&& email.HasValue)))
			{
				s.Serialize("email", ref email.Value);
				email.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class DeviceIdAvailableRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string deviceId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("deviceId", ref deviceId);
		}
	}
	[System.SerializableAttribute()]
	public class AccountUpdate : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString thirdParty = new OptionalString();
		public bool hasThirdPartyToken;
		public OptionalString country = new OptionalString();
		public OptionalString language = new OptionalString();
		public OptionalGamerTagAssociation gamerTagAssoc = new OptionalGamerTagAssociation();
		public OptionalString token = new OptionalString();
		public OptionalString deviceId = new OptionalString();
		public OptionalString userName = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("thirdParty")
						|| ((thirdParty != default(OptionalString))
						&& thirdParty.HasValue)))
			{
				s.Serialize("thirdParty", ref thirdParty.Value);
				thirdParty.HasValue = true;
			}
			s.Serialize("hasThirdPartyToken", ref hasThirdPartyToken);
			if ((s.HasKey("country")
						|| ((country != default(OptionalString))
						&& country.HasValue)))
			{
				s.Serialize("country", ref country.Value);
				country.HasValue = true;
			}
			if ((s.HasKey("language")
						|| ((language != default(OptionalString))
						&& language.HasValue)))
			{
				s.Serialize("language", ref language.Value);
				language.HasValue = true;
			}
			if ((s.HasKey("token")
						|| ((token != default(OptionalString))
						&& token.HasValue)))
			{
				s.Serialize("token", ref token.Value);
				token.HasValue = true;
			}
			if ((s.HasKey("deviceId")
						|| ((deviceId != default(OptionalString))
						&& deviceId.HasValue)))
			{
				s.Serialize("deviceId", ref deviceId.Value);
				deviceId.HasValue = true;
			}
			if ((s.HasKey("userName")
						|| ((userName != default(OptionalString))
						&& userName.HasValue)))
			{
				s.Serialize("userName", ref userName.Value);
				userName.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class EmailUpdateRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string newEmail;
		public OptionalString codeType = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("newEmail", ref newEmail);
			if ((s.HasKey("codeType")
						|| ((codeType != default(OptionalString))
						&& codeType.HasValue)))
			{
				s.Serialize("codeType", ref codeType.Value);
				codeType.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ThirdPartyAssociation : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public OptionalString email = new OptionalString();
		public OptionalString userBusinessId = new OptionalString();
		public string userAppId;
		public MapOfString meta = new MapOfString();
		public string appId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			if ((s.HasKey("email")
						|| ((email != default(OptionalString))
						&& email.HasValue)))
			{
				s.Serialize("email", ref email.Value);
				email.HasValue = true;
			}
			if ((s.HasKey("userBusinessId")
						|| ((userBusinessId != default(OptionalString))
						&& userBusinessId.HasValue)))
			{
				s.Serialize("userBusinessId", ref userBusinessId.Value);
				userBusinessId.HasValue = true;
			}
			s.Serialize("userAppId", ref userAppId);
			s.SerializeDictionary<MapOfString, string>("meta", ref meta);
			s.Serialize("appId", ref appId);
		}
	}
	[System.SerializableAttribute()]
	public class DeleteDevicesRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalStringArray deviceIds = new OptionalStringArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("deviceIds")
						|| ((deviceIds != default(OptionalStringArray))
						&& deviceIds.HasValue)))
			{
				s.SerializeArray("deviceIds", ref deviceIds.Value);
				deviceIds.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AccountPersonallyIdentifiableInformationResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public Account account = new Account();
		public StatsResponse[] stats;
		public ListAuditResponse paymentAudits = new ListAuditResponse();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("stats", ref stats);
		}
	}
	[System.SerializableAttribute()]
	public class AccountPortalView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString email = new OptionalString();
		public OptionalString roleString = new OptionalString();
		public string[] scopes;
		public long id;
		public OptionalString language = new OptionalString();
		public OptionalRoleMappingArray roles = new OptionalRoleMappingArray();
		public string[] thirdPartyAppAssociations;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("email")
						|| ((email != default(OptionalString))
						&& email.HasValue)))
			{
				s.Serialize("email", ref email.Value);
				email.HasValue = true;
			}
			if ((s.HasKey("roleString")
						|| ((roleString != default(OptionalString))
						&& roleString.HasValue)))
			{
				s.Serialize("roleString", ref roleString.Value);
				roleString.HasValue = true;
			}
			s.SerializeArray("scopes", ref scopes);
			s.Serialize("id", ref id);
			if ((s.HasKey("language")
						|| ((language != default(OptionalString))
						&& language.HasValue)))
			{
				s.Serialize("language", ref language.Value);
				language.HasValue = true;
			}
			if ((s.HasKey("roles")
						|| ((roles != default(OptionalRoleMappingArray))
						&& roles.HasValue)))
			{
				s.SerializeArray("roles", ref roles.Value);
				roles.HasValue = true;
			}
			s.SerializeArray("thirdPartyAppAssociations", ref thirdPartyAppAssociations);
		}
	}
	[System.SerializableAttribute()]
	public class SearchAccountsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string query;
		public int page;
		public int pagesize;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("query", ref query);
			s.Serialize("page", ref page);
			s.Serialize("pagesize", ref pagesize);
		}
	}
	[System.SerializableAttribute()]
	public class PasswordUpdateRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string email;
		public OptionalString codeType = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("email", ref email);
			if ((s.HasKey("codeType")
						|| ((codeType != default(OptionalString))
						&& codeType.HasValue)))
			{
				s.Serialize("codeType", ref codeType.Value);
				codeType.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class PaymentAuditEntryViewModel : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string providerid;
		public PaymentHistoryEntryViewModel[] history;
		public long txid;
		public string providername;
		public OptionalString version = new OptionalString();
		public OptionalItemCreateRequestArray obtainItems = new OptionalItemCreateRequestArray();
		public string txstate;
		public OptionalLong updated = new OptionalLong();
		public OptionalCurrencyChangeArray obtainCurrency = new OptionalCurrencyChangeArray();
		public EntitlementGenerator[] entitlements;
		public PaymentDetailsEntryViewModel details = new PaymentDetailsEntryViewModel();
		public OptionalString replayGuardValue = new OptionalString();
		public long gt;
		public OptionalLong created = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("providerid", ref providerid);
			s.SerializeArray("history", ref history);
			s.Serialize("txid", ref txid);
			s.Serialize("providername", ref providername);
			if ((s.HasKey("version")
						|| ((version != default(OptionalString))
						&& version.HasValue)))
			{
				s.Serialize("version", ref version.Value);
				version.HasValue = true;
			}
			if ((s.HasKey("obtainItems")
						|| ((obtainItems != default(OptionalItemCreateRequestArray))
						&& obtainItems.HasValue)))
			{
				s.SerializeArray("obtainItems", ref obtainItems.Value);
				obtainItems.HasValue = true;
			}
			s.Serialize("txstate", ref txstate);
			if ((s.HasKey("updated")
						|| ((updated != default(OptionalLong))
						&& updated.HasValue)))
			{
				s.Serialize("updated", ref updated.Value);
				updated.HasValue = true;
			}
			if ((s.HasKey("obtainCurrency")
						|| ((obtainCurrency != default(OptionalCurrencyChangeArray))
						&& obtainCurrency.HasValue)))
			{
				s.SerializeArray("obtainCurrency", ref obtainCurrency.Value);
				obtainCurrency.HasValue = true;
			}
			s.SerializeArray("entitlements", ref entitlements);
			if ((s.HasKey("replayGuardValue")
						|| ((replayGuardValue != default(OptionalString))
						&& replayGuardValue.HasValue)))
			{
				s.Serialize("replayGuardValue", ref replayGuardValue.Value);
				replayGuardValue.HasValue = true;
			}
			s.Serialize("gt", ref gt);
			if ((s.HasKey("created")
						|| ((created != default(OptionalLong))
						&& created.HasValue)))
			{
				s.Serialize("created", ref created.Value);
				created.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AccountPlayerView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString email = new OptionalString();
		public string[] deviceIds;
		public string[] scopes;
		public long id;
		public OptionalString language = new OptionalString();
		public string[] thirdPartyAppAssociations;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("email")
						|| ((email != default(OptionalString))
						&& email.HasValue)))
			{
				s.Serialize("email", ref email.Value);
				email.HasValue = true;
			}
			s.SerializeArray("deviceIds", ref deviceIds);
			s.SerializeArray("scopes", ref scopes);
			s.Serialize("id", ref id);
			if ((s.HasKey("language")
						|| ((language != default(OptionalString))
						&& language.HasValue)))
			{
				s.Serialize("language", ref language.Value);
				language.HasValue = true;
			}
			s.SerializeArray("thirdPartyAppAssociations", ref thirdPartyAppAssociations);
		}
	}
	[System.SerializableAttribute()]
	public class PaymentHistoryEntryViewModel : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string change;
		public OptionalString data = new OptionalString();
		public OptionalString timestamp = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("change", ref change);
			if ((s.HasKey("data")
						|| ((data != default(OptionalString))
						&& data.HasValue)))
			{
				s.Serialize("data", ref data.Value);
				data.HasValue = true;
			}
			if ((s.HasKey("timestamp")
						|| ((timestamp != default(OptionalString))
						&& timestamp.HasValue)))
			{
				s.Serialize("timestamp", ref timestamp.Value);
				timestamp.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AccountAvailableResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public bool available;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("available", ref available);
		}
	}
	[System.SerializableAttribute()]
	public class EntitlementGenerator : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInt quantity = new OptionalInt();
		public OptionalEntitlementClaimWindow claimWindow = new OptionalEntitlementClaimWindow();
		public OptionalMapOfString paramsKey = new OptionalMapOfString();
		public string symbol;
		public OptionalString specialization = new OptionalString();
		public string action;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("quantity")
						|| ((quantity != default(OptionalInt))
						&& quantity.HasValue)))
			{
				s.Serialize("quantity", ref quantity.Value);
				quantity.HasValue = true;
			}
			if ((s.HasKey("params")
						|| ((paramsKey != default(OptionalMapOfString))
						&& paramsKey.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("params", ref paramsKey.Value);
				paramsKey.HasValue = true;
			}
			s.Serialize("symbol", ref symbol);
			if ((s.HasKey("specialization")
						|| ((specialization != default(OptionalString))
						&& specialization.HasValue)))
			{
				s.Serialize("specialization", ref specialization.Value);
				specialization.HasValue = true;
			}
			s.Serialize("action", ref action);
		}
	}
	[System.SerializableAttribute()]
	public class StatsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long id;
		public MapOfString stats = new MapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.SerializeDictionary<MapOfString, string>("stats", ref stats);
		}
	}
	[System.SerializableAttribute()]
	public class RoleMapping : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string projectId;
		public string role;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("projectId", ref projectId);
			s.Serialize("role", ref role);
		}
	}
	[System.SerializableAttribute()]
	public class AccountRegistration : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string email;
		public string password;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("email", ref email);
			s.Serialize("password", ref password);
		}
	}
	[System.SerializableAttribute()]
	public class EmailUpdateConfirmation : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string code;
		public string password;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("code", ref code);
			s.Serialize("password", ref password);
		}
	}
	[System.SerializableAttribute()]
	public class GetAdminsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public AccountPortalView[] accounts;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("accounts", ref accounts);
		}
	}
	[System.SerializableAttribute()]
	public class PaymentDetailsEntryViewModel : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string reference;
		public string name;
		public int quantity;
		public string sku;
		public int price;
		public OptionalString subcategory = new OptionalString();
		public string gameplace;
		public OptionalString localPrice = new OptionalString();
		public OptionalString category = new OptionalString();
		public OptionalString localCurrency = new OptionalString();
		public string providerProductId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("reference", ref reference);
			s.Serialize("name", ref name);
			s.Serialize("quantity", ref quantity);
			s.Serialize("sku", ref sku);
			s.Serialize("price", ref price);
			if ((s.HasKey("subcategory")
						|| ((subcategory != default(OptionalString))
						&& subcategory.HasValue)))
			{
				s.Serialize("subcategory", ref subcategory.Value);
				subcategory.HasValue = true;
			}
			s.Serialize("gameplace", ref gameplace);
			if ((s.HasKey("localPrice")
						|| ((localPrice != default(OptionalString))
						&& localPrice.HasValue)))
			{
				s.Serialize("localPrice", ref localPrice.Value);
				localPrice.HasValue = true;
			}
			if ((s.HasKey("category")
						|| ((category != default(OptionalString))
						&& category.HasValue)))
			{
				s.Serialize("category", ref category.Value);
				category.HasValue = true;
			}
			if ((s.HasKey("localCurrency")
						|| ((localCurrency != default(OptionalString))
						&& localCurrency.HasValue)))
			{
				s.Serialize("localCurrency", ref localCurrency.Value);
				localCurrency.HasValue = true;
			}
			s.Serialize("providerProductId", ref providerProductId);
		}
	}
	[System.SerializableAttribute()]
	public class CurrencyChange : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string symbol;
		public long amount;
		public OptionalLong originalAmount = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("symbol", ref symbol);
			s.Serialize("amount", ref amount);
			if ((s.HasKey("originalAmount")
						|| ((originalAmount != default(OptionalLong))
						&& originalAmount.HasValue)))
			{
				s.Serialize("originalAmount", ref originalAmount.Value);
				originalAmount.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AddAccountRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string email;
		public OptionalString role = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("email", ref email);
			if ((s.HasKey("role")
						|| ((role != default(OptionalString))
						&& role.HasValue)))
			{
				s.Serialize("role", ref role.Value);
				role.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class EntitlementClaimWindow : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long open;
		public long close;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("open", ref open);
			s.Serialize("close", ref close);
		}
	}
	[System.SerializableAttribute()]
	public class GamerTagAssociation : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string projectId;
		public long gamerTag;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("projectId", ref projectId);
			s.Serialize("gamerTag", ref gamerTag);
		}
	}
	[System.SerializableAttribute()]
	public class ThirdPartyAvailableRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string thirdParty;
		public string token;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("thirdParty", ref thirdParty);
			s.Serialize("token", ref token);
		}
	}
	[System.SerializableAttribute()]
	public class AccountSearchResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public Account[] accounts;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("accounts", ref accounts);
		}
	}
	[System.SerializableAttribute()]
	public class ListAuditResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public PaymentAuditEntryViewModel[] audits;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("audits", ref audits);
		}
	}
	[System.SerializableAttribute()]
	public class AccountAvailableRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string email;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("email", ref email);
		}
	}
	[System.SerializableAttribute()]
	public class FindAccountRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string query;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("query", ref query);
		}
	}
	[System.SerializableAttribute()]
	public class Account : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInFlightMessageArray inFlight = new OptionalInFlightMessageArray();
		public long createdTimeMillis;
		public OptionalString realmId = new OptionalString();
		public OptionalString email = new OptionalString();
		public OptionalString roleString = new OptionalString();
		public OptionalStringArray deviceIds = new OptionalStringArray();
		public bool privilegedAccount;
		public OptionalString country = new OptionalString();
		public OptionalBool wasMigrated = new OptionalBool();
		public long id;
		public GamerTagAssociation[] gamerTags;
		public OptionalString language = new OptionalString();
		public OptionalRoleMappingArray roles = new OptionalRoleMappingArray();
		public long updatedTimeMillis;
		public ThirdPartyAssociation[] thirdParties;
		public OptionalString deviceId = new OptionalString();
		public OptionalString userName = new OptionalString();
		public OptionalLong heartbeat = new OptionalLong();
		public OptionalString password = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("inFlight")
						|| ((inFlight != default(OptionalInFlightMessageArray))
						&& inFlight.HasValue)))
			{
				s.SerializeArray("inFlight", ref inFlight.Value);
				inFlight.HasValue = true;
			}
			s.Serialize("createdTimeMillis", ref createdTimeMillis);
			if ((s.HasKey("realmId")
						|| ((realmId != default(OptionalString))
						&& realmId.HasValue)))
			{
				s.Serialize("realmId", ref realmId.Value);
				realmId.HasValue = true;
			}
			if ((s.HasKey("email")
						|| ((email != default(OptionalString))
						&& email.HasValue)))
			{
				s.Serialize("email", ref email.Value);
				email.HasValue = true;
			}
			if ((s.HasKey("roleString")
						|| ((roleString != default(OptionalString))
						&& roleString.HasValue)))
			{
				s.Serialize("roleString", ref roleString.Value);
				roleString.HasValue = true;
			}
			if ((s.HasKey("deviceIds")
						|| ((deviceIds != default(OptionalStringArray))
						&& deviceIds.HasValue)))
			{
				s.SerializeArray("deviceIds", ref deviceIds.Value);
				deviceIds.HasValue = true;
			}
			s.Serialize("privilegedAccount", ref privilegedAccount);
			if ((s.HasKey("country")
						|| ((country != default(OptionalString))
						&& country.HasValue)))
			{
				s.Serialize("country", ref country.Value);
				country.HasValue = true;
			}
			if ((s.HasKey("wasMigrated")
						|| ((wasMigrated != default(OptionalBool))
						&& wasMigrated.HasValue)))
			{
				s.Serialize("wasMigrated", ref wasMigrated.Value);
				wasMigrated.HasValue = true;
			}
			s.Serialize("id", ref id);
			s.SerializeArray("gamerTags", ref gamerTags);
			if ((s.HasKey("language")
						|| ((language != default(OptionalString))
						&& language.HasValue)))
			{
				s.Serialize("language", ref language.Value);
				language.HasValue = true;
			}
			if ((s.HasKey("roles")
						|| ((roles != default(OptionalRoleMappingArray))
						&& roles.HasValue)))
			{
				s.SerializeArray("roles", ref roles.Value);
				roles.HasValue = true;
			}
			s.Serialize("updatedTimeMillis", ref updatedTimeMillis);
			s.SerializeArray("thirdParties", ref thirdParties);
			if ((s.HasKey("deviceId")
						|| ((deviceId != default(OptionalString))
						&& deviceId.HasValue)))
			{
				s.Serialize("deviceId", ref deviceId.Value);
				deviceId.HasValue = true;
			}
			if ((s.HasKey("userName")
						|| ((userName != default(OptionalString))
						&& userName.HasValue)))
			{
				s.Serialize("userName", ref userName.Value);
				userName.HasValue = true;
			}
			if ((s.HasKey("heartbeat")
						|| ((heartbeat != default(OptionalLong))
						&& heartbeat.HasValue)))
			{
				s.Serialize("heartbeat", ref heartbeat.Value);
				heartbeat.HasValue = true;
			}
			if ((s.HasKey("password")
						|| ((password != default(OptionalString))
						&& password.HasValue)))
			{
				s.Serialize("password", ref password.Value);
				password.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AccountRolesReport : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long accountId;
		public string email;
		public RealmRolesReport[] realms;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("accountId", ref accountId);
			s.Serialize("email", ref email);
			s.SerializeArray("realms", ref realms);
		}
	}
	[System.SerializableAttribute()]
	public class DeleteThirdPartyAssociation : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string thirdParty;
		public string userAppId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("thirdParty", ref thirdParty);
			s.Serialize("userAppId", ref userAppId);
		}
	}
	[System.SerializableAttribute()]
	public class DeleteRole : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString realm = new OptionalString();
		public OptionalString role = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("realm")
						|| ((realm != default(OptionalString))
						&& realm.HasValue)))
			{
				s.Serialize("realm", ref realm.Value);
				realm.HasValue = true;
			}
			if ((s.HasKey("role")
						|| ((role != default(OptionalString))
						&& role.HasValue)))
			{
				s.Serialize("role", ref role.Value);
				role.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class UpdateRole : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString cid = new OptionalString();
		public OptionalString realm = new OptionalString();
		public OptionalString role = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("cid")
						|| ((cid != default(OptionalString))
						&& cid.HasValue)))
			{
				s.Serialize("cid", ref cid.Value);
				cid.HasValue = true;
			}
			if ((s.HasKey("realm")
						|| ((realm != default(OptionalString))
						&& realm.HasValue)))
			{
				s.Serialize("realm", ref realm.Value);
				realm.HasValue = true;
			}
			if ((s.HasKey("role")
						|| ((role != default(OptionalString))
						&& role.HasValue)))
			{
				s.Serialize("role", ref role.Value);
				role.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AvailableRolesResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string[] roles;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("roles", ref roles);
		}
	}
	[System.SerializableAttribute()]
	public class RealmRolesReport : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string realmName;
		public string realmDisplayName;
		public string[] roles;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("realmName", ref realmName);
			s.Serialize("realmDisplayName", ref realmDisplayName);
			s.SerializeArray("roles", ref roles);
		}
	}
	[System.SerializableAttribute()]
	public class TransferThirdPartyAssociation : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long fromAccountId;
		public ThirdPartyAssociation thirdParty = new ThirdPartyAssociation();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("fromAccountId", ref fromAccountId);
		}
	}
	[System.SerializableAttribute()]
	public class StatUpdateRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString objectId = new OptionalString();
		public OptionalMapOfString set = new OptionalMapOfString();
		public OptionalMapOfString add = new OptionalMapOfString();
		public OptionalBool emitAnalytics = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("objectId")
						|| ((objectId != default(OptionalString))
						&& objectId.HasValue)))
			{
				s.Serialize("objectId", ref objectId.Value);
				objectId.HasValue = true;
			}
			if ((s.HasKey("set")
						|| ((set != default(OptionalMapOfString))
						&& set.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("set", ref set.Value);
				set.HasValue = true;
			}
			if ((s.HasKey("add")
						|| ((add != default(OptionalMapOfString))
						&& add.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("add", ref add.Value);
				add.HasValue = true;
			}
			if ((s.HasKey("emitAnalytics")
						|| ((emitAnalytics != default(OptionalBool))
						&& emitAnalytics.HasValue)))
			{
				s.Serialize("emitAnalytics", ref emitAnalytics.Value);
				emitAnalytics.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class StatsSubscribeRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string service;
		public string[] subscriptions;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("service", ref service);
			s.SerializeArray("subscriptions", ref subscriptions);
		}
	}
	[System.SerializableAttribute()]
	public class StatsSearchResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long[] ids;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("ids", ref ids);
		}
	}
	[System.SerializableAttribute()]
	public class NetworkSerializable : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class BatchReadStatsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string objectIds;
		public OptionalString stats = new OptionalString();
		public OptionalString format = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("objectIds", ref objectIds);
			if ((s.HasKey("stats")
						|| ((stats != default(OptionalString))
						&& stats.HasValue)))
			{
				s.Serialize("stats", ref stats.Value);
				stats.HasValue = true;
			}
			if ((s.HasKey("format")
						|| ((format != default(OptionalString))
						&& format.HasValue)))
			{
				s.Serialize("format", ref format.Value);
				format.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class BatchSetStatsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public StatUpdateRequest[] updates;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("updates", ref updates);
		}
	}
	[System.SerializableAttribute()]
	public class StatsSearchRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string domain;
		public string access;
		public string objectType;
		public StatsSearchCriteria[] criteria;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("domain", ref domain);
			s.Serialize("access", ref access);
			s.Serialize("objectType", ref objectType);
			s.SerializeArray("criteria", ref criteria);
		}
	}
	[System.SerializableAttribute()]
	public class StatsSearchCriteria : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string stat;
		public string rel;
		public OptionalString value = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("stat", ref stat);
			s.Serialize("rel", ref rel);
			if ((s.HasKey("value")
						|| ((value != default(OptionalString))
						&& value.HasValue)))
			{
				s.Serialize("value", ref value.Value);
				value.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class BatchReadStatsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public NetworkSerializable[] results;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("results", ref results);
		}
	}
	[System.SerializableAttribute()]
	public class SearchExtendedResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public MapOfMapOfString gamerStats = new MapOfMapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeDictionary<MapOfMapOfString, MapOfString>("gamerStats", ref gamerStats);
		}
	}
	[System.SerializableAttribute()]
	public class SearchExtendedRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public StatsSearchCriteria[] criteria;
		public string domain;
		public string objectType;
		public string[] statKeys;
		public string access;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("criteria", ref criteria);
			s.Serialize("domain", ref domain);
			s.Serialize("objectType", ref objectType);
			s.SerializeArray("statKeys", ref statKeys);
			s.Serialize("access", ref access);
		}
	}
	[System.SerializableAttribute()]
	public class StatUpdateRequestStringListFormat : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalStatStringListEntryArray set = new OptionalStatStringListEntryArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("set")
						|| ((set != default(OptionalStatStringListEntryArray))
						&& set.HasValue)))
			{
				s.SerializeArray("set", ref set.Value);
				set.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class StatRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString stats = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("stats")
						|| ((stats != default(OptionalString))
						&& stats.HasValue)))
			{
				s.Serialize("stats", ref stats.Value);
				stats.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class StatStringListEntry : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string k;
		public string v;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("k", ref k);
			s.Serialize("v", ref v);
		}
	}
	[System.SerializableAttribute()]
	public class RewardsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public TournamentCurrencyReward[] rewardCurrencies;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("rewardCurrencies", ref rewardCurrencies);
		}
	}
	[System.SerializableAttribute()]
	public class GroupStatus : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public int lastUpdateCycle;
		public string tournamentId;
		public int stage;
		public int tier;
		public long groupId;
		public OptionalCompletedStatusArray completed = new OptionalCompletedStatusArray();
		public string contentId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("lastUpdateCycle", ref lastUpdateCycle);
			s.Serialize("tournamentId", ref tournamentId);
			s.Serialize("stage", ref stage);
			s.Serialize("tier", ref tier);
			s.Serialize("groupId", ref groupId);
			if ((s.HasKey("completed")
						|| ((completed != default(OptionalCompletedStatusArray))
						&& completed.HasValue)))
			{
				s.SerializeArray("completed", ref completed.Value);
				completed.HasValue = true;
			}
			s.Serialize("contentId", ref contentId);
		}
	}
	[System.SerializableAttribute()]
	public class GetPlayerStatusRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString tournamentId = new OptionalString();
		public OptionalString contentId = new OptionalString();
		public OptionalBool hasUnclaimedRewards = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("tournamentId")
						|| ((tournamentId != default(OptionalString))
						&& tournamentId.HasValue)))
			{
				s.Serialize("tournamentId", ref tournamentId.Value);
				tournamentId.HasValue = true;
			}
			if ((s.HasKey("contentId")
						|| ((contentId != default(OptionalString))
						&& contentId.HasValue)))
			{
				s.Serialize("contentId", ref contentId.Value);
				contentId.HasValue = true;
			}
			if ((s.HasKey("hasUnclaimedRewards")
						|| ((hasUnclaimedRewards != default(OptionalBool))
						&& hasUnclaimedRewards.HasValue)))
			{
				s.Serialize("hasUnclaimedRewards", ref hasUnclaimedRewards.Value);
				hasUnclaimedRewards.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GetPlayerStatusResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public PlayerStatus[] statuses;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("statuses", ref statuses);
		}
	}
	[System.SerializableAttribute()]
	public class RewardsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString tournamentId = new OptionalString();
		public OptionalString contentId = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("tournamentId")
						|| ((tournamentId != default(OptionalString))
						&& tournamentId.HasValue)))
			{
				s.Serialize("tournamentId", ref tournamentId.Value);
				tournamentId.HasValue = true;
			}
			if ((s.HasKey("contentId")
						|| ((contentId != default(OptionalString))
						&& contentId.HasValue)))
			{
				s.Serialize("contentId", ref contentId.Value);
				contentId.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ScoreRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string tournamentId;
		public OptionalMapOfString stats = new OptionalMapOfString();
		public double score;
		public long playerId;
		public OptionalBool increment = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("tournamentId", ref tournamentId);
			if ((s.HasKey("stats")
						|| ((stats != default(OptionalMapOfString))
						&& stats.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("stats", ref stats.Value);
				stats.HasValue = true;
			}
			s.Serialize("score", ref score);
			s.Serialize("playerId", ref playerId);
			if ((s.HasKey("increment")
						|| ((increment != default(OptionalBool))
						&& increment.HasValue)))
			{
				s.Serialize("increment", ref increment.Value);
				increment.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AdminGetPlayerStatusRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long playerId;
		public OptionalString tournamentId = new OptionalString();
		public OptionalString contentId = new OptionalString();
		public OptionalBool hasUnclaimedRewards = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
			if ((s.HasKey("tournamentId")
						|| ((tournamentId != default(OptionalString))
						&& tournamentId.HasValue)))
			{
				s.Serialize("tournamentId", ref tournamentId.Value);
				tournamentId.HasValue = true;
			}
			if ((s.HasKey("contentId")
						|| ((contentId != default(OptionalString))
						&& contentId.HasValue)))
			{
				s.Serialize("contentId", ref contentId.Value);
				contentId.HasValue = true;
			}
			if ((s.HasKey("hasUnclaimedRewards")
						|| ((hasUnclaimedRewards != default(OptionalBool))
						&& hasUnclaimedRewards.HasValue)))
			{
				s.Serialize("hasUnclaimedRewards", ref hasUnclaimedRewards.Value);
				hasUnclaimedRewards.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GetGroupStatusRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString contentId = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("contentId")
						|| ((contentId != default(OptionalString))
						&& contentId.HasValue)))
			{
				s.Serialize("contentId", ref contentId.Value);
				contentId.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GetChampionsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ChampionScore[] entries;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("entries", ref entries);
		}
	}
	[System.SerializableAttribute()]
	public class TournamentClientView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string tournamentId;
		public string startTimeUtc;
		public long secondsRemaining;
		public int cycle;
		public string endTimeUtc;
		public string contentId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("tournamentId", ref tournamentId);
			s.Serialize("startTimeUtc", ref startTimeUtc);
			s.Serialize("secondsRemaining", ref secondsRemaining);
			s.Serialize("cycle", ref cycle);
			s.Serialize("endTimeUtc", ref endTimeUtc);
			s.Serialize("contentId", ref contentId);
		}
	}
	[System.SerializableAttribute()]
	public class GetStatusForGroupsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public GroupStatus[] statuses;
		public string contentId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("statuses", ref statuses);
			s.Serialize("contentId", ref contentId);
		}
	}
	[System.SerializableAttribute()]
	public class GetStandingsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string tournamentId;
		public OptionalInt max = new OptionalInt();
		public OptionalLong focus = new OptionalLong();
		public OptionalInt cycle = new OptionalInt();
		public OptionalInt from = new OptionalInt();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("tournamentId", ref tournamentId);
			if ((s.HasKey("max")
						|| ((max != default(OptionalInt))
						&& max.HasValue)))
			{
				s.Serialize("max", ref max.Value);
				max.HasValue = true;
			}
			if ((s.HasKey("focus")
						|| ((focus != default(OptionalLong))
						&& focus.HasValue)))
			{
				s.Serialize("focus", ref focus.Value);
				focus.HasValue = true;
			}
			if ((s.HasKey("cycle")
						|| ((cycle != default(OptionalInt))
						&& cycle.HasValue)))
			{
				s.Serialize("cycle", ref cycle.Value);
				cycle.HasValue = true;
			}
			if ((s.HasKey("from")
						|| ((from != default(OptionalInt))
						&& from.HasValue)))
			{
				s.Serialize("from", ref from.Value);
				from.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class TournamentEntry : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long rank;
		public double score;
		public TournamentCurrencyReward[] currencyRewards;
		public long playerId;
		public int stageChange;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("rank", ref rank);
			s.Serialize("score", ref score);
			s.SerializeArray("currencyRewards", ref currencyRewards);
			s.Serialize("playerId", ref playerId);
			s.Serialize("stageChange", ref stageChange);
		}
	}
	[System.SerializableAttribute()]
	public class PlayerStatusUpdate : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInt tier = new OptionalInt();
		public OptionalInt stage = new OptionalInt();
		public OptionalDouble score = new OptionalDouble();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("tier")
						|| ((tier != default(OptionalInt))
						&& tier.HasValue)))
			{
				s.Serialize("tier", ref tier.Value);
				tier.HasValue = true;
			}
			if ((s.HasKey("stage")
						|| ((stage != default(OptionalInt))
						&& stage.HasValue)))
			{
				s.Serialize("stage", ref stage.Value);
				stage.HasValue = true;
			}
			if ((s.HasKey("score")
						|| ((score != default(OptionalDouble))
						&& score.HasValue)))
			{
				s.Serialize("score", ref score.Value);
				score.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class TournamentQueryResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public TournamentClientView[] tournaments;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("tournaments", ref tournaments);
		}
	}
	[System.SerializableAttribute()]
	public class PlayerStatus : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public int lastUpdateCycle;
		public string tournamentId;
		public int stage;
		public TournamentCurrencyReward[] unclaimedRewards;
		public int tier;
		public OptionalLong groupId = new OptionalLong();
		public long playerId;
		public string contentId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("lastUpdateCycle", ref lastUpdateCycle);
			s.Serialize("tournamentId", ref tournamentId);
			s.Serialize("stage", ref stage);
			s.SerializeArray("unclaimedRewards", ref unclaimedRewards);
			s.Serialize("tier", ref tier);
			if ((s.HasKey("groupId")
						|| ((groupId != default(OptionalLong))
						&& groupId.HasValue)))
			{
				s.Serialize("groupId", ref groupId.Value);
				groupId.HasValue = true;
			}
			s.Serialize("playerId", ref playerId);
			s.Serialize("contentId", ref contentId);
		}
	}
	[System.SerializableAttribute()]
	public class CompletedStatus : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public int cycle;
		public int tier;
		public int stage;
		public int delta;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("cycle", ref cycle);
			s.Serialize("tier", ref tier);
			s.Serialize("stage", ref stage);
			s.Serialize("delta", ref delta);
		}
	}
	[System.SerializableAttribute()]
	public class GetStandingsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public TournamentEntry[] entries;
		public OptionalTournamentEntry me = new OptionalTournamentEntry();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("entries", ref entries);
		}
	}
	[System.SerializableAttribute()]
	public class TournamentQueryRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalBool isRunning = new OptionalBool();
		public OptionalString contentId = new OptionalString();
		public OptionalInt cycle = new OptionalInt();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("isRunning")
						|| ((isRunning != default(OptionalBool))
						&& isRunning.HasValue)))
			{
				s.Serialize("isRunning", ref isRunning.Value);
				isRunning.HasValue = true;
			}
			if ((s.HasKey("contentId")
						|| ((contentId != default(OptionalString))
						&& contentId.HasValue)))
			{
				s.Serialize("contentId", ref contentId.Value);
				contentId.HasValue = true;
			}
			if ((s.HasKey("cycle")
						|| ((cycle != default(OptionalInt))
						&& cycle.HasValue)))
			{
				s.Serialize("cycle", ref cycle.Value);
				cycle.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class TournamentCurrencyReward : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string symbol;
		public long amount;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("symbol", ref symbol);
			s.Serialize("amount", ref amount);
		}
	}
	[System.SerializableAttribute()]
	public class JoinRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string tournamentId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("tournamentId", ref tournamentId);
		}
	}
	[System.SerializableAttribute()]
	public class GetGroupsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public TournamentGroupEntry[] entries;
		public OptionalTournamentGroupEntry focus = new OptionalTournamentGroupEntry();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("entries", ref entries);
		}
	}
	[System.SerializableAttribute()]
	public class TournamentGroupEntry : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long rank;
		public double score;
		public TournamentCurrencyReward[] currencyRewards;
		public long groupId;
		public int stageChange;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("rank", ref rank);
			s.Serialize("score", ref score);
			s.SerializeArray("currencyRewards", ref currencyRewards);
			s.Serialize("groupId", ref groupId);
			s.Serialize("stageChange", ref stageChange);
		}
	}
	[System.SerializableAttribute()]
	public class GetStatusForGroupsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long[] groupIds;
		public string contentId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("groupIds", ref groupIds);
			s.Serialize("contentId", ref contentId);
		}
	}
	[System.SerializableAttribute()]
	public class GetGroupStatusResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public GroupStatus[] statuses;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("statuses", ref statuses);
		}
	}
	[System.SerializableAttribute()]
	public class GetGroupsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string tournamentId;
		public OptionalInt max = new OptionalInt();
		public OptionalLong focus = new OptionalLong();
		public OptionalInt cycle = new OptionalInt();
		public OptionalInt from = new OptionalInt();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("tournamentId", ref tournamentId);
			if ((s.HasKey("max")
						|| ((max != default(OptionalInt))
						&& max.HasValue)))
			{
				s.Serialize("max", ref max.Value);
				max.HasValue = true;
			}
			if ((s.HasKey("focus")
						|| ((focus != default(OptionalLong))
						&& focus.HasValue)))
			{
				s.Serialize("focus", ref focus.Value);
				focus.HasValue = true;
			}
			if ((s.HasKey("cycle")
						|| ((cycle != default(OptionalInt))
						&& cycle.HasValue)))
			{
				s.Serialize("cycle", ref cycle.Value);
				cycle.HasValue = true;
			}
			if ((s.HasKey("from")
						|| ((from != default(OptionalInt))
						&& from.HasValue)))
			{
				s.Serialize("from", ref from.Value);
				from.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AdminPlayerStatus : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string tournamentId;
		public int stage;
		public TournamentCurrencyReward[] unclaimedRewards;
		public int tier;
		public int rank;
		public double score;
		public long playerId;
		public string contentId;
		public long nextCycleStartMs;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("tournamentId", ref tournamentId);
			s.Serialize("stage", ref stage);
			s.SerializeArray("unclaimedRewards", ref unclaimedRewards);
			s.Serialize("tier", ref tier);
			s.Serialize("rank", ref rank);
			s.Serialize("score", ref score);
			s.Serialize("playerId", ref playerId);
			s.Serialize("contentId", ref contentId);
			s.Serialize("nextCycleStartMs", ref nextCycleStartMs);
		}
	}
	[System.SerializableAttribute()]
	public class UpdatePlayerStatusRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long playerId;
		public string tournamentId;
		public PlayerStatusUpdate update = new PlayerStatusUpdate();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
			s.Serialize("tournamentId", ref tournamentId);
		}
	}
	[System.SerializableAttribute()]
	public class ChampionScore : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long endTimeMs;
		public long startTimeMs;
		public double score;
		public int cycle;
		public long playerId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("endTimeMs", ref endTimeMs);
			s.Serialize("startTimeMs", ref startTimeMs);
			s.Serialize("score", ref score);
			s.Serialize("cycle", ref cycle);
			s.Serialize("playerId", ref playerId);
		}
	}
	[System.SerializableAttribute()]
	public class GetChampionsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string tournamentId;
		public int cycles;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("tournamentId", ref tournamentId);
			s.Serialize("cycles", ref cycles);
		}
	}
	[System.SerializableAttribute()]
	public class AdminGetPlayerStatusResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public AdminPlayerStatus[] statuses;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("statuses", ref statuses);
		}
	}
	[System.SerializableAttribute()]
	public class RevokeTokenRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string token;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("token", ref token);
		}
	}
	[System.SerializableAttribute()]
	public class ListTokensRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public int pageSize;
		public int page;
		public OptionalLong cid = new OptionalLong();
		public OptionalString pid = new OptionalString();
		public long gamerTagOrAccountId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("pageSize", ref pageSize);
			s.Serialize("page", ref page);
			if ((s.HasKey("cid")
						|| ((cid != default(OptionalLong))
						&& cid.HasValue)))
			{
				s.Serialize("cid", ref cid.Value);
				cid.HasValue = true;
			}
			if ((s.HasKey("pid")
						|| ((pid != default(OptionalString))
						&& pid.HasValue)))
			{
				s.Serialize("pid", ref pid.Value);
				pid.HasValue = true;
			}
			s.Serialize("gamerTagOrAccountId", ref gamerTagOrAccountId);
		}
	}
	[System.SerializableAttribute()]
	public class ContextInfo : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string platform;
		public string device;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("platform", ref platform);
			s.Serialize("device", ref device);
		}
	}
	[System.SerializableAttribute()]
	public class GetTokenRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string token;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("token", ref token);
		}
	}
	[System.SerializableAttribute()]
	public class TokenRequestWrapper : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString device_id = new OptionalString();
		public OptionalString username = new OptionalString();
		public OptionalStringArray scope = new OptionalStringArray();
		public OptionalString refresh_token = new OptionalString();
		public OptionalContextInfo context = new OptionalContextInfo();
		public OptionalString third_party = new OptionalString();
		public OptionalString redirect_uri = new OptionalString();
		public OptionalString client_id = new OptionalString();
		public OptionalString code = new OptionalString();
		public OptionalString token = new OptionalString();
		public OptionalBool customerScoped = new OptionalBool();
		public string grant_type;
		public OptionalString password = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("device_id")
						|| ((device_id != default(OptionalString))
						&& device_id.HasValue)))
			{
				s.Serialize("device_id", ref device_id.Value);
				device_id.HasValue = true;
			}
			if ((s.HasKey("username")
						|| ((username != default(OptionalString))
						&& username.HasValue)))
			{
				s.Serialize("username", ref username.Value);
				username.HasValue = true;
			}
			if ((s.HasKey("scope")
						|| ((scope != default(OptionalStringArray))
						&& scope.HasValue)))
			{
				s.SerializeArray("scope", ref scope.Value);
				scope.HasValue = true;
			}
			if ((s.HasKey("refresh_token")
						|| ((refresh_token != default(OptionalString))
						&& refresh_token.HasValue)))
			{
				s.Serialize("refresh_token", ref refresh_token.Value);
				refresh_token.HasValue = true;
			}
			if ((s.HasKey("third_party")
						|| ((third_party != default(OptionalString))
						&& third_party.HasValue)))
			{
				s.Serialize("third_party", ref third_party.Value);
				third_party.HasValue = true;
			}
			if ((s.HasKey("redirect_uri")
						|| ((redirect_uri != default(OptionalString))
						&& redirect_uri.HasValue)))
			{
				s.Serialize("redirect_uri", ref redirect_uri.Value);
				redirect_uri.HasValue = true;
			}
			if ((s.HasKey("client_id")
						|| ((client_id != default(OptionalString))
						&& client_id.HasValue)))
			{
				s.Serialize("client_id", ref client_id.Value);
				client_id.HasValue = true;
			}
			if ((s.HasKey("code")
						|| ((code != default(OptionalString))
						&& code.HasValue)))
			{
				s.Serialize("code", ref code.Value);
				code.HasValue = true;
			}
			if ((s.HasKey("token")
						|| ((token != default(OptionalString))
						&& token.HasValue)))
			{
				s.Serialize("token", ref token.Value);
				token.HasValue = true;
			}
			if ((s.HasKey("customerScoped")
						|| ((customerScoped != default(OptionalBool))
						&& customerScoped.HasValue)))
			{
				s.Serialize("customerScoped", ref customerScoped.Value);
				customerScoped.HasValue = true;
			}
			s.Serialize("grant_type", ref grant_type);
			if ((s.HasKey("password")
						|| ((password != default(OptionalString))
						&& password.HasValue)))
			{
				s.Serialize("password", ref password.Value);
				password.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ListTokenResponseItem : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string token;
		public string platform;
		public string device;
		public string created;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("token", ref token);
			s.Serialize("platform", ref platform);
			s.Serialize("device", ref device);
			s.Serialize("created", ref created);
		}
	}
	[System.SerializableAttribute()]
	public class ListTokenResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ListTokenResponseItem[] items;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("items", ref items);
		}
	}
	[System.SerializableAttribute()]
	public class TokenResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string access_token;
		public long expires_in;
		public string refresh_token;
		public OptionalStringArray scopes = new OptionalStringArray();
		public string token_type;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("access_token", ref access_token);
			s.Serialize("expires_in", ref expires_in);
			s.Serialize("refresh_token", ref refresh_token);
			if ((s.HasKey("scopes")
						|| ((scopes != default(OptionalStringArray))
						&& scopes.HasValue)))
			{
				s.SerializeArray("scopes", ref scopes.Value);
				scopes.HasValue = true;
			}
			s.Serialize("token_type", ref token_type);
		}
	}
	[System.SerializableAttribute()]
	public class Token : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalBool revoked = new OptionalBool();
		public OptionalLong gamerTag = new OptionalLong();
		public OptionalStringArray scopes = new OptionalStringArray();
		public OptionalLong accountId = new OptionalLong();
		public long cid;
		public OptionalString pid = new OptionalString();
		public OptionalLong expiresMs = new OptionalLong();
		public string token;
		public string type;
		public OptionalString platform = new OptionalString();
		public OptionalString device = new OptionalString();
		public long created;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("revoked")
						|| ((revoked != default(OptionalBool))
						&& revoked.HasValue)))
			{
				s.Serialize("revoked", ref revoked.Value);
				revoked.HasValue = true;
			}
			if ((s.HasKey("gamerTag")
						|| ((gamerTag != default(OptionalLong))
						&& gamerTag.HasValue)))
			{
				s.Serialize("gamerTag", ref gamerTag.Value);
				gamerTag.HasValue = true;
			}
			if ((s.HasKey("scopes")
						|| ((scopes != default(OptionalStringArray))
						&& scopes.HasValue)))
			{
				s.SerializeArray("scopes", ref scopes.Value);
				scopes.HasValue = true;
			}
			if ((s.HasKey("accountId")
						|| ((accountId != default(OptionalLong))
						&& accountId.HasValue)))
			{
				s.Serialize("accountId", ref accountId.Value);
				accountId.HasValue = true;
			}
			s.Serialize("cid", ref cid);
			if ((s.HasKey("pid")
						|| ((pid != default(OptionalString))
						&& pid.HasValue)))
			{
				s.Serialize("pid", ref pid.Value);
				pid.HasValue = true;
			}
			if ((s.HasKey("expiresMs")
						|| ((expiresMs != default(OptionalLong))
						&& expiresMs.HasValue)))
			{
				s.Serialize("expiresMs", ref expiresMs.Value);
				expiresMs.HasValue = true;
			}
			s.Serialize("token", ref token);
			s.Serialize("type", ref type);
			if ((s.HasKey("platform")
						|| ((platform != default(OptionalString))
						&& platform.HasValue)))
			{
				s.Serialize("platform", ref platform.Value);
				platform.HasValue = true;
			}
			if ((s.HasKey("device")
						|| ((device != default(OptionalString))
						&& device.HasValue)))
			{
				s.Serialize("device", ref device.Value);
				device.HasValue = true;
			}
			s.Serialize("created", ref created);
		}
	}
	[System.SerializableAttribute()]
	public class ObjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string objectKey;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("objectKey", ref objectKey);
		}
	}
	[System.SerializableAttribute()]
	public class ObjectRequests : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalObjectRequestArray request = new OptionalObjectRequestArray();
		public OptionalLong playerId = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("request")
						|| ((request != default(OptionalObjectRequestArray))
						&& request.HasValue)))
			{
				s.SerializeArray("request", ref request.Value);
				request.HasValue = true;
			}
			if ((s.HasKey("playerId")
						|| ((playerId != default(OptionalLong))
						&& playerId.HasValue)))
			{
				s.Serialize("playerId", ref playerId.Value);
				playerId.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ObjectsMetadataResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ObjectMetadataResponse[] response;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("response", ref response);
		}
	}
	[System.SerializableAttribute()]
	public class URLSResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public URLResponse[] response;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("response", ref response);
		}
	}
	[System.SerializableAttribute()]
	public class URLResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string url;
		public string objectKey;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("url", ref url);
			s.Serialize("objectKey", ref objectKey);
		}
	}
	[System.SerializableAttribute()]
	public class Reference : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class ObjectMetadataResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string objectKey;
		public MapOfString metadata = new MapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("objectKey", ref objectKey);
			s.SerializeDictionary<MapOfString, string>("metadata", ref metadata);
		}
	}
	[System.SerializableAttribute()]
	public class MetadataPair : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string key;
		public string value;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("key", ref key);
			s.Serialize("value", ref value);
		}
	}
	[System.SerializableAttribute()]
	public class Manifest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public Reference[] manifest;
		public long created;
		public bool replacement;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.SerializeArray("manifest", ref manifest);
			s.Serialize("created", ref created);
			s.Serialize("replacement", ref replacement);
		}
	}
	[System.SerializableAttribute()]
	public class PlayerBasicCloudDataRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong playerId = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("playerId")
						|| ((playerId != default(OptionalLong))
						&& playerId.HasValue)))
			{
				s.Serialize("playerId", ref playerId.Value);
				playerId.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class UploadRequestsFromPortal : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public UploadRequestFromPortal[] request;
		public OptionalLong playerId = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("request", ref request);
			if ((s.HasKey("playerId")
						|| ((playerId != default(OptionalLong))
						&& playerId.HasValue)))
			{
				s.Serialize("playerId", ref playerId.Value);
				playerId.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class UploadRequests : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public UploadRequest[] request;
		public OptionalLong playerId = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("request", ref request);
			if ((s.HasKey("playerId")
						|| ((playerId != default(OptionalLong))
						&& playerId.HasValue)))
			{
				s.Serialize("playerId", ref playerId.Value);
				playerId.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ReplaceObjectsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long sourcePlayerId;
		public long targetPlayerId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("sourcePlayerId", ref sourcePlayerId);
			s.Serialize("targetPlayerId", ref targetPlayerId);
		}
	}
	[System.SerializableAttribute()]
	public class UploadRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string objectKey;
		public OptionalLong lastModified = new OptionalLong();
		public OptionalString checksum = new OptionalString();
		public long sizeInBytes;
		public OptionalMetadataPairArray metadata = new OptionalMetadataPairArray();
		public OptionalBool deleted = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("objectKey", ref objectKey);
			if ((s.HasKey("lastModified")
						|| ((lastModified != default(OptionalLong))
						&& lastModified.HasValue)))
			{
				s.Serialize("lastModified", ref lastModified.Value);
				lastModified.HasValue = true;
			}
			if ((s.HasKey("checksum")
						|| ((checksum != default(OptionalString))
						&& checksum.HasValue)))
			{
				s.Serialize("checksum", ref checksum.Value);
				checksum.HasValue = true;
			}
			s.Serialize("sizeInBytes", ref sizeInBytes);
			if ((s.HasKey("metadata")
						|| ((metadata != default(OptionalMetadataPairArray))
						&& metadata.HasValue)))
			{
				s.SerializeArray("metadata", ref metadata.Value);
				metadata.HasValue = true;
			}
			if ((s.HasKey("deleted")
						|| ((deleted != default(OptionalBool))
						&& deleted.HasValue)))
			{
				s.Serialize("deleted", ref deleted.Value);
				deleted.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class UploadRequestFromPortal : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string objectKey;
		public long sizeInBytes;
		public OptionalMetadataPairArray metadata = new OptionalMetadataPairArray();
		public OptionalLong lastModified = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("objectKey", ref objectKey);
			s.Serialize("sizeInBytes", ref sizeInBytes);
			if ((s.HasKey("metadata")
						|| ((metadata != default(OptionalMetadataPairArray))
						&& metadata.HasValue)))
			{
				s.SerializeArray("metadata", ref metadata.Value);
				metadata.HasValue = true;
			}
			if ((s.HasKey("lastModified")
						|| ((lastModified != default(OptionalLong))
						&& lastModified.HasValue)))
			{
				s.Serialize("lastModified", ref lastModified.Value);
				lastModified.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class CompletePurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long txid;
		public string receipt;
		public string priceInLocalCurrency;
		public string isoCurrencySymbol;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("txid", ref txid);
			s.Serialize("receipt", ref receipt);
			s.Serialize("priceInLocalCurrency", ref priceInLocalCurrency);
			s.Serialize("isoCurrencySymbol", ref isoCurrencySymbol);
		}
	}
	[System.SerializableAttribute()]
	public class GetProductsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ProductView[] products;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("products", ref products);
		}
	}
	[System.SerializableAttribute()]
	public class TrackPurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public double priceInLocalCurrency;
		public string skuName;
		public string skuProductId;
		public string store;
		public ItemCreateRequest[] obtainItems;
		public CurrencyChange[] obtainCurrency;
		public string purchaseId;
		public string isoCurrencySymbol;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("priceInLocalCurrency", ref priceInLocalCurrency);
			s.Serialize("skuName", ref skuName);
			s.Serialize("skuProductId", ref skuProductId);
			s.Serialize("store", ref store);
			s.SerializeArray("obtainItems", ref obtainItems);
			s.SerializeArray("obtainCurrency", ref obtainCurrency);
			s.Serialize("purchaseId", ref purchaseId);
			s.Serialize("isoCurrencySymbol", ref isoCurrencySymbol);
		}
	}
	[System.SerializableAttribute()]
	public class FacebookUpdatedEntry : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public long time;
		public string[] changed_fields;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.Serialize("time", ref time);
			s.SerializeArray("changed_fields", ref changed_fields);
		}
	}
	[System.SerializableAttribute()]
	public class GetPricesRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long steamId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("steamId", ref steamId);
		}
	}
	[System.SerializableAttribute()]
	public class FacebookPaymentUpdateRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string objectKey;
		public FacebookUpdatedEntry[] entry;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("object", ref objectKey);
			s.SerializeArray("entry", ref entry);
		}
	}
	[System.SerializableAttribute()]
	public class GetOrderInfoRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string orderId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("orderId", ref orderId);
		}
	}
	[System.SerializableAttribute()]
	public class ListAuditRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString providerid = new OptionalString();
		public OptionalString provider = new OptionalString();
		public OptionalString state = new OptionalString();
		public OptionalLong txid = new OptionalLong();
		public OptionalLong player = new OptionalLong();
		public OptionalInt start = new OptionalInt();
		public OptionalInt limit = new OptionalInt();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("providerid")
						|| ((providerid != default(OptionalString))
						&& providerid.HasValue)))
			{
				s.Serialize("providerid", ref providerid.Value);
				providerid.HasValue = true;
			}
			if ((s.HasKey("provider")
						|| ((provider != default(OptionalString))
						&& provider.HasValue)))
			{
				s.Serialize("provider", ref provider.Value);
				provider.HasValue = true;
			}
			if ((s.HasKey("state")
						|| ((state != default(OptionalString))
						&& state.HasValue)))
			{
				s.Serialize("state", ref state.Value);
				state.HasValue = true;
			}
			if ((s.HasKey("txid")
						|| ((txid != default(OptionalLong))
						&& txid.HasValue)))
			{
				s.Serialize("txid", ref txid.Value);
				txid.HasValue = true;
			}
			if ((s.HasKey("player")
						|| ((player != default(OptionalLong))
						&& player.HasValue)))
			{
				s.Serialize("player", ref player.Value);
				player.HasValue = true;
			}
			if ((s.HasKey("start")
						|| ((start != default(OptionalInt))
						&& start.HasValue)))
			{
				s.Serialize("start", ref start.Value);
				start.HasValue = true;
			}
			if ((s.HasKey("limit")
						|| ((limit != default(OptionalInt))
						&& limit.HasValue)))
			{
				s.Serialize("limit", ref limit.Value);
				limit.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ProductView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public double localizedPrice;
		public string sku;
		public string description;
		public string isoCurrencyCode;
		public string localizedPriceString;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("localizedPrice", ref localizedPrice);
			s.Serialize("sku", ref sku);
			s.Serialize("description", ref description);
			s.Serialize("isoCurrencyCode", ref isoCurrencyCode);
			s.Serialize("localizedPriceString", ref localizedPriceString);
		}
	}
	[System.SerializableAttribute()]
	public class FailPurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long txid;
		public string reason;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("txid", ref txid);
			s.Serialize("reason", ref reason);
		}
	}
	[System.SerializableAttribute()]
	public class BeginPurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string purchaseId;
		public OptionalString language = new OptionalString();
		public OptionalString time = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("purchaseId", ref purchaseId);
			if ((s.HasKey("language")
						|| ((language != default(OptionalString))
						&& language.HasValue)))
			{
				s.Serialize("language", ref language.Value);
				language.HasValue = true;
			}
			if ((s.HasKey("time")
						|| ((time != default(OptionalString))
						&& time.HasValue)))
			{
				s.Serialize("time", ref time.Value);
				time.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class SteamOrderInfoItem : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long vat;
		public long amount;
		public long itemid;
		public long qty;
		public string itemstatus;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("vat", ref vat);
			s.Serialize("amount", ref amount);
			s.Serialize("itemid", ref itemid);
			s.Serialize("qty", ref qty);
			s.Serialize("itemstatus", ref itemstatus);
		}
	}
	[System.SerializableAttribute()]
	public class VerifyPurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string receipt;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("receipt", ref receipt);
		}
	}
	[System.SerializableAttribute()]
	public class SubscriptionVerificationRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string hubMode;
		public string hubChallenge;
		public string hubVerifyToken;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("hubMode", ref hubMode);
			s.Serialize("hubChallenge", ref hubChallenge);
			s.Serialize("hubVerifyToken", ref hubVerifyToken);
		}
	}
	[System.SerializableAttribute()]
	public class GetProductResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public string name;
		public string description;
		public int price;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.Serialize("name", ref name);
			s.Serialize("description", ref description);
			s.Serialize("price", ref price);
		}
	}
	[System.SerializableAttribute()]
	public class LocalizedPriceMap : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string currency;
		public LocalizedPrice[] prices;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("currency", ref currency);
			s.SerializeArray("prices", ref prices);
		}
	}
	[System.SerializableAttribute()]
	public class LocalizedPrice : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long to;
		public long price;
		public double priceLocalized;
		public string priceLocalizedString;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("to", ref to);
			s.Serialize("price", ref price);
			s.Serialize("priceLocalized", ref priceLocalized);
			s.Serialize("priceLocalizedString", ref priceLocalizedString);
		}
	}
	[System.SerializableAttribute()]
	public class PaymentResultResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string result;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("result", ref result);
		}
	}
	[System.SerializableAttribute()]
	public class BeginPurchaseResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long txid;
		public OptionalString access_token = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("txid", ref txid);
			if ((s.HasKey("access_token")
						|| ((access_token != default(OptionalString))
						&& access_token.HasValue)))
			{
				s.Serialize("access_token", ref access_token.Value);
				access_token.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class SteamOrderInfoResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string usstate;
		public SteamOrderInfoItem[] items;
		public string country;
		public string timecreated;
		public long transid;
		public string status;
		public long orderid;
		public long steamid;
		public string currency;
		public string time;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("usstate", ref usstate);
			s.SerializeArray("items", ref items);
			s.Serialize("country", ref country);
			s.Serialize("timecreated", ref timecreated);
			s.Serialize("transid", ref transid);
			s.Serialize("status", ref status);
			s.Serialize("orderid", ref orderid);
			s.Serialize("steamid", ref steamid);
			s.Serialize("currency", ref currency);
			s.Serialize("time", ref time);
		}
	}
	[System.SerializableAttribute()]
	public class GetProductRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string sku;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("sku", ref sku);
		}
	}
	[System.SerializableAttribute()]
	public class CancelPurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long txid;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("txid", ref txid);
		}
	}
	[System.SerializableAttribute()]
	public class SteamAuthRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string ticket;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("ticket", ref ticket);
		}
	}
	[System.SerializableAttribute()]
	public class FacebookPaymentUpdateResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string result;
		public string contentType;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("result", ref result);
			s.Serialize("contentType", ref contentType);
		}
	}
	[System.SerializableAttribute()]
	public class SubscriptionVerificationResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string hubChallenge;
		public string contentType;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("hubChallenge", ref hubChallenge);
			s.Serialize("contentType", ref contentType);
		}
	}
	[System.SerializableAttribute()]
	public class EmptyRsp : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class SendNotification : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString title = new OptionalString();
		public OptionalString body = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("title")
						|| ((title != default(OptionalString))
						&& title.HasValue)))
			{
				s.Serialize("title", ref title.Value);
				title.HasValue = true;
			}
			if ((s.HasKey("body")
						|| ((body != default(OptionalString))
						&& body.HasValue)))
			{
				s.Serialize("body", ref body.Value);
				body.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class RegisterReq : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string provider;
		public string token;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("provider", ref provider);
			s.Serialize("token", ref token);
		}
	}
	[System.SerializableAttribute()]
	public class SendReq : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public SendMsg[] msgs;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("msgs", ref msgs);
		}
	}
	[System.SerializableAttribute()]
	public class SendMsg : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long[] to;
		public OptionalSendNotification notification = new OptionalSendNotification();
		public OptionalMapOfString data = new OptionalMapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("to", ref to);
			if ((s.HasKey("data")
						|| ((data != default(OptionalMapOfString))
						&& data.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("data", ref data.Value);
				data.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class NotificationRequestData : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalStringArray messageParams = new OptionalStringArray();
		public OptionalString channel = new OptionalString();
		public OptionalString messageKey = new OptionalString();
		public OptionalString context = new OptionalString();
		public OptionalString shard = new OptionalString();
		public OptionalMapOfString meta = new OptionalMapOfString();
		public OptionalString messageFull = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("messageParams")
						|| ((messageParams != default(OptionalStringArray))
						&& messageParams.HasValue)))
			{
				s.SerializeArray("messageParams", ref messageParams.Value);
				messageParams.HasValue = true;
			}
			if ((s.HasKey("channel")
						|| ((channel != default(OptionalString))
						&& channel.HasValue)))
			{
				s.Serialize("channel", ref channel.Value);
				channel.HasValue = true;
			}
			if ((s.HasKey("messageKey")
						|| ((messageKey != default(OptionalString))
						&& messageKey.HasValue)))
			{
				s.Serialize("messageKey", ref messageKey.Value);
				messageKey.HasValue = true;
			}
			if ((s.HasKey("context")
						|| ((context != default(OptionalString))
						&& context.HasValue)))
			{
				s.Serialize("context", ref context.Value);
				context.HasValue = true;
			}
			if ((s.HasKey("shard")
						|| ((shard != default(OptionalString))
						&& shard.HasValue)))
			{
				s.Serialize("shard", ref shard.Value);
				shard.HasValue = true;
			}
			if ((s.HasKey("meta")
						|| ((meta != default(OptionalMapOfString))
						&& meta.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("meta", ref meta.Value);
				meta.HasValue = true;
			}
			if ((s.HasKey("messageFull")
						|| ((messageFull != default(OptionalString))
						&& messageFull.HasValue)))
			{
				s.Serialize("messageFull", ref messageFull.Value);
				messageFull.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ServerEvent : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string eventKey;
		public OptionalString payload = new OptionalString();
		public bool toAll;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("event", ref eventKey);
			if ((s.HasKey("payload")
						|| ((payload != default(OptionalString))
						&& payload.HasValue)))
			{
				s.Serialize("payload", ref payload.Value);
				payload.HasValue = true;
			}
			s.Serialize("toAll", ref toAll);
		}
	}
	[System.SerializableAttribute()]
	public class NotificationRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public NotificationRequestData payload = new NotificationRequestData();
		public OptionalString customChannelSuffix = new OptionalString();
		public OptionalLong dbid = new OptionalLong();
		public OptionalBool useSignalWhenPossible = new OptionalBool();
		public OptionalLongArray dbids = new OptionalLongArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("customChannelSuffix")
						|| ((customChannelSuffix != default(OptionalString))
						&& customChannelSuffix.HasValue)))
			{
				s.Serialize("customChannelSuffix", ref customChannelSuffix.Value);
				customChannelSuffix.HasValue = true;
			}
			if ((s.HasKey("dbid")
						|| ((dbid != default(OptionalLong))
						&& dbid.HasValue)))
			{
				s.Serialize("dbid", ref dbid.Value);
				dbid.HasValue = true;
			}
			if ((s.HasKey("useSignalWhenPossible")
						|| ((useSignalWhenPossible != default(OptionalBool))
						&& useSignalWhenPossible.HasValue)))
			{
				s.Serialize("useSignalWhenPossible", ref useSignalWhenPossible.Value);
				useSignalWhenPossible.HasValue = true;
			}
			if ((s.HasKey("dbids")
						|| ((dbids != default(OptionalLongArray))
						&& dbids.HasValue)))
			{
				s.SerializeArray("dbids", ref dbids.Value);
				dbids.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class SubscriberDetailsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string customChannelPrefix;
		public string playerForRealmChannel;
		public string authenticationKey;
		public OptionalString gameGlobalNotificationChannel = new OptionalString();
		public string gameNotificationChannel;
		public string subscribeKey;
		public string playerChannel;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("customChannelPrefix", ref customChannelPrefix);
			s.Serialize("playerForRealmChannel", ref playerForRealmChannel);
			s.Serialize("authenticationKey", ref authenticationKey);
			if ((s.HasKey("gameGlobalNotificationChannel")
						|| ((gameGlobalNotificationChannel != default(OptionalString))
						&& gameGlobalNotificationChannel.HasValue)))
			{
				s.Serialize("gameGlobalNotificationChannel", ref gameGlobalNotificationChannel.Value);
				gameGlobalNotificationChannel.HasValue = true;
			}
			s.Serialize("gameNotificationChannel", ref gameNotificationChannel);
			s.Serialize("subscribeKey", ref subscribeKey);
			s.Serialize("playerChannel", ref playerChannel);
		}
	}
	[System.SerializableAttribute()]
	public class Promotable : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string checksum;
		public long createdAt;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("checksum", ref checksum);
			s.Serialize("createdAt", ref createdAt);
		}
	}
	[System.SerializableAttribute()]
	public class ArchiveProjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string pid;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("pid", ref pid);
		}
	}
	[System.SerializableAttribute()]
	public class UpdateGameHierarchyRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string rootPID;
		public ProjectView[] projects;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("rootPID", ref rootPID);
			s.SerializeArray("projects", ref projects);
		}
	}
	[System.SerializableAttribute()]
	public class LaunchMessageListResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string[] files;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("files", ref files);
		}
	}
	[System.SerializableAttribute()]
	public class CustomerResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public Customer customer = new Customer();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class CustomersResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public Customer[] result;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("result", ref result);
		}
	}
	[System.SerializableAttribute()]
	public class CreatePlanRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public OptionalStringArray messageBusAnalytics = new OptionalStringArray();
		public string memcachedHosts;
		public bool mongoSSL;
		public string platformJBDC;
		public bool sharded;
		public string mongoHosts;
		public OptionalStringArray messageBusCommon = new OptionalStringArray();
		public RedisShardRequest[] redisShards;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			if ((s.HasKey("messageBusAnalytics")
						|| ((messageBusAnalytics != default(OptionalStringArray))
						&& messageBusAnalytics.HasValue)))
			{
				s.SerializeArray("messageBusAnalytics", ref messageBusAnalytics.Value);
				messageBusAnalytics.HasValue = true;
			}
			s.Serialize("memcachedHosts", ref memcachedHosts);
			s.Serialize("mongoSSL", ref mongoSSL);
			s.Serialize("platformJBDC", ref platformJBDC);
			s.Serialize("sharded", ref sharded);
			s.Serialize("mongoHosts", ref mongoHosts);
			if ((s.HasKey("messageBusCommon")
						|| ((messageBusCommon != default(OptionalStringArray))
						&& messageBusCommon.HasValue)))
			{
				s.SerializeArray("messageBusCommon", ref messageBusCommon.Value);
				messageBusCommon.HasValue = true;
			}
			s.SerializeArray("redisShards", ref redisShards);
		}
	}
	[System.SerializableAttribute()]
	public class ContentLimits : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInt maxDistinctContentIds = new OptionalInt();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("maxDistinctContentIds")
						|| ((maxDistinctContentIds != default(OptionalInt))
						&& maxDistinctContentIds.HasValue)))
			{
				s.Serialize("maxDistinctContentIds", ref maxDistinctContentIds.Value);
				maxDistinctContentIds.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ServiceLimits : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalBeamoLimits beamo = new OptionalBeamoLimits();
		public OptionalContentLimits content = new OptionalContentLimits();
		public OptionalGatewayLimits gateway = new OptionalGatewayLimits();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class GatewayLimits : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public int maxConcurrentRequests;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("maxConcurrentRequests", ref maxConcurrentRequests);
		}
	}
	[System.SerializableAttribute()]
	public class NewCustomerRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string projectName;
		public string email;
		public OptionalString customerName = new OptionalString();
		public OptionalBool hierarchy = new OptionalBool();
		public OptionalString alias = new OptionalString();
		public string password;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("projectName", ref projectName);
			s.Serialize("email", ref email);
			if ((s.HasKey("customerName")
						|| ((customerName != default(OptionalString))
						&& customerName.HasValue)))
			{
				s.Serialize("customerName", ref customerName.Value);
				customerName.HasValue = true;
			}
			if ((s.HasKey("hierarchy")
						|| ((hierarchy != default(OptionalBool))
						&& hierarchy.HasValue)))
			{
				s.Serialize("hierarchy", ref hierarchy.Value);
				hierarchy.HasValue = true;
			}
			if ((s.HasKey("alias")
						|| ((alias != default(OptionalString))
						&& alias.HasValue)))
			{
				s.Serialize("alias", ref alias.Value);
				alias.HasValue = true;
			}
			s.Serialize("password", ref password);
		}
	}
	[System.SerializableAttribute()]
	public class PromoteRealmResponseOld : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string sourcePid;
		public RealmPromotion[] promotions;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("sourcePid", ref sourcePid);
			s.SerializeArray("promotions", ref promotions);
		}
	}
	[System.SerializableAttribute()]
	public class CustomerView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long cid;
		public string name;
		public OptionalString alias = new OptionalString();
		public ProjectView[] projects;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("cid", ref cid);
			s.Serialize("name", ref name);
			if ((s.HasKey("alias")
						|| ((alias != default(OptionalString))
						&& alias.HasValue)))
			{
				s.Serialize("alias", ref alias.Value);
				alias.HasValue = true;
			}
			s.SerializeArray("projects", ref projects);
		}
	}
	[System.SerializableAttribute()]
	public class GetGameResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ProjectView[] projects;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("projects", ref projects);
		}
	}
	[System.SerializableAttribute()]
	public class PromoteRealmRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string sourcePid;
		public OptionalStringArray promotions = new OptionalStringArray();
		public OptionalStringArray contentManifestIds = new OptionalStringArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("sourcePid", ref sourcePid);
			if ((s.HasKey("promotions")
						|| ((promotions != default(OptionalStringArray))
						&& promotions.HasValue)))
			{
				s.SerializeArray("promotions", ref promotions.Value);
				promotions.HasValue = true;
			}
			if ((s.HasKey("contentManifestIds")
						|| ((contentManifestIds != default(OptionalStringArray))
						&& contentManifestIds.HasValue)))
			{
				s.SerializeArray("contentManifestIds", ref contentManifestIds.Value);
				contentManifestIds.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class CreateLaunchMessageRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string body;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("body", ref body);
		}
	}
	[System.SerializableAttribute()]
	public class RealmConfigSaveRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public MapOfString config = new MapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeDictionary<MapOfString, string>("config", ref config);
		}
	}
	[System.SerializableAttribute()]
	public class PromotionScope : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public Promotion[] promotions;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.SerializeArray("promotions", ref promotions);
		}
	}
	[System.SerializableAttribute()]
	public class ServicePlan : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString minCustomerStatusSaved = new OptionalString();
		public string name;
		public DataDomain dataDomain = new DataDomain();
		public OptionalServiceLimits limits = new OptionalServiceLimits();
		public OptionalLong created = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("minCustomerStatusSaved")
						|| ((minCustomerStatusSaved != default(OptionalString))
						&& minCustomerStatusSaved.HasValue)))
			{
				s.Serialize("minCustomerStatusSaved", ref minCustomerStatusSaved.Value);
				minCustomerStatusSaved.HasValue = true;
			}
			s.Serialize("name", ref name);
			if ((s.HasKey("created")
						|| ((created != default(OptionalLong))
						&& created.HasValue)))
			{
				s.Serialize("created", ref created.Value);
				created.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class CustomerViewResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public CustomerView customer = new CustomerView();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class AliasAvailableResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string alias;
		public bool available;
		public long cid;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("alias", ref alias);
			s.Serialize("available", ref available);
			s.Serialize("cid", ref cid);
		}
	}
	[System.SerializableAttribute()]
	public class RealmPromotion : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public Promotable source = new Promotable();
		public Promotable destination = new Promotable();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
		}
	}
	[System.SerializableAttribute()]
	public class BeamoLimits : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string maxContainerSize;
		public int maxRunningContainersPerService;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("maxContainerSize", ref maxContainerSize);
			s.Serialize("maxRunningContainersPerService", ref maxRunningContainersPerService);
		}
	}
	[System.SerializableAttribute()]
	public class Project : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString displayName = new OptionalString();
		public string secret;
		public OptionalString parent = new OptionalString();
		public OptionalStringArray children = new OptionalStringArray();
		public string name;
		public MapOfString customCharts = new MapOfString();
		public bool root;
		public bool archived;
		public OptionalMapOfString config = new OptionalMapOfString();
		public OptionalString status = new OptionalString();
		public OptionalBool sharded = new OptionalBool();
		public OptionalBool sigval = new OptionalBool();
		public string plan;
		public OptionalLong created = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("displayName")
						|| ((displayName != default(OptionalString))
						&& displayName.HasValue)))
			{
				s.Serialize("displayName", ref displayName.Value);
				displayName.HasValue = true;
			}
			s.Serialize("secret", ref secret);
			if ((s.HasKey("parent")
						|| ((parent != default(OptionalString))
						&& parent.HasValue)))
			{
				s.Serialize("parent", ref parent.Value);
				parent.HasValue = true;
			}
			if ((s.HasKey("children")
						|| ((children != default(OptionalStringArray))
						&& children.HasValue)))
			{
				s.SerializeArray("children", ref children.Value);
				children.HasValue = true;
			}
			s.Serialize("name", ref name);
			s.SerializeDictionary<MapOfString, string>("customCharts", ref customCharts);
			s.Serialize("root", ref root);
			s.Serialize("archived", ref archived);
			if ((s.HasKey("config")
						|| ((config != default(OptionalMapOfString))
						&& config.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("config", ref config.Value);
				config.HasValue = true;
			}
			if ((s.HasKey("status")
						|| ((status != default(OptionalString))
						&& status.HasValue)))
			{
				s.Serialize("status", ref status.Value);
				status.HasValue = true;
			}
			if ((s.HasKey("sharded")
						|| ((sharded != default(OptionalBool))
						&& sharded.HasValue)))
			{
				s.Serialize("sharded", ref sharded.Value);
				sharded.HasValue = true;
			}
			if ((s.HasKey("sigval")
						|| ((sigval != default(OptionalBool))
						&& sigval.HasValue)))
			{
				s.Serialize("sigval", ref sigval.Value);
				sigval.HasValue = true;
			}
			s.Serialize("plan", ref plan);
			if ((s.HasKey("created")
						|| ((created != default(OptionalLong))
						&& created.HasValue)))
			{
				s.Serialize("created", ref created.Value);
				created.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class RedisShardRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public int shardId;
		public string masterHost;
		public string slaveHosts;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("shardId", ref shardId);
			s.Serialize("masterHost", ref masterHost);
			s.Serialize("slaveHosts", ref slaveHosts);
		}
	}
	[System.SerializableAttribute()]
	public class RealmConfigResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public MapOfString config = new MapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeDictionary<MapOfString, string>("config", ref config);
		}
	}
	[System.SerializableAttribute()]
	public class Customer : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public OptionalString paymentStatus = new OptionalString();
		public OptionalString image = new OptionalString();
		public OptionalString contact = new OptionalString();
		public OptionalString alias = new OptionalString();
		public long cid;
		public OptionalLong updated = new OptionalLong();
		public OptionalString crm_link = new OptionalString();
		public Project[] projects;
		public Account[] accounts;
		public OptionalLong created = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			if ((s.HasKey("paymentStatus")
						|| ((paymentStatus != default(OptionalString))
						&& paymentStatus.HasValue)))
			{
				s.Serialize("paymentStatus", ref paymentStatus.Value);
				paymentStatus.HasValue = true;
			}
			if ((s.HasKey("image")
						|| ((image != default(OptionalString))
						&& image.HasValue)))
			{
				s.Serialize("image", ref image.Value);
				image.HasValue = true;
			}
			if ((s.HasKey("contact")
						|| ((contact != default(OptionalString))
						&& contact.HasValue)))
			{
				s.Serialize("contact", ref contact.Value);
				contact.HasValue = true;
			}
			if ((s.HasKey("alias")
						|| ((alias != default(OptionalString))
						&& alias.HasValue)))
			{
				s.Serialize("alias", ref alias.Value);
				alias.HasValue = true;
			}
			s.Serialize("cid", ref cid);
			if ((s.HasKey("updated")
						|| ((updated != default(OptionalLong))
						&& updated.HasValue)))
			{
				s.Serialize("updated", ref updated.Value);
				updated.HasValue = true;
			}
			if ((s.HasKey("crm_link")
						|| ((crm_link != default(OptionalString))
						&& crm_link.HasValue)))
			{
				s.Serialize("crm_link", ref crm_link.Value);
				crm_link.HasValue = true;
			}
			s.SerializeArray("projects", ref projects);
			s.SerializeArray("accounts", ref accounts);
			if ((s.HasKey("created")
						|| ((created != default(OptionalLong))
						&& created.HasValue)))
			{
				s.Serialize("created", ref created.Value);
				created.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AliasAvailableRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string alias;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("alias", ref alias);
		}
	}
	[System.SerializableAttribute()]
	public class Promotion : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public Promotable source = new Promotable();
		public Promotable destination = new Promotable();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
		}
	}
	[System.SerializableAttribute()]
	public class GetGameRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string rootPID;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("rootPID", ref rootPID);
		}
	}
	[System.SerializableAttribute()]
	public class NewCustomerResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string projectName;
		public OptionalString alias = new OptionalString();
		public long cid;
		public string pid;
		public TokenResponse token = new TokenResponse();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("projectName", ref projectName);
			if ((s.HasKey("alias")
						|| ((alias != default(OptionalString))
						&& alias.HasValue)))
			{
				s.Serialize("alias", ref alias.Value);
				alias.HasValue = true;
			}
			s.Serialize("cid", ref cid);
			s.Serialize("pid", ref pid);
		}
	}
	[System.SerializableAttribute()]
	public class DataDomain : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalStringArray messageBusAnalytics = new OptionalStringArray();
		public string[] memcachedHosts;
		public bool mongoSharded;
		public OptionalBool mongoSSL = new OptionalBool();
		public string[] mongoHosts;
		public bool mongoSSLEnabled;
		public OptionalStringArray messageBusCommon = new OptionalStringArray();
		public OptionalRedisShardArray redisShards = new OptionalRedisShardArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("messageBusAnalytics")
						|| ((messageBusAnalytics != default(OptionalStringArray))
						&& messageBusAnalytics.HasValue)))
			{
				s.SerializeArray("messageBusAnalytics", ref messageBusAnalytics.Value);
				messageBusAnalytics.HasValue = true;
			}
			s.SerializeArray("memcachedHosts", ref memcachedHosts);
			s.Serialize("mongoSharded", ref mongoSharded);
			if ((s.HasKey("mongoSSL")
						|| ((mongoSSL != default(OptionalBool))
						&& mongoSSL.HasValue)))
			{
				s.Serialize("mongoSSL", ref mongoSSL.Value);
				mongoSSL.HasValue = true;
			}
			s.SerializeArray("mongoHosts", ref mongoHosts);
			s.Serialize("mongoSSLEnabled", ref mongoSSLEnabled);
			if ((s.HasKey("messageBusCommon")
						|| ((messageBusCommon != default(OptionalStringArray))
						&& messageBusCommon.HasValue)))
			{
				s.SerializeArray("messageBusCommon", ref messageBusCommon.Value);
				messageBusCommon.HasValue = true;
			}
			if ((s.HasKey("redisShards")
						|| ((redisShards != default(OptionalRedisShardArray))
						&& redisShards.HasValue)))
			{
				s.SerializeArray("redisShards", ref redisShards.Value);
				redisShards.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ServicePlansResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ServicePlan[] result;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("result", ref result);
		}
	}
	[System.SerializableAttribute()]
	public class RenameProjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string projectId;
		public string newName;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("projectId", ref projectId);
			s.Serialize("newName", ref newName);
		}
	}
	[System.SerializableAttribute()]
	public class NewGameRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string gameName;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("gameName", ref gameName);
		}
	}
	[System.SerializableAttribute()]
	public class CreateProjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public OptionalString plan = new OptionalString();
		public OptionalBool sharded = new OptionalBool();
		public OptionalString parent = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			if ((s.HasKey("plan")
						|| ((plan != default(OptionalString))
						&& plan.HasValue)))
			{
				s.Serialize("plan", ref plan.Value);
				plan.HasValue = true;
			}
			if ((s.HasKey("sharded")
						|| ((sharded != default(OptionalBool))
						&& sharded.HasValue)))
			{
				s.Serialize("sharded", ref sharded.Value);
				sharded.HasValue = true;
			}
			if ((s.HasKey("parent")
						|| ((parent != default(OptionalString))
						&& parent.HasValue)))
			{
				s.Serialize("parent", ref parent.Value);
				parent.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class UnarchiveProjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string projectId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("projectId", ref projectId);
		}
	}
	[System.SerializableAttribute()]
	public class RedisShard : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public int shardId;
		public string masterHost;
		public string[] slaveHosts;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("shardId", ref shardId);
			s.Serialize("masterHost", ref masterHost);
			s.SerializeArray("slaveHosts", ref slaveHosts);
		}
	}
	[System.SerializableAttribute()]
	public class PromoteRealmResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string sourcePid;
		public PromotionScope[] scopes;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("sourcePid", ref sourcePid);
			s.SerializeArray("scopes", ref scopes);
		}
	}
	[System.SerializableAttribute()]
	public class RemoveLaunchMessageRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string file;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("file", ref file);
		}
	}
	[System.SerializableAttribute()]
	public class ProjectView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString secret = new OptionalString();
		public OptionalString parent = new OptionalString();
		public OptionalStringArray children = new OptionalStringArray();
		public string projectName;
		public OptionalBool archived = new OptionalBool();
		public OptionalLong cid = new OptionalLong();
		public string pid;
		public OptionalBool sharded = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("secret")
						|| ((secret != default(OptionalString))
						&& secret.HasValue)))
			{
				s.Serialize("secret", ref secret.Value);
				secret.HasValue = true;
			}
			if ((s.HasKey("parent")
						|| ((parent != default(OptionalString))
						&& parent.HasValue)))
			{
				s.Serialize("parent", ref parent.Value);
				parent.HasValue = true;
			}
			if ((s.HasKey("children")
						|| ((children != default(OptionalStringArray))
						&& children.HasValue)))
			{
				s.SerializeArray("children", ref children.Value);
				children.HasValue = true;
			}
			s.Serialize("projectName", ref projectName);
			if ((s.HasKey("archived")
						|| ((archived != default(OptionalBool))
						&& archived.HasValue)))
			{
				s.Serialize("archived", ref archived.Value);
				archived.HasValue = true;
			}
			if ((s.HasKey("cid")
						|| ((cid != default(OptionalLong))
						&& cid.HasValue)))
			{
				s.Serialize("cid", ref cid.Value);
				cid.HasValue = true;
			}
			s.Serialize("pid", ref pid);
			if ((s.HasKey("sharded")
						|| ((sharded != default(OptionalBool))
						&& sharded.HasValue)))
			{
				s.Serialize("sharded", ref sharded.Value);
				sharded.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class InvitationDirection : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class FriendSource : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class Player : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string playerId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
		}
	}
	[System.SerializableAttribute()]
	public class Friend : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string playerId;
		public FriendSource source;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
			s.Serialize("source", ref source);
		}
	}
	[System.SerializableAttribute()]
	public class Invite : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string playerId;
		public InvitationDirection direction;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
			s.Serialize("direction", ref direction);
		}
	}
	[System.SerializableAttribute()]
	public class Social : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string playerId;
		public Friend[] friends;
		public Player[] blocked;
		public Invite[] invites;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
			s.SerializeArray("friends", ref friends);
			s.SerializeArray("blocked", ref blocked);
			s.SerializeArray("invites", ref invites);
		}
	}
	[System.SerializableAttribute()]
	public class GetSocialStatusesResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public Social[] statuses;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("statuses", ref statuses);
		}
	}
	[System.SerializableAttribute()]
	public class PlayerIdRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string playerId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
		}
	}
	[System.SerializableAttribute()]
	public class FriendshipStatus : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string playerId;
		public string friendId;
		public bool isBlocked;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("playerId", ref playerId);
			s.Serialize("friendId", ref friendId);
			s.Serialize("isBlocked", ref isBlocked);
		}
	}
	[System.SerializableAttribute()]
	public class MakeFriendshipRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long gamerTag;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("gamerTag", ref gamerTag);
		}
	}
	[System.SerializableAttribute()]
	public class GetSocialStatusesRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string[] playerIds;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("playerIds", ref playerIds);
		}
	}
	[System.SerializableAttribute()]
	public class ImportFriendsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string source;
		public string token;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("source", ref source);
			s.Serialize("token", ref token);
		}
	}
	[System.SerializableAttribute()]
	public class SendFriendRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long gamerTag;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("gamerTag", ref gamerTag);
		}
	}
	[System.SerializableAttribute()]
	public class CreateRoomResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public RoomInfo room = new RoomInfo();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class SendMessageResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public Message message = new Message();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class LeaveRoomRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string roomId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("roomId", ref roomId);
		}
	}
	[System.SerializableAttribute()]
	public class SendMessageRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string roomId;
		public string content;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("roomId", ref roomId);
			s.Serialize("content", ref content);
		}
	}
	[System.SerializableAttribute()]
	public class CreateRoomRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string roomName;
		public bool keepSubscribed;
		public long[] players;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("roomName", ref roomName);
			s.Serialize("keepSubscribed", ref keepSubscribed);
			s.SerializeArray("players", ref players);
		}
	}
	[System.SerializableAttribute()]
	public class RoomInfo : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public string name;
		public bool keepSubscribed;
		public OptionalLongArray players = new OptionalLongArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.Serialize("name", ref name);
			s.Serialize("keepSubscribed", ref keepSubscribed);
			if ((s.HasKey("players")
						|| ((players != default(OptionalLongArray))
						&& players.HasValue)))
			{
				s.SerializeArray("players", ref players.Value);
				players.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class LeaveRoomResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string removed;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("removed", ref removed);
		}
	}
	[System.SerializableAttribute()]
	public class GetRoomsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public RoomInfo[] rooms;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("rooms", ref rooms);
		}
	}
	[System.SerializableAttribute()]
	public class Message : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string roomId;
		public long gamerTag;
		public MapOfString reactions = new MapOfString();
		public long timestampMillis;
		public string censoredContent;
		public System.Guid messageId;
		public string content;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("roomId", ref roomId);
			s.Serialize("gamerTag", ref gamerTag);
			s.SerializeDictionary<MapOfString, string>("reactions", ref reactions);
			s.Serialize("timestampMillis", ref timestampMillis);
			s.Serialize("censoredContent", ref censoredContent);
			s.Serialize("messageId", ref messageId);
			s.Serialize("content", ref content);
		}
	}
	[System.SerializableAttribute()]
	public class ChatGetRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString scope = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("scope")
						|| ((scope != default(OptionalString))
						&& scope.HasValue)))
			{
				s.Serialize("scope", ref scope.Value);
				scope.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class MatchUpdate : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long[] players;
		public OptionalLong secondsRemaining = new OptionalLong();
		public bool minPlayersReached;
		public bool gameStarted;
		public string game;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("players", ref players);
			if ((s.HasKey("secondsRemaining")
						|| ((secondsRemaining != default(OptionalLong))
						&& secondsRemaining.HasValue)))
			{
				s.Serialize("secondsRemaining", ref secondsRemaining.Value);
				secondsRemaining.HasValue = true;
			}
			s.Serialize("minPlayersReached", ref minPlayersReached);
			s.Serialize("gameStarted", ref gameStarted);
			s.Serialize("game", ref game);
		}
	}
	[System.SerializableAttribute()]
	public class OfferDefinition : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string[] titles;
		public string symbol;
		public OptionalItemCreateRequestArray obtainItems = new OptionalItemCreateRequestArray();
		public OptionalCommerceLootRoll lootRoll = new OptionalCommerceLootRoll();
		public OptionalCurrencyChangeArray obtainCurrency = new OptionalCurrencyChangeArray();
		public OptionalString metadata = new OptionalString();
		public string[] images;
		public string[] descriptions;
		public string[] obtain;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("titles", ref titles);
			s.Serialize("symbol", ref symbol);
			if ((s.HasKey("obtainItems")
						|| ((obtainItems != default(OptionalItemCreateRequestArray))
						&& obtainItems.HasValue)))
			{
				s.SerializeArray("obtainItems", ref obtainItems.Value);
				obtainItems.HasValue = true;
			}
			if ((s.HasKey("obtainCurrency")
						|| ((obtainCurrency != default(OptionalCurrencyChangeArray))
						&& obtainCurrency.HasValue)))
			{
				s.SerializeArray("obtainCurrency", ref obtainCurrency.Value);
				obtainCurrency.HasValue = true;
			}
			if ((s.HasKey("metadata")
						|| ((metadata != default(OptionalString))
						&& metadata.HasValue)))
			{
				s.Serialize("metadata", ref metadata.Value);
				metadata.HasValue = true;
			}
			s.SerializeArray("images", ref images);
			s.SerializeArray("descriptions", ref descriptions);
			s.SerializeArray("obtain", ref obtain);
		}
	}
	[System.SerializableAttribute()]
	public class EntitlementRequirement : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string symbol;
		public string constraint;
		public string state;
		public OptionalString specialization = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("symbol", ref symbol);
			s.Serialize("constraint", ref constraint);
			s.Serialize("state", ref state);
			if ((s.HasKey("specialization")
						|| ((specialization != default(OptionalString))
						&& specialization.HasValue)))
			{
				s.Serialize("specialization", ref specialization.Value);
				specialization.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GetSkusReq : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong version = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("version")
						|| ((version != default(OptionalLong))
						&& version.HasValue)))
			{
				s.Serialize("version", ref version.Value);
				version.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class Listing : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public CohortRequirement[] cohortRequirements;
		public string offerSymbol;
		public OptionalInt purchaseLimit = new OptionalInt();
		public Price price = new Price();
		public PlayerStatRequirement[] playerStatRequirements;
		public OptionalMapOfString buttonText = new OptionalMapOfString();
		public OptionalInt scheduleInstancePurchaseLimit = new OptionalInt();
		public EntitlementRequirement[] entitlementRequirements;
		public string symbol;
		public MapOfString clientData = new MapOfString();
		public OptionalSchedule schedule = new OptionalSchedule();
		public OptionalInt activeDurationCoolDownSeconds = new OptionalInt();
		public OptionalInt activeDurationSeconds = new OptionalInt();
		public OptionalInt activeDurationPurchaseLimit = new OptionalInt();
		public OfferRequirement[] offerRequirements;
		public OptionalPeriod activePeriod = new OptionalPeriod();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("cohortRequirements", ref cohortRequirements);
			s.Serialize("offerSymbol", ref offerSymbol);
			if ((s.HasKey("purchaseLimit")
						|| ((purchaseLimit != default(OptionalInt))
						&& purchaseLimit.HasValue)))
			{
				s.Serialize("purchaseLimit", ref purchaseLimit.Value);
				purchaseLimit.HasValue = true;
			}
			s.SerializeArray("playerStatRequirements", ref playerStatRequirements);
			if ((s.HasKey("buttonText")
						|| ((buttonText != default(OptionalMapOfString))
						&& buttonText.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("buttonText", ref buttonText.Value);
				buttonText.HasValue = true;
			}
			if ((s.HasKey("scheduleInstancePurchaseLimit")
						|| ((scheduleInstancePurchaseLimit != default(OptionalInt))
						&& scheduleInstancePurchaseLimit.HasValue)))
			{
				s.Serialize("scheduleInstancePurchaseLimit", ref scheduleInstancePurchaseLimit.Value);
				scheduleInstancePurchaseLimit.HasValue = true;
			}
			s.SerializeArray("entitlementRequirements", ref entitlementRequirements);
			s.Serialize("symbol", ref symbol);
			s.SerializeDictionary<MapOfString, string>("clientData", ref clientData);
			if ((s.HasKey("activeDurationCoolDownSeconds")
						|| ((activeDurationCoolDownSeconds != default(OptionalInt))
						&& activeDurationCoolDownSeconds.HasValue)))
			{
				s.Serialize("activeDurationCoolDownSeconds", ref activeDurationCoolDownSeconds.Value);
				activeDurationCoolDownSeconds.HasValue = true;
			}
			if ((s.HasKey("activeDurationSeconds")
						|| ((activeDurationSeconds != default(OptionalInt))
						&& activeDurationSeconds.HasValue)))
			{
				s.Serialize("activeDurationSeconds", ref activeDurationSeconds.Value);
				activeDurationSeconds.HasValue = true;
			}
			if ((s.HasKey("activeDurationPurchaseLimit")
						|| ((activeDurationPurchaseLimit != default(OptionalInt))
						&& activeDurationPurchaseLimit.HasValue)))
			{
				s.Serialize("activeDurationPurchaseLimit", ref activeDurationPurchaseLimit.Value);
				activeDurationPurchaseLimit.HasValue = true;
			}
			s.SerializeArray("offerRequirements", ref offerRequirements);
		}
	}
	[System.SerializableAttribute()]
	public class ResultResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public bool result;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("result", ref result);
		}
	}
	[System.SerializableAttribute()]
	public class SKU : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string description;
		public int realPrice;
		public MapOfString productIds = new MapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("description", ref description);
			s.Serialize("realPrice", ref realPrice);
			s.SerializeDictionary<MapOfString, string>("productIds", ref productIds);
		}
	}
	[System.SerializableAttribute()]
	public class GetCatalogResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalCatalog catalog = new OptionalCatalog();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class SKUDefinitions : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long version;
		public MapOfObject created = new MapOfObject();
		public SKU[] definitions;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("version", ref version);
			s.SerializeDictionary<MapOfObject, object>("created", ref created);
			s.SerializeArray("definitions", ref definitions);
		}
	}
	[System.SerializableAttribute()]
	public class Price : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string type;
		public string symbol;
		public OptionalInt amount = new OptionalInt();
		public OptionalIntArray schedule = new OptionalIntArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("type", ref type);
			s.Serialize("symbol", ref symbol);
			if ((s.HasKey("amount")
						|| ((amount != default(OptionalInt))
						&& amount.HasValue)))
			{
				s.Serialize("amount", ref amount.Value);
				amount.HasValue = true;
			}
			if ((s.HasKey("schedule")
						|| ((schedule != default(OptionalIntArray))
						&& schedule.HasValue)))
			{
				s.SerializeArray("schedule", ref schedule.Value);
				schedule.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class CommerceLootRoll : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public bool preroll;
		public OptionalStringArray externalTables = new OptionalStringArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("preroll", ref preroll);
			if ((s.HasKey("externalTables")
						|| ((externalTables != default(OptionalStringArray))
						&& externalTables.HasValue)))
			{
				s.SerializeArray("externalTables", ref externalTables.Value);
				externalTables.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class Period : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string start;
		public OptionalString end = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("start", ref start);
			if ((s.HasKey("end")
						|| ((end != default(OptionalString))
						&& end.HasValue)))
			{
				s.Serialize("end", ref end.Value);
				end.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class OfferConstraint : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string constraint;
		public int value;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("constraint", ref constraint);
			s.Serialize("value", ref value);
		}
	}
	[System.SerializableAttribute()]
	public class GetSKUsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public SKUDefinitions skus = new SKUDefinitions();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class GetCatalogReq : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong version = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("version")
						|| ((version != default(OptionalLong))
						&& version.HasValue)))
			{
				s.Serialize("version", ref version.Value);
				version.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class SaveCatalogRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public Store[] stores;
		public OfferDefinition[] offerDefinitions;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("stores", ref stores);
			s.SerializeArray("offerDefinitions", ref offerDefinitions);
		}
	}
	[System.SerializableAttribute()]
	public class SaveSKUsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public SKU[] definitions;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("definitions", ref definitions);
		}
	}
	[System.SerializableAttribute()]
	public class OfferRequirement : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string offerSymbol;
		public OfferConstraint purchases = new OfferConstraint();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("offerSymbol", ref offerSymbol);
		}
	}
	[System.SerializableAttribute()]
	public class CohortRequirement : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string trial;
		public string cohort;
		public string constraint;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("trial", ref trial);
			s.Serialize("cohort", ref cohort);
			s.Serialize("constraint", ref constraint);
		}
	}
	[System.SerializableAttribute()]
	public class Catalog : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long version;
		public MapOfObject created = new MapOfObject();
		public Store[] stores;
		public OfferDefinition[] offerDefinitions;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("version", ref version);
			s.SerializeDictionary<MapOfObject, object>("created", ref created);
			s.SerializeArray("stores", ref stores);
			s.SerializeArray("offerDefinitions", ref offerDefinitions);
		}
	}
	[System.SerializableAttribute()]
	public class Store : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInt activeListingLimit = new OptionalInt();
		public OptionalInt choose = new OptionalInt();
		public Listing[] listings;
		public OptionalBool showInactiveListings = new OptionalBool();
		public string symbol;
		public OptionalInt refreshTime = new OptionalInt();
		public OptionalString title = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("activeListingLimit")
						|| ((activeListingLimit != default(OptionalInt))
						&& activeListingLimit.HasValue)))
			{
				s.Serialize("activeListingLimit", ref activeListingLimit.Value);
				activeListingLimit.HasValue = true;
			}
			if ((s.HasKey("choose")
						|| ((choose != default(OptionalInt))
						&& choose.HasValue)))
			{
				s.Serialize("choose", ref choose.Value);
				choose.HasValue = true;
			}
			s.SerializeArray("listings", ref listings);
			if ((s.HasKey("showInactiveListings")
						|| ((showInactiveListings != default(OptionalBool))
						&& showInactiveListings.HasValue)))
			{
				s.Serialize("showInactiveListings", ref showInactiveListings.Value);
				showInactiveListings.HasValue = true;
			}
			s.Serialize("symbol", ref symbol);
			if ((s.HasKey("refreshTime")
						|| ((refreshTime != default(OptionalInt))
						&& refreshTime.HasValue)))
			{
				s.Serialize("refreshTime", ref refreshTime.Value);
				refreshTime.HasValue = true;
			}
			if ((s.HasKey("title")
						|| ((title != default(OptionalString))
						&& title.HasValue)))
			{
				s.Serialize("title", ref title.Value);
				title.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ReportPurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string listingId;
		public OptionalBool free = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("listingId", ref listingId);
			if ((s.HasKey("free")
						|| ((free != default(OptionalBool))
						&& free.HasValue)))
			{
				s.Serialize("free", ref free.Value);
				free.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GetActiveListingRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string listing;
		public OptionalString store = new OptionalString();
		public OptionalString time = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("listing", ref listing);
			if ((s.HasKey("store")
						|| ((store != default(OptionalString))
						&& store.HasValue)))
			{
				s.Serialize("store", ref store.Value);
				store.HasValue = true;
			}
			if ((s.HasKey("time")
						|| ((time != default(OptionalString))
						&& time.HasValue)))
			{
				s.Serialize("time", ref time.Value);
				time.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GetOffersReq : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString language = new OptionalString();
		public OptionalString time = new OptionalString();
		public OptionalString stores = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("language")
						|| ((language != default(OptionalString))
						&& language.HasValue)))
			{
				s.Serialize("language", ref language.Value);
				language.HasValue = true;
			}
			if ((s.HasKey("time")
						|| ((time != default(OptionalString))
						&& time.HasValue)))
			{
				s.Serialize("time", ref time.Value);
				time.HasValue = true;
			}
			if ((s.HasKey("stores")
						|| ((stores != default(OptionalString))
						&& stores.HasValue)))
			{
				s.Serialize("stores", ref stores.Value);
				stores.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ClearStatusRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string store;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("store", ref store);
		}
	}
	[System.SerializableAttribute()]
	public class PlayerListingView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public ClientDataEntry[] clientDataList;
		public string symbol;
		public MapOfString clientData = new MapOfString();
		public OptionalInt cooldown = new OptionalInt();
		public long secondsActive;
		public PlayerOfferView offer = new PlayerOfferView();
		public bool queryAfterPurchase;
		public OptionalInt purchasesRemain = new OptionalInt();
		public OptionalLong secondsRemain = new OptionalLong();
		public bool active;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("clientDataList", ref clientDataList);
			s.Serialize("symbol", ref symbol);
			s.SerializeDictionary<MapOfString, string>("clientData", ref clientData);
			if ((s.HasKey("cooldown")
						|| ((cooldown != default(OptionalInt))
						&& cooldown.HasValue)))
			{
				s.Serialize("cooldown", ref cooldown.Value);
				cooldown.HasValue = true;
			}
			s.Serialize("secondsActive", ref secondsActive);
			s.Serialize("queryAfterPurchase", ref queryAfterPurchase);
			if ((s.HasKey("purchasesRemain")
						|| ((purchasesRemain != default(OptionalInt))
						&& purchasesRemain.HasValue)))
			{
				s.Serialize("purchasesRemain", ref purchasesRemain.Value);
				purchasesRemain.HasValue = true;
			}
			if ((s.HasKey("secondsRemain")
						|| ((secondsRemain != default(OptionalLong))
						&& secondsRemain.HasValue)))
			{
				s.Serialize("secondsRemain", ref secondsRemain.Value);
				secondsRemain.HasValue = true;
			}
			s.Serialize("active", ref active);
		}
	}
	[System.SerializableAttribute()]
	public class StatSubscriptionNotification : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public MapOfString statsBefore = new MapOfString();
		public MapOfString statsAfter = new MapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeDictionary<MapOfString, string>("statsBefore", ref statsBefore);
			s.SerializeDictionary<MapOfString, string>("statsAfter", ref statsAfter);
		}
	}
	[System.SerializableAttribute()]
	public class GetTotalCouponResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long count;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("count", ref count);
		}
	}
	[System.SerializableAttribute()]
	public class GiveCouponReq : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string listing;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("listing", ref listing);
		}
	}
	[System.SerializableAttribute()]
	public class GetStoresReq : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString scope = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("scope")
						|| ((scope != default(OptionalString))
						&& scope.HasValue)))
			{
				s.Serialize("scope", ref scope.Value);
				scope.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class PlayerStoreView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public PlayerListingView[] listings;
		public string symbol;
		public OptionalLong nextDeltaSeconds = new OptionalLong();
		public OptionalString title = new OptionalString();
		public OptionalLong secondsRemain = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("listings", ref listings);
			s.Serialize("symbol", ref symbol);
			if ((s.HasKey("nextDeltaSeconds")
						|| ((nextDeltaSeconds != default(OptionalLong))
						&& nextDeltaSeconds.HasValue)))
			{
				s.Serialize("nextDeltaSeconds", ref nextDeltaSeconds.Value);
				nextDeltaSeconds.HasValue = true;
			}
			if ((s.HasKey("title")
						|| ((title != default(OptionalString))
						&& title.HasValue)))
			{
				s.Serialize("title", ref title.Value);
				title.HasValue = true;
			}
			if ((s.HasKey("secondsRemain")
						|| ((secondsRemain != default(OptionalLong))
						&& secondsRemain.HasValue)))
			{
				s.Serialize("secondsRemain", ref secondsRemain.Value);
				secondsRemain.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class PurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string purchaseId;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("purchaseId", ref purchaseId);
		}
	}
	[System.SerializableAttribute()]
	public class PlayerOfferView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public int coupons;
		public Price price = new Price();
		public OptionalString buttonText = new OptionalString();
		public string[] titles;
		public string symbol;
		public ItemCreateRequest[] obtainItems;
		public CurrencyChange[] obtainCurrency;
		public string[] images;
		public string[] descriptions;
		public string[] obtain;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("coupons", ref coupons);
			if ((s.HasKey("buttonText")
						|| ((buttonText != default(OptionalString))
						&& buttonText.HasValue)))
			{
				s.Serialize("buttonText", ref buttonText.Value);
				buttonText.HasValue = true;
			}
			s.SerializeArray("titles", ref titles);
			s.Serialize("symbol", ref symbol);
			s.SerializeArray("obtainItems", ref obtainItems);
			s.SerializeArray("obtainCurrency", ref obtainCurrency);
			s.SerializeArray("images", ref images);
			s.SerializeArray("descriptions", ref descriptions);
			s.SerializeArray("obtain", ref obtain);
		}
	}
	[System.SerializableAttribute()]
	public class ActiveListingResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string storeSymbol;
		public PlayerListingView listing = new PlayerListingView();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("storeSymbol", ref storeSymbol);
		}
	}
	[System.SerializableAttribute()]
	public class UpdateListingCooldownRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string symbol;
		public int cooldownReduction;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("symbol", ref symbol);
			s.Serialize("cooldownReduction", ref cooldownReduction);
		}
	}
	[System.SerializableAttribute()]
	public class GetActiveOffersResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public PlayerStoreView[] stores;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("stores", ref stores);
		}
	}
	[System.SerializableAttribute()]
	public class CooldownModifierRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long gamerTag;
		public UpdateListingCooldownRequest[] updateListingCooldownRequests;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("gamerTag", ref gamerTag);
			s.SerializeArray("updateListingCooldownRequests", ref updateListingCooldownRequests);
		}
	}
	[System.SerializableAttribute()]
	public class ClientDataEntry : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string value;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("value", ref value);
		}
	}
	[System.SerializableAttribute()]
	public class RewardCalendarDay : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public EntitlementGenerator[] obtain;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("obtain", ref obtain);
		}
	}
	[System.SerializableAttribute()]
	public class CalendarView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public int nextIndex;
		public long nextClaimSeconds;
		public string id;
		public long remainingSeconds;
		public RewardCalendarDay[] days;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("nextIndex", ref nextIndex);
			s.Serialize("nextClaimSeconds", ref nextClaimSeconds);
			s.Serialize("id", ref id);
			s.Serialize("remainingSeconds", ref remainingSeconds);
			s.SerializeArray("days", ref days);
		}
	}
	[System.SerializableAttribute()]
	public class CalendarClaimRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string id;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
		}
	}
	[System.SerializableAttribute()]
	public class CalendarQueryResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public CalendarView[] calendars;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("calendars", ref calendars);
		}
	}
	[System.SerializableAttribute()]
	public class ListTagsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string[] tags;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("tags", ref tags);
		}
	}
	[System.SerializableAttribute()]
	public class WebhookComet : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string method;
		public OptionalString description = new OptionalString();
		public RouteVariables variables = new RouteVariables();
		public string symbol;
		public ServiceRoute route = new ServiceRoute();
		public RouteParameters parameters = new RouteParameters();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("method", ref method);
			if ((s.HasKey("description")
						|| ((description != default(OptionalString))
						&& description.HasValue)))
			{
				s.Serialize("description", ref description.Value);
				description.HasValue = true;
			}
			s.Serialize("symbol", ref symbol);
		}
	}
	[System.SerializableAttribute()]
	public class WebhookServiceType : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class AnnouncementContent : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string body;
		public string channel;
		public OptionalString start_date = new OptionalString();
		public OptionalStringArray tags = new OptionalStringArray();
		public OptionalPlayerReward gift = new OptionalPlayerReward();
		public OptionalPlayerStatRequirementArray stat_requirements = new OptionalPlayerStatRequirementArray();
		public string symbol;
		public OptionalMapOfString clientData = new OptionalMapOfString();
		public OptionalString end_date = new OptionalString();
		public string title;
		public OptionalAnnouncementAttachmentArray attachments = new OptionalAnnouncementAttachmentArray();
		public string summary;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("body", ref body);
			s.Serialize("channel", ref channel);
			if ((s.HasKey("start_date")
						|| ((start_date != default(OptionalString))
						&& start_date.HasValue)))
			{
				s.Serialize("start_date", ref start_date.Value);
				start_date.HasValue = true;
			}
			if ((s.HasKey("tags")
						|| ((tags != default(OptionalStringArray))
						&& tags.HasValue)))
			{
				s.SerializeArray("tags", ref tags.Value);
				tags.HasValue = true;
			}
			if ((s.HasKey("stat_requirements")
						|| ((stat_requirements != default(OptionalPlayerStatRequirementArray))
						&& stat_requirements.HasValue)))
			{
				s.SerializeArray("stat_requirements", ref stat_requirements.Value);
				stat_requirements.HasValue = true;
			}
			s.Serialize("symbol", ref symbol);
			if ((s.HasKey("clientData")
						|| ((clientData != default(OptionalMapOfString))
						&& clientData.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("clientData", ref clientData.Value);
				clientData.HasValue = true;
			}
			if ((s.HasKey("end_date")
						|| ((end_date != default(OptionalString))
						&& end_date.HasValue)))
			{
				s.Serialize("end_date", ref end_date.Value);
				end_date.HasValue = true;
			}
			s.Serialize("title", ref title);
			if ((s.HasKey("attachments")
						|| ((attachments != default(OptionalAnnouncementAttachmentArray))
						&& attachments.HasValue)))
			{
				s.SerializeArray("attachments", ref attachments.Value);
				attachments.HasValue = true;
			}
			s.Serialize("summary", ref summary);
		}
	}
	[System.SerializableAttribute()]
	public class WebhookInvocationType : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class AnnouncementContentResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public AnnouncementContent[] content;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("content", ref content);
		}
	}
	[System.SerializableAttribute()]
	public class LocalizationRef : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string localizationId;
		public OptionalString defaultValue = new OptionalString();
		public bool empty;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("localizationId", ref localizationId);
			if ((s.HasKey("defaultValue")
						|| ((defaultValue != default(OptionalString))
						&& defaultValue.HasValue)))
			{
				s.Serialize("defaultValue", ref defaultValue.Value);
				defaultValue.HasValue = true;
			}
			s.Serialize("empty", ref empty);
		}
	}
	[System.SerializableAttribute()]
	public class AnnouncementAttachment : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string symbol;
		public int count;
		public OptionalString type = new OptionalString();
		public OptionalAttachmentPropertyArray properties = new OptionalAttachmentPropertyArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("symbol", ref symbol);
			s.Serialize("count", ref count);
			if ((s.HasKey("type")
						|| ((type != default(OptionalString))
						&& type.HasValue)))
			{
				s.Serialize("type", ref type.Value);
				type.HasValue = true;
			}
			if ((s.HasKey("properties")
						|| ((properties != default(OptionalAttachmentPropertyArray))
						&& properties.HasValue)))
			{
				s.SerializeArray("properties", ref properties.Value);
				properties.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class RouteVariable : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string typeName;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("typeName", ref typeName);
		}
	}
	[System.SerializableAttribute()]
	public class WebhookInvocationStrategy : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public WebhookInvocationType invocationType;
		public WebhookRetryType retryType;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("invocationType", ref invocationType);
			s.Serialize("retryType", ref retryType);
		}
	}
	[System.SerializableAttribute()]
	public class RouteParameter : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string body;
		public string typeName;
		public OptionalVariableReference variableRef = new OptionalVariableReference();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("body", ref body);
			s.Serialize("typeName", ref typeName);
		}
	}
	[System.SerializableAttribute()]
	public class RouteVariables : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public RouteVariable[] variables;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("variables", ref variables);
		}
	}
	[System.SerializableAttribute()]
	public class PlayerReward : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString description = new OptionalString();
		public ItemCreateRequest[] addItemRequests;
		public OptionalCurrencyChangeRewardArray changeCurrencies = new OptionalCurrencyChangeRewardArray();
		public OptionalWebhookRewardArray callWebhooks = new OptionalWebhookRewardArray();
		public OptionalNewItemRewardArray addItems = new OptionalNewItemRewardArray();
		public OptionalBool applyVipBonus = new OptionalBool();
		public MapOfString addCurrencyMap = new MapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("description")
						|| ((description != default(OptionalString))
						&& description.HasValue)))
			{
				s.Serialize("description", ref description.Value);
				description.HasValue = true;
			}
			s.SerializeArray("addItemRequests", ref addItemRequests);
			if ((s.HasKey("changeCurrencies")
						|| ((changeCurrencies != default(OptionalCurrencyChangeRewardArray))
						&& changeCurrencies.HasValue)))
			{
				s.SerializeArray("changeCurrencies", ref changeCurrencies.Value);
				changeCurrencies.HasValue = true;
			}
			if ((s.HasKey("callWebhooks")
						|| ((callWebhooks != default(OptionalWebhookRewardArray))
						&& callWebhooks.HasValue)))
			{
				s.SerializeArray("callWebhooks", ref callWebhooks.Value);
				callWebhooks.HasValue = true;
			}
			if ((s.HasKey("addItems")
						|| ((addItems != default(OptionalNewItemRewardArray))
						&& addItems.HasValue)))
			{
				s.SerializeArray("addItems", ref addItems.Value);
				addItems.HasValue = true;
			}
			if ((s.HasKey("applyVipBonus")
						|| ((applyVipBonus != default(OptionalBool))
						&& applyVipBonus.HasValue)))
			{
				s.Serialize("applyVipBonus", ref applyVipBonus.Value);
				applyVipBonus.HasValue = true;
			}
			s.SerializeDictionary<MapOfString, string>("addCurrencyMap", ref addCurrencyMap);
		}
	}
	[System.SerializableAttribute()]
	public class VariableReference : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
		}
	}
	[System.SerializableAttribute()]
	public class AttachmentProperty : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public string value;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("value", ref value);
		}
	}
	[System.SerializableAttribute()]
	public class RouteParameters : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public RouteParameter[] parameters;
		public OptionalString payload = new OptionalString();
		public OptionalString objectId = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("parameters", ref parameters);
			if ((s.HasKey("payload")
						|| ((payload != default(OptionalString))
						&& payload.HasValue)))
			{
				s.Serialize("payload", ref payload.Value);
				payload.HasValue = true;
			}
			if ((s.HasKey("objectId")
						|| ((objectId != default(OptionalString))
						&& objectId.HasValue)))
			{
				s.Serialize("objectId", ref objectId.Value);
				objectId.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class ListDefinitionsResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public AnnouncementDto[] content;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("content", ref content);
		}
	}
	[System.SerializableAttribute()]
	public class ServiceRoute : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string service;
		public string endpoint;
		public WebhookServiceType serviceTypeStr;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("service", ref service);
			s.Serialize("endpoint", ref endpoint);
			s.Serialize("serviceTypeStr", ref serviceTypeStr);
		}
	}
	[System.SerializableAttribute()]
	public class CurrencyChangeReward : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string symbol;
		public long amount;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("symbol", ref symbol);
			s.Serialize("amount", ref amount);
		}
	}
	[System.SerializableAttribute()]
	public class DeleteAnnouncementRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string symbol;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("symbol", ref symbol);
		}
	}
	[System.SerializableAttribute()]
	public class ListTagsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString tagNameFilter = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("tagNameFilter")
						|| ((tagNameFilter != default(OptionalString))
						&& tagNameFilter.HasValue)))
			{
				s.Serialize("tagNameFilter", ref tagNameFilter.Value);
				tagNameFilter.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AnnouncementDto : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public LocalizationRef body = new LocalizationRef();
		public string channel;
		public OptionalString start_date = new OptionalString();
		public OptionalStringArray tags = new OptionalStringArray();
		public OptionalPlayerReward gift = new OptionalPlayerReward();
		public OptionalPlayerStatRequirementArray stat_requirements = new OptionalPlayerStatRequirementArray();
		public string symbol;
		public OptionalMapOfString clientData = new OptionalMapOfString();
		public OptionalString end_date = new OptionalString();
		public LocalizationRef title = new LocalizationRef();
		public OptionalAnnouncementAttachmentArray attachments = new OptionalAnnouncementAttachmentArray();
		public LocalizationRef summary = new LocalizationRef();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("channel", ref channel);
			if ((s.HasKey("start_date")
						|| ((start_date != default(OptionalString))
						&& start_date.HasValue)))
			{
				s.Serialize("start_date", ref start_date.Value);
				start_date.HasValue = true;
			}
			if ((s.HasKey("tags")
						|| ((tags != default(OptionalStringArray))
						&& tags.HasValue)))
			{
				s.SerializeArray("tags", ref tags.Value);
				tags.HasValue = true;
			}
			if ((s.HasKey("stat_requirements")
						|| ((stat_requirements != default(OptionalPlayerStatRequirementArray))
						&& stat_requirements.HasValue)))
			{
				s.SerializeArray("stat_requirements", ref stat_requirements.Value);
				stat_requirements.HasValue = true;
			}
			s.Serialize("symbol", ref symbol);
			if ((s.HasKey("clientData")
						|| ((clientData != default(OptionalMapOfString))
						&& clientData.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("clientData", ref clientData.Value);
				clientData.HasValue = true;
			}
			if ((s.HasKey("end_date")
						|| ((end_date != default(OptionalString))
						&& end_date.HasValue)))
			{
				s.Serialize("end_date", ref end_date.Value);
				end_date.HasValue = true;
			}
			if ((s.HasKey("attachments")
						|| ((attachments != default(OptionalAnnouncementAttachmentArray))
						&& attachments.HasValue)))
			{
				s.SerializeArray("attachments", ref attachments.Value);
				attachments.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class WebhookReward : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString webhookSymbol = new OptionalString();
		public WebhookInvocationStrategy strategy = new WebhookInvocationStrategy();
		public OptionalWebhookComet webHookComet = new OptionalWebhookComet();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("webhookSymbol")
						|| ((webhookSymbol != default(OptionalString))
						&& webhookSymbol.HasValue)))
			{
				s.Serialize("webhookSymbol", ref webhookSymbol.Value);
				webhookSymbol.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class NewItemReward : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string symbol;
		public OptionalMapOfString properties = new OptionalMapOfString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("symbol", ref symbol);
			if ((s.HasKey("properties")
						|| ((properties != default(OptionalMapOfString))
						&& properties.HasValue)))
			{
				s.SerializeDictionary<MapOfString, string>("properties", ref properties.Value);
				properties.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class WebhookRetryType : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class SearchAnnouncementsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString date = new OptionalString();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("date")
						|| ((date != default(OptionalString))
						&& date.HasValue)))
			{
				s.Serialize("date", ref date.Value);
				date.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AnnouncementRawResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public MapOfAnnouncementState announcements = new MapOfAnnouncementState();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeDictionary<MapOfAnnouncementState, AnnouncementState>("announcements", ref announcements);
		}
	}
	[System.SerializableAttribute()]
	public class AnnouncementQuery : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalBool include_deleted = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("include_deleted")
						|| ((include_deleted != default(OptionalBool))
						&& include_deleted.HasValue)))
			{
				s.Serialize("include_deleted", ref include_deleted.Value);
				include_deleted.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AnnouncementState : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public bool isRead;
		public bool isClaimed;
		public bool isDeleted;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("isRead", ref isRead);
			s.Serialize("isClaimed", ref isClaimed);
			s.Serialize("isDeleted", ref isDeleted);
		}
	}
	[System.SerializableAttribute()]
	public class AnnouncementRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString announcement = new OptionalString();
		public OptionalStringArray announcements = new OptionalStringArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("announcement")
						|| ((announcement != default(OptionalString))
						&& announcement.HasValue)))
			{
				s.Serialize("announcement", ref announcement.Value);
				announcement.HasValue = true;
			}
			if ((s.HasKey("announcements")
						|| ((announcements != default(OptionalStringArray))
						&& announcements.HasValue)))
			{
				s.SerializeArray("announcements", ref announcements.Value);
				announcements.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AnnouncementQueryResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public AnnouncementView[] announcements;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("announcements", ref announcements);
		}
	}
	[System.SerializableAttribute()]
	public class AnnouncementView : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string body;
		public bool isClaimed;
		public string channel;
		public OptionalString endDate = new OptionalString();
		public OptionalStringArray tags = new OptionalStringArray();
		public ClientDataEntry[] clientDataList;
		public OptionalPlayerReward gift = new OptionalPlayerReward();
		public OptionalLong secondsRemaining = new OptionalLong();
		public string id;
		public bool isDeleted;
		public bool isRead;
		public string title;
		public OptionalString startDate = new OptionalString();
		public AnnouncementAttachment[] attachments;
		public string summary;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("body", ref body);
			s.Serialize("isClaimed", ref isClaimed);
			s.Serialize("channel", ref channel);
			if ((s.HasKey("endDate")
						|| ((endDate != default(OptionalString))
						&& endDate.HasValue)))
			{
				s.Serialize("endDate", ref endDate.Value);
				endDate.HasValue = true;
			}
			if ((s.HasKey("tags")
						|| ((tags != default(OptionalStringArray))
						&& tags.HasValue)))
			{
				s.SerializeArray("tags", ref tags.Value);
				tags.HasValue = true;
			}
			s.SerializeArray("clientDataList", ref clientDataList);
			if ((s.HasKey("secondsRemaining")
						|| ((secondsRemaining != default(OptionalLong))
						&& secondsRemaining.HasValue)))
			{
				s.Serialize("secondsRemaining", ref secondsRemaining.Value);
				secondsRemaining.HasValue = true;
			}
			s.Serialize("id", ref id);
			s.Serialize("isDeleted", ref isDeleted);
			s.Serialize("isRead", ref isRead);
			s.Serialize("title", ref title);
			if ((s.HasKey("startDate")
						|| ((startDate != default(OptionalString))
						&& startDate.HasValue)))
			{
				s.Serialize("startDate", ref startDate.Value);
				startDate.HasValue = true;
			}
			s.SerializeArray("attachments", ref attachments);
			s.Serialize("summary", ref summary);
		}
	}
	[System.SerializableAttribute()]
	public class UpdateMailRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString body = new OptionalString();
		public OptionalString expires = new OptionalString();
		public OptionalString subject = new OptionalString();
		public OptionalString state = new OptionalString();
		public long mailId;
		public OptionalString category = new OptionalString();
		public OptionalBool acceptAttachments = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("body")
						|| ((body != default(OptionalString))
						&& body.HasValue)))
			{
				s.Serialize("body", ref body.Value);
				body.HasValue = true;
			}
			if ((s.HasKey("expires")
						|| ((expires != default(OptionalString))
						&& expires.HasValue)))
			{
				s.Serialize("expires", ref expires.Value);
				expires.HasValue = true;
			}
			if ((s.HasKey("subject")
						|| ((subject != default(OptionalString))
						&& subject.HasValue)))
			{
				s.Serialize("subject", ref subject.Value);
				subject.HasValue = true;
			}
			if ((s.HasKey("state")
						|| ((state != default(OptionalString))
						&& state.HasValue)))
			{
				s.Serialize("state", ref state.Value);
				state.HasValue = true;
			}
			s.Serialize("mailId", ref mailId);
			if ((s.HasKey("category")
						|| ((category != default(OptionalString))
						&& category.HasValue)))
			{
				s.Serialize("category", ref category.Value);
				category.HasValue = true;
			}
			if ((s.HasKey("acceptAttachments")
						|| ((acceptAttachments != default(OptionalBool))
						&& acceptAttachments.HasValue)))
			{
				s.Serialize("acceptAttachments", ref acceptAttachments.Value);
				acceptAttachments.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class GetTemplateRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string templateName;
		public long gamerTag;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("templateName", ref templateName);
			s.Serialize("gamerTag", ref gamerTag);
		}
	}
	[System.SerializableAttribute()]
	public class AttachmentRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalInt quantity = new OptionalInt();
		public string symbol;
		public OptionalString specialization = new OptionalString();
		public OptionalLong target = new OptionalLong();
		public string action;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("quantity")
						|| ((quantity != default(OptionalInt))
						&& quantity.HasValue)))
			{
				s.Serialize("quantity", ref quantity.Value);
				quantity.HasValue = true;
			}
			s.Serialize("symbol", ref symbol);
			if ((s.HasKey("specialization")
						|| ((specialization != default(OptionalString))
						&& specialization.HasValue)))
			{
				s.Serialize("specialization", ref specialization.Value);
				specialization.HasValue = true;
			}
			if ((s.HasKey("target")
						|| ((target != default(OptionalLong))
						&& target.HasValue)))
			{
				s.Serialize("target", ref target.Value);
				target.HasValue = true;
			}
			s.Serialize("action", ref action);
		}
	}
	[System.SerializableAttribute()]
	public class MailResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalMessage result = new OptionalMessage();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
		}
	}
	[System.SerializableAttribute()]
	public class MailTemplate : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string subject;
		public string body;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("subject", ref subject);
			s.Serialize("body", ref body);
		}
	}
	[System.SerializableAttribute()]
	public class SendMailRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString body = new OptionalString();
		public OptionalString expires = new OptionalString();
		public OptionalPlayerReward playerRewards = new OptionalPlayerReward();
		public long receiverGamerTag;
		public OptionalString subject = new OptionalString();
		public OptionalMailRewards rewards = new OptionalMailRewards();
		public OptionalLong id = new OptionalLong();
		public long senderGamerTag;
		public string category;
		public OptionalLong bodyRef = new OptionalLong();
		public OptionalAttachmentRequestArray attachments = new OptionalAttachmentRequestArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("body")
						|| ((body != default(OptionalString))
						&& body.HasValue)))
			{
				s.Serialize("body", ref body.Value);
				body.HasValue = true;
			}
			if ((s.HasKey("expires")
						|| ((expires != default(OptionalString))
						&& expires.HasValue)))
			{
				s.Serialize("expires", ref expires.Value);
				expires.HasValue = true;
			}
			s.Serialize("receiverGamerTag", ref receiverGamerTag);
			if ((s.HasKey("subject")
						|| ((subject != default(OptionalString))
						&& subject.HasValue)))
			{
				s.Serialize("subject", ref subject.Value);
				subject.HasValue = true;
			}
			if ((s.HasKey("id")
						|| ((id != default(OptionalLong))
						&& id.HasValue)))
			{
				s.Serialize("id", ref id.Value);
				id.HasValue = true;
			}
			s.Serialize("senderGamerTag", ref senderGamerTag);
			s.Serialize("category", ref category);
			if ((s.HasKey("bodyRef")
						|| ((bodyRef != default(OptionalLong))
						&& bodyRef.HasValue)))
			{
				s.Serialize("bodyRef", ref bodyRef.Value);
				bodyRef.HasValue = true;
			}
			if ((s.HasKey("attachments")
						|| ((attachments != default(OptionalAttachmentRequestArray))
						&& attachments.HasValue)))
			{
				s.SerializeArray("attachments", ref attachments.Value);
				attachments.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class Attachment : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long id;
		public EntitlementGenerator wrapped = new EntitlementGenerator();
		public string state;
		public OptionalLong target = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
			s.Serialize("state", ref state);
			if ((s.HasKey("target")
						|| ((target != default(OptionalLong))
						&& target.HasValue)))
			{
				s.Serialize("target", ref target.Value);
				target.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class AcceptMultipleAttachments : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long[] mailIds;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("mailIds", ref mailIds);
		}
	}
	[System.SerializableAttribute()]
	public class GetMailDetailsRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long mid;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("mid", ref mid);
		}
	}
	[System.SerializableAttribute()]
	public class MailSuccessResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public bool result;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("result", ref result);
		}
	}
	[System.SerializableAttribute()]
	public class BulkSendMailRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public SendMailRequest[] sendMailRequests;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("sendMailRequests", ref sendMailRequests);
		}
	}
	[System.SerializableAttribute()]
	public class MailRewards : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public CurrencyChange[] currencies;
		public ItemCreateRequest[] items;
		public OptionalBool applyVipBonus = new OptionalBool();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("currencies", ref currencies);
			s.SerializeArray("items", ref items);
			if ((s.HasKey("applyVipBonus")
						|| ((applyVipBonus != default(OptionalBool))
						&& applyVipBonus.HasValue)))
			{
				s.Serialize("applyVipBonus", ref applyVipBonus.Value);
				applyVipBonus.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class MailSearchClause : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong forSender = new OptionalLong();
		public string name;
		public bool onlyCount;
		public OptionalStringArray categories = new OptionalStringArray();
		public OptionalLong start = new OptionalLong();
		public OptionalInt limit = new OptionalInt();
		public OptionalStringArray states = new OptionalStringArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("forSender")
						|| ((forSender != default(OptionalLong))
						&& forSender.HasValue)))
			{
				s.Serialize("forSender", ref forSender.Value);
				forSender.HasValue = true;
			}
			s.Serialize("name", ref name);
			s.Serialize("onlyCount", ref onlyCount);
			if ((s.HasKey("categories")
						|| ((categories != default(OptionalStringArray))
						&& categories.HasValue)))
			{
				s.SerializeArray("categories", ref categories.Value);
				categories.HasValue = true;
			}
			if ((s.HasKey("start")
						|| ((start != default(OptionalLong))
						&& start.HasValue)))
			{
				s.Serialize("start", ref start.Value);
				start.HasValue = true;
			}
			if ((s.HasKey("limit")
						|| ((limit != default(OptionalInt))
						&& limit.HasValue)))
			{
				s.Serialize("limit", ref limit.Value);
				limit.HasValue = true;
			}
			if ((s.HasKey("states")
						|| ((states != default(OptionalStringArray))
						&& states.HasValue)))
			{
				s.SerializeArray("states", ref states.Value);
				states.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class MailSearchRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public MailSearchClause[] clauses;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("clauses", ref clauses);
		}
	}
	[System.SerializableAttribute()]
	public class MailSearchResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public MailSearchResponseClause[] results;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("results", ref results);
		}
	}
	[System.SerializableAttribute()]
	public class SendMailObjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalString body = new OptionalString();
		public OptionalString expires = new OptionalString();
		public OptionalPlayerReward playerRewards = new OptionalPlayerReward();
		public OptionalString subject = new OptionalString();
		public OptionalMailRewards rewards = new OptionalMailRewards();
		public OptionalLong id = new OptionalLong();
		public long senderGamerTag;
		public string category;
		public OptionalLong bodyRef = new OptionalLong();
		public OptionalAttachmentRequestArray attachments = new OptionalAttachmentRequestArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("body")
						|| ((body != default(OptionalString))
						&& body.HasValue)))
			{
				s.Serialize("body", ref body.Value);
				body.HasValue = true;
			}
			if ((s.HasKey("expires")
						|| ((expires != default(OptionalString))
						&& expires.HasValue)))
			{
				s.Serialize("expires", ref expires.Value);
				expires.HasValue = true;
			}
			if ((s.HasKey("subject")
						|| ((subject != default(OptionalString))
						&& subject.HasValue)))
			{
				s.Serialize("subject", ref subject.Value);
				subject.HasValue = true;
			}
			if ((s.HasKey("id")
						|| ((id != default(OptionalLong))
						&& id.HasValue)))
			{
				s.Serialize("id", ref id.Value);
				id.HasValue = true;
			}
			s.Serialize("senderGamerTag", ref senderGamerTag);
			s.Serialize("category", ref category);
			if ((s.HasKey("bodyRef")
						|| ((bodyRef != default(OptionalLong))
						&& bodyRef.HasValue)))
			{
				s.Serialize("bodyRef", ref bodyRef.Value);
				bodyRef.HasValue = true;
			}
			if ((s.HasKey("attachments")
						|| ((attachments != default(OptionalAttachmentRequestArray))
						&& attachments.HasValue)))
			{
				s.SerializeArray("attachments", ref attachments.Value);
				attachments.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class SendMailResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public OptionalLong mailId = new OptionalLong();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey("mailId")
						|| ((mailId != default(OptionalLong))
						&& mailId.HasValue)))
			{
				s.Serialize("mailId", ref mailId.Value);
				mailId.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class MyMailUpdate : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long id;
		public UpdateMailRequest update = new UpdateMailRequest();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("id", ref id);
		}
	}
	[System.SerializableAttribute()]
	public class MailQueryResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public long unreadCount;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("unreadCount", ref unreadCount);
		}
	}
	[System.SerializableAttribute()]
	public class BulkUpdateMailObjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public MyMailUpdate[] updateMailRequests;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("updateMailRequests", ref updateMailRequests);
		}
	}
	[System.SerializableAttribute()]
	public class ListMailCategoriesResponse : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string[] result;
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.SerializeArray("result", ref result);
		}
	}
	[System.SerializableAttribute()]
	public class MailSearchResponseClause : Beamable.Serialization.JsonSerializable.ISerializable
	{
		public string name;
		public long count;
		public OptionalMessageArray content = new OptionalMessageArray();
		public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("name", ref name);
			s.Serialize("count", ref count);
			if ((s.HasKey("content")
						|| ((content != default(OptionalMessageArray))
						&& content.HasValue)))
			{
				s.SerializeArray("content", ref content.Value);
				content.HasValue = true;
			}
		}
	}
	[System.SerializableAttribute()]
	public class OptionalServiceStorageStatusArray : Beamable.Common.Content.OptionalArray<ServiceStorageStatus>
	{
		public OptionalServiceStorageStatusArray()
		{
		}
		public OptionalServiceStorageStatusArray(ServiceStorageStatus[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalDatabaseMeasurementArray : Beamable.Common.Content.OptionalArray<DatabaseMeasurement>
	{
		public OptionalDatabaseMeasurementArray()
		{
		}
		public OptionalDatabaseMeasurementArray(DatabaseMeasurement[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalServiceDependencyReferenceArray : Beamable.Common.Content.OptionalArray<ServiceDependencyReference>
	{
		public OptionalServiceDependencyReferenceArray()
		{
		}
		public OptionalServiceDependencyReferenceArray(ServiceDependencyReference[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalManifestChecksum : Beamable.Common.Content.Optional<ManifestChecksum>
	{
		public OptionalManifestChecksum()
		{
		}
		public OptionalManifestChecksum(ManifestChecksum value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalServiceStorageReferenceArray : Beamable.Common.Content.OptionalArray<ServiceStorageReference>
	{
		public OptionalServiceStorageReferenceArray()
		{
		}
		public OptionalServiceStorageReferenceArray(ServiceStorageReference[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalEventInventoryRewardItemArray : Beamable.Common.Content.OptionalArray<EventInventoryRewardItem>
	{
		public OptionalEventInventoryRewardItemArray()
		{
		}
		public OptionalEventInventoryRewardItemArray(EventInventoryRewardItem[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalItemCreateRequestArray : Beamable.Common.Content.OptionalArray<ItemCreateRequest>
	{
		public OptionalItemCreateRequestArray()
		{
		}
		public OptionalItemCreateRequestArray(ItemCreateRequest[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalEventRewardObtainArray : Beamable.Common.Content.OptionalArray<EventRewardObtain>
	{
		public OptionalEventRewardObtainArray()
		{
		}
		public OptionalEventRewardObtainArray(EventRewardObtain[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalEventInventoryRewardCurrencyArray : Beamable.Common.Content.OptionalArray<EventInventoryRewardCurrency>
	{
		public OptionalEventInventoryRewardCurrencyArray()
		{
		}
		public OptionalEventInventoryRewardCurrencyArray(EventInventoryRewardCurrency[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalEventPlayerPhaseView : Beamable.Common.Content.Optional<EventPlayerPhaseView>
	{
		public OptionalEventPlayerPhaseView()
		{
		}
		public OptionalEventPlayerPhaseView(EventPlayerPhaseView value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalEventRuleArray : Beamable.Common.Content.OptionalArray<EventRule>
	{
		public OptionalEventRuleArray()
		{
		}
		public OptionalEventRuleArray(EventRule[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalEventPlayerGroupState : Beamable.Common.Content.Optional<EventPlayerGroupState>
	{
		public OptionalEventPlayerGroupState()
		{
		}
		public OptionalEventPlayerGroupState(EventPlayerGroupState value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalInFlightMessageArray : Beamable.Common.Content.OptionalArray<InFlightMessage>
	{
		public OptionalInFlightMessageArray()
		{
		}
		public OptionalInFlightMessageArray(InFlightMessage[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalLeaderboardCohortSettings : Beamable.Common.Content.Optional<LeaderboardCohortSettings>
	{
		public OptionalLeaderboardCohortSettings()
		{
		}
		public OptionalLeaderboardCohortSettings(LeaderboardCohortSettings value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalEventPhaseTimeArray : Beamable.Common.Content.OptionalArray<EventPhaseTime>
	{
		public OptionalEventPhaseTimeArray()
		{
		}
		public OptionalEventPhaseTimeArray(EventPhaseTime[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalPlayerStatRequirementArray : Beamable.Common.Content.OptionalArray<PlayerStatRequirement>
	{
		public OptionalPlayerStatRequirementArray()
		{
		}
		public OptionalPlayerStatRequirementArray(PlayerStatRequirement[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalEventGroupRewards : Beamable.Common.Content.Optional<EventGroupRewards>
	{
		public OptionalEventGroupRewards()
		{
		}
		public OptionalEventGroupRewards(EventGroupRewards value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalClientPermission : Beamable.Common.Content.Optional<ClientPermission>
	{
		public OptionalClientPermission()
		{
		}
		public OptionalClientPermission(ClientPermission value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalEventRewardContentArray : Beamable.Common.Content.OptionalArray<EventRewardContent>
	{
		public OptionalEventRewardContentArray()
		{
		}
		public OptionalEventRewardContentArray(EventRewardContent[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalEventPhaseRuntime : Beamable.Common.Content.Optional<EventPhaseRuntime>
	{
		public OptionalEventPhaseRuntime()
		{
		}
		public OptionalEventPhaseRuntime(EventPhaseRuntime value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalSchedule : Beamable.Common.Content.Optional<Schedule>
	{
		public OptionalSchedule()
		{
		}
		public OptionalSchedule(Schedule value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalScheduleDefinitionArray : Beamable.Common.Content.OptionalArray<ScheduleDefinition>
	{
		public OptionalScheduleDefinitionArray()
		{
		}
		public OptionalScheduleDefinitionArray(ScheduleDefinition[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalGroupRoleArray : Beamable.Common.Content.OptionalArray<GroupRole>
	{
		public OptionalGroupRoleArray()
		{
		}
		public OptionalGroupRoleArray(GroupRole[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalDonationRequestArray : Beamable.Common.Content.OptionalArray<DonationRequest>
	{
		public OptionalDonationRequestArray()
		{
		}
		public OptionalDonationRequestArray(DonationRequest[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalMapOfDonationRequest : Beamable.Common.Content.Optional<MapOfDonationRequest>
	{
	}
	[System.SerializableAttribute()]
	public class MapOfDonationRequest : Beamable.Common.Content.SerializableDictionaryStringToSomething<DonationRequest>
	{
	}
	[System.SerializableAttribute()]
	public class OptionalCurrencyPropertyArray : Beamable.Common.Content.OptionalArray<CurrencyProperty>
	{
		public OptionalCurrencyPropertyArray()
		{
		}
		public OptionalCurrencyPropertyArray(CurrencyProperty[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalMapOfCurrencyPropertyArray : Beamable.Common.Content.Optional<MapOfCurrencyPropertyArray>
	{
	}
	[System.SerializableAttribute()]
	public class MapOfCurrencyPropertyArray : Beamable.Common.Content.SerializableDictionaryStringToSomething<CurrencyProperty[]>
	{
	}
	[System.SerializableAttribute()]
	public class OptionalGroupScoreBindingArray : Beamable.Common.Content.OptionalArray<GroupScoreBinding>
	{
		public OptionalGroupScoreBindingArray()
		{
		}
		public OptionalGroupScoreBindingArray(GroupScoreBinding[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalInventoryProxySettings : Beamable.Common.Content.Optional<InventoryProxySettings>
	{
		public OptionalInventoryProxySettings()
		{
		}
		public OptionalInventoryProxySettings(InventoryProxySettings value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalItemUpdateRequestArray : Beamable.Common.Content.OptionalArray<ItemUpdateRequest>
	{
		public OptionalItemUpdateRequestArray()
		{
		}
		public OptionalItemUpdateRequestArray(ItemUpdateRequest[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalItemDeleteRequestArray : Beamable.Common.Content.OptionalArray<ItemDeleteRequest>
	{
		public OptionalItemDeleteRequestArray()
		{
		}
		public OptionalItemDeleteRequestArray(ItemDeleteRequest[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalRankEntryStatArray : Beamable.Common.Content.OptionalArray<RankEntryStat>
	{
		public OptionalRankEntryStatArray()
		{
		}
		public OptionalRankEntryStatArray(RankEntryStat[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalRankEntry : Beamable.Common.Content.Optional<RankEntry>
	{
		public OptionalRankEntry()
		{
		}
		public OptionalRankEntry(RankEntry value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalMetadataView : Beamable.Common.Content.Optional<MetadataView>
	{
		public OptionalMetadataView()
		{
		}
		public OptionalMetadataView(MetadataView value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalOrderRules : Beamable.Common.Content.Optional<OrderRules>
	{
		public OptionalOrderRules()
		{
		}
		public OptionalOrderRules(OrderRules value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalRoleMappingArray : Beamable.Common.Content.OptionalArray<RoleMapping>
	{
		public OptionalRoleMappingArray()
		{
		}
		public OptionalRoleMappingArray(RoleMapping[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalCurrencyChangeArray : Beamable.Common.Content.OptionalArray<CurrencyChange>
	{
		public OptionalCurrencyChangeArray()
		{
		}
		public OptionalCurrencyChangeArray(CurrencyChange[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalEntitlementClaimWindow : Beamable.Common.Content.Optional<EntitlementClaimWindow>
	{
		public OptionalEntitlementClaimWindow()
		{
		}
		public OptionalEntitlementClaimWindow(EntitlementClaimWindow value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalGamerTagAssociation : Beamable.Common.Content.Optional<GamerTagAssociation>
	{
		public OptionalGamerTagAssociation()
		{
		}
		public OptionalGamerTagAssociation(GamerTagAssociation value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalStatStringListEntryArray : Beamable.Common.Content.OptionalArray<StatStringListEntry>
	{
		public OptionalStatStringListEntryArray()
		{
		}
		public OptionalStatStringListEntryArray(StatStringListEntry[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalTournamentEntry : Beamable.Common.Content.Optional<TournamentEntry>
	{
		public OptionalTournamentEntry()
		{
		}
		public OptionalTournamentEntry(TournamentEntry value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalCompletedStatusArray : Beamable.Common.Content.OptionalArray<CompletedStatus>
	{
		public OptionalCompletedStatusArray()
		{
		}
		public OptionalCompletedStatusArray(CompletedStatus[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalTournamentGroupEntry : Beamable.Common.Content.Optional<TournamentGroupEntry>
	{
		public OptionalTournamentGroupEntry()
		{
		}
		public OptionalTournamentGroupEntry(TournamentGroupEntry value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalContextInfo : Beamable.Common.Content.Optional<ContextInfo>
	{
		public OptionalContextInfo()
		{
		}
		public OptionalContextInfo(ContextInfo value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalObjectRequestArray : Beamable.Common.Content.OptionalArray<ObjectRequest>
	{
		public OptionalObjectRequestArray()
		{
		}
		public OptionalObjectRequestArray(ObjectRequest[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalMetadataPairArray : Beamable.Common.Content.OptionalArray<MetadataPair>
	{
		public OptionalMetadataPairArray()
		{
		}
		public OptionalMetadataPairArray(MetadataPair[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalSendNotification : Beamable.Common.Content.Optional<SendNotification>
	{
		public OptionalSendNotification()
		{
		}
		public OptionalSendNotification(SendNotification value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalContentLimits : Beamable.Common.Content.Optional<ContentLimits>
	{
		public OptionalContentLimits()
		{
		}
		public OptionalContentLimits(ContentLimits value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalServiceLimits : Beamable.Common.Content.Optional<ServiceLimits>
	{
		public OptionalServiceLimits()
		{
		}
		public OptionalServiceLimits(ServiceLimits value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalGatewayLimits : Beamable.Common.Content.Optional<GatewayLimits>
	{
		public OptionalGatewayLimits()
		{
		}
		public OptionalGatewayLimits(GatewayLimits value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalBeamoLimits : Beamable.Common.Content.Optional<BeamoLimits>
	{
		public OptionalBeamoLimits()
		{
		}
		public OptionalBeamoLimits(BeamoLimits value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalRedisShardArray : Beamable.Common.Content.OptionalArray<RedisShard>
	{
		public OptionalRedisShardArray()
		{
		}
		public OptionalRedisShardArray(RedisShard[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalMessage : Beamable.Common.Content.Optional<Message>
	{
		public OptionalMessage()
		{
		}
		public OptionalMessage(Message value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalMessageArray : Beamable.Common.Content.OptionalArray<Message>
	{
		public OptionalMessageArray()
		{
		}
		public OptionalMessageArray(Message[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalCommerceLootRoll : Beamable.Common.Content.Optional<CommerceLootRoll>
	{
		public OptionalCommerceLootRoll()
		{
		}
		public OptionalCommerceLootRoll(CommerceLootRoll value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalPeriod : Beamable.Common.Content.Optional<Period>
	{
		public OptionalPeriod()
		{
		}
		public OptionalPeriod(Period value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalCatalog : Beamable.Common.Content.Optional<Catalog>
	{
		public OptionalCatalog()
		{
		}
		public OptionalCatalog(Catalog value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalWebhookComet : Beamable.Common.Content.Optional<WebhookComet>
	{
		public OptionalWebhookComet()
		{
		}
		public OptionalWebhookComet(WebhookComet value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalAnnouncementAttachmentArray : Beamable.Common.Content.OptionalArray<AnnouncementAttachment>
	{
		public OptionalAnnouncementAttachmentArray()
		{
		}
		public OptionalAnnouncementAttachmentArray(AnnouncementAttachment[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalPlayerReward : Beamable.Common.Content.Optional<PlayerReward>
	{
		public OptionalPlayerReward()
		{
		}
		public OptionalPlayerReward(PlayerReward value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalVariableReference : Beamable.Common.Content.Optional<VariableReference>
	{
		public OptionalVariableReference()
		{
		}
		public OptionalVariableReference(VariableReference value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalAttachmentPropertyArray : Beamable.Common.Content.OptionalArray<AttachmentProperty>
	{
		public OptionalAttachmentPropertyArray()
		{
		}
		public OptionalAttachmentPropertyArray(AttachmentProperty[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalCurrencyChangeRewardArray : Beamable.Common.Content.OptionalArray<CurrencyChangeReward>
	{
		public OptionalCurrencyChangeRewardArray()
		{
		}
		public OptionalCurrencyChangeRewardArray(CurrencyChangeReward[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalWebhookRewardArray : Beamable.Common.Content.OptionalArray<WebhookReward>
	{
		public OptionalWebhookRewardArray()
		{
		}
		public OptionalWebhookRewardArray(WebhookReward[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalNewItemRewardArray : Beamable.Common.Content.OptionalArray<NewItemReward>
	{
		public OptionalNewItemRewardArray()
		{
		}
		public OptionalNewItemRewardArray(NewItemReward[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class MapOfAnnouncementState : Beamable.Common.Content.SerializableDictionaryStringToSomething<AnnouncementState>
	{
	}
	[System.SerializableAttribute()]
	public class OptionalAttachmentRequestArray : Beamable.Common.Content.OptionalArray<AttachmentRequest>
	{
		public OptionalAttachmentRequestArray()
		{
		}
		public OptionalAttachmentRequestArray(AttachmentRequest[] value)
		{
			HasValue = true;
			Value = value;
		}
	}
	[System.SerializableAttribute()]
	public class OptionalMailRewards : Beamable.Common.Content.Optional<MailRewards>
	{
		public OptionalMailRewards()
		{
		}
		public OptionalMailRewards(MailRewards value)
		{
			HasValue = true;
			Value = value;
		}
	}
}
