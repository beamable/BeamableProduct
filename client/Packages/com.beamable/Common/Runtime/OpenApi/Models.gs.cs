
namespace Beamable.Api.Autogenerated.Models
{
    using Beamable.Common.Content;
    using Beamable.Serialization;
    
    [System.SerializableAttribute()]
    public partial class RefreshTokenAuthRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString customerId = new OptionalString();
        public OptionalString realmId = new OptionalString();
        public OptionalString refreshToken = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("customerId") 
                        || ((customerId != default(OptionalString)) 
                        && customerId.HasValue)))
            {
                s.Serialize("customerId", ref customerId.Value);
                customerId.HasValue = true;
            }
            if ((s.HasKey("realmId") 
                        || ((realmId != default(OptionalString)) 
                        && realmId.HasValue)))
            {
                s.Serialize("realmId", ref realmId.Value);
                realmId.HasValue = true;
            }
            if ((s.HasKey("refreshToken") 
                        || ((refreshToken != default(OptionalString)) 
                        && refreshToken.HasValue)))
            {
                s.Serialize("refreshToken", ref refreshToken.Value);
                refreshToken.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class AuthResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString accessToken = new OptionalString();
        public OptionalString refreshToken = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("accessToken") 
                        || ((accessToken != default(OptionalString)) 
                        && accessToken.HasValue)))
            {
                s.Serialize("accessToken", ref accessToken.Value);
                accessToken.HasValue = true;
            }
            if ((s.HasKey("refreshToken") 
                        || ((refreshToken != default(OptionalString)) 
                        && refreshToken.HasValue)))
            {
                s.Serialize("refreshToken", ref refreshToken.Value);
                refreshToken.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ProblemDetails : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString detail = new OptionalString();
        public OptionalString instance = new OptionalString();
        public OptionalInt status = new OptionalInt();
        public OptionalString title = new OptionalString();
        public OptionalString type = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("detail") 
                        || ((detail != default(OptionalString)) 
                        && detail.HasValue)))
            {
                s.Serialize("detail", ref detail.Value);
                detail.HasValue = true;
            }
            if ((s.HasKey("instance") 
                        || ((instance != default(OptionalString)) 
                        && instance.HasValue)))
            {
                s.Serialize("instance", ref instance.Value);
                instance.HasValue = true;
            }
            if ((s.HasKey("status") 
                        || ((status != default(OptionalInt)) 
                        && status.HasValue)))
            {
                s.Serialize("status", ref status.Value);
                status.HasValue = true;
            }
            if ((s.HasKey("title") 
                        || ((title != default(OptionalString)) 
                        && title.HasValue)))
            {
                s.Serialize("title", ref title.Value);
                title.HasValue = true;
            }
            if ((s.HasKey("type") 
                        || ((type != default(OptionalString)) 
                        && type.HasValue)))
            {
                s.Serialize("type", ref type.Value);
                type.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ServerTokenAuthRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString clientId = new OptionalString();
        public OptionalString clientSecret = new OptionalString();
        public OptionalString customerId = new OptionalString();
        public OptionalString realmId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("clientId") 
                        || ((clientId != default(OptionalString)) 
                        && clientId.HasValue)))
            {
                s.Serialize("clientId", ref clientId.Value);
                clientId.HasValue = true;
            }
            if ((s.HasKey("clientSecret") 
                        || ((clientSecret != default(OptionalString)) 
                        && clientSecret.HasValue)))
            {
                s.Serialize("clientSecret", ref clientSecret.Value);
                clientSecret.HasValue = true;
            }
            if ((s.HasKey("customerId") 
                        || ((customerId != default(OptionalString)) 
                        && customerId.HasValue)))
            {
                s.Serialize("customerId", ref customerId.Value);
                customerId.HasValue = true;
            }
            if ((s.HasKey("realmId") 
                        || ((realmId != default(OptionalString)) 
                        && realmId.HasValue)))
            {
                s.Serialize("realmId", ref realmId.Value);
                realmId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ServerTokenResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString accessToken = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("accessToken") 
                        || ((accessToken != default(OptionalString)) 
                        && accessToken.HasValue)))
            {
                s.Serialize("accessToken", ref accessToken.Value);
                accessToken.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class LobbyQueryResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfLobby results = new OptionalArrayOfLobby();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("results") 
                        || ((results != default(OptionalArrayOfLobby)) 
                        && results.HasValue)))
            {
                s.SerializeArray("results", ref results.Value);
                results.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class CreateLobby : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalMapOfString data = new OptionalMapOfString();
        public OptionalString description = new OptionalString();
        public OptionalString matchType = new OptionalString();
        public OptionalInt maxPlayers = new OptionalInt();
        public OptionalString name = new OptionalString();
        public OptionalInt passcodeLength = new OptionalInt();
        public OptionalArrayOfTag playerTags = new OptionalArrayOfTag();
        public OptionalLobbyRestriction restriction = new OptionalLobbyRestriction();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("data") 
                        || ((data != default(OptionalMapOfString)) 
                        && data.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("data", ref data.Value);
                data.HasValue = true;
            }
            if ((s.HasKey("description") 
                        || ((description != default(OptionalString)) 
                        && description.HasValue)))
            {
                s.Serialize("description", ref description.Value);
                description.HasValue = true;
            }
            if ((s.HasKey("matchType") 
                        || ((matchType != default(OptionalString)) 
                        && matchType.HasValue)))
            {
                s.Serialize("matchType", ref matchType.Value);
                matchType.HasValue = true;
            }
            if ((s.HasKey("maxPlayers") 
                        || ((maxPlayers != default(OptionalInt)) 
                        && maxPlayers.HasValue)))
            {
                s.Serialize("maxPlayers", ref maxPlayers.Value);
                maxPlayers.HasValue = true;
            }
            if ((s.HasKey("name") 
                        || ((name != default(OptionalString)) 
                        && name.HasValue)))
            {
                s.Serialize("name", ref name.Value);
                name.HasValue = true;
            }
            if ((s.HasKey("passcodeLength") 
                        || ((passcodeLength != default(OptionalInt)) 
                        && passcodeLength.HasValue)))
            {
                s.Serialize("passcodeLength", ref passcodeLength.Value);
                passcodeLength.HasValue = true;
            }
            if ((s.HasKey("playerTags") 
                        || ((playerTags != default(OptionalArrayOfTag)) 
                        && playerTags.HasValue)))
            {
                s.SerializeArray("playerTags", ref playerTags.Value);
                playerTags.HasValue = true;
            }
            if ((s.HasKey("restriction") 
                        || ((restriction != default(OptionalLobbyRestriction)) 
                        && restriction.HasValue)))
            {
                s.SerializeEnum("restriction", ref restriction.Value, LobbyRestrictionExtensions.ToEnumString, LobbyRestrictionExtensions.FromEnumString);
                restriction.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Lobby : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalDateTime created = new OptionalDateTime();
        public OptionalMapOfString data = new OptionalMapOfString();
        public OptionalString description = new OptionalString();
        public OptionalString host = new OptionalString();
        public OptionalString lobbyId = new OptionalString();
        public OptionalMatchType matchType = new OptionalMatchType();
        public OptionalInt maxPlayers = new OptionalInt();
        public OptionalString name = new OptionalString();
        public OptionalString passcode = new OptionalString();
        public OptionalArrayOfLobbyPlayer players = new OptionalArrayOfLobbyPlayer();
        public OptionalLobbyRestriction restriction = new OptionalLobbyRestriction();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("created") 
                        || ((created != default(OptionalDateTime)) 
                        && created.HasValue)))
            {
                s.Serialize("created", ref created.Value, "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-ddTHH:mm:ss.fZ", "yyyy-MM-ddTHH:mm:ss.ffZ", "yyyy-MM-ddTHH:mm:ss.fffZ", "yyyy-MM-ddTHH:mm:ss.ffffZ", "yyyy-MM-ddTHH:mm:ss.fffffZ", "yyyy-MM-ddTHH:mm:ss.ffffffZ", "yyyy-MM-ddTHH:mm:ss.fffffffzzz", "yyyy-MM-ddTHH:mm:ss.ffffffffzzz", "yyyy-MM-ddTHH:mm:ss.fffffffffzzz");
                created.HasValue = true;
            }
            if ((s.HasKey("data") 
                        || ((data != default(OptionalMapOfString)) 
                        && data.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("data", ref data.Value);
                data.HasValue = true;
            }
            if ((s.HasKey("description") 
                        || ((description != default(OptionalString)) 
                        && description.HasValue)))
            {
                s.Serialize("description", ref description.Value);
                description.HasValue = true;
            }
            if ((s.HasKey("host") 
                        || ((host != default(OptionalString)) 
                        && host.HasValue)))
            {
                s.Serialize("host", ref host.Value);
                host.HasValue = true;
            }
            if ((s.HasKey("lobbyId") 
                        || ((lobbyId != default(OptionalString)) 
                        && lobbyId.HasValue)))
            {
                s.Serialize("lobbyId", ref lobbyId.Value);
                lobbyId.HasValue = true;
            }
            if ((s.HasKey("matchType") 
                        || ((matchType != default(OptionalMatchType)) 
                        && matchType.HasValue)))
            {
                s.Serialize("matchType", ref matchType.Value);
                matchType.HasValue = true;
            }
            if ((s.HasKey("maxPlayers") 
                        || ((maxPlayers != default(OptionalInt)) 
                        && maxPlayers.HasValue)))
            {
                s.Serialize("maxPlayers", ref maxPlayers.Value);
                maxPlayers.HasValue = true;
            }
            if ((s.HasKey("name") 
                        || ((name != default(OptionalString)) 
                        && name.HasValue)))
            {
                s.Serialize("name", ref name.Value);
                name.HasValue = true;
            }
            if ((s.HasKey("passcode") 
                        || ((passcode != default(OptionalString)) 
                        && passcode.HasValue)))
            {
                s.Serialize("passcode", ref passcode.Value);
                passcode.HasValue = true;
            }
            if ((s.HasKey("players") 
                        || ((players != default(OptionalArrayOfLobbyPlayer)) 
                        && players.HasValue)))
            {
                s.SerializeArray("players", ref players.Value);
                players.HasValue = true;
            }
            if ((s.HasKey("restriction") 
                        || ((restriction != default(OptionalLobbyRestriction)) 
                        && restriction.HasValue)))
            {
                s.SerializeEnum("restriction", ref restriction.Value, LobbyRestrictionExtensions.ToEnumString, LobbyRestrictionExtensions.FromEnumString);
                restriction.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class JoinLobby : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString passcode = new OptionalString();
        public OptionalArrayOfTag tags = new OptionalArrayOfTag();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("passcode") 
                        || ((passcode != default(OptionalString)) 
                        && passcode.HasValue)))
            {
                s.Serialize("passcode", ref passcode.Value);
                passcode.HasValue = true;
            }
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfTag)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class RemoveFromLobby : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString playerId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalString)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Acknowledge : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class UpdateLobby : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalUpdateData data = new OptionalUpdateData();
        public OptionalString description = new OptionalString();
        public OptionalString matchType = new OptionalString();
        public OptionalInt maxPlayers = new OptionalInt();
        public OptionalString name = new OptionalString();
        public OptionalString newHost = new OptionalString();
        public OptionalLobbyRestriction restriction = new OptionalLobbyRestriction();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("data") 
                        || ((data != default(OptionalUpdateData)) 
                        && data.HasValue)))
            {
                s.Serialize("data", ref data.Value);
                data.HasValue = true;
            }
            if ((s.HasKey("description") 
                        || ((description != default(OptionalString)) 
                        && description.HasValue)))
            {
                s.Serialize("description", ref description.Value);
                description.HasValue = true;
            }
            if ((s.HasKey("matchType") 
                        || ((matchType != default(OptionalString)) 
                        && matchType.HasValue)))
            {
                s.Serialize("matchType", ref matchType.Value);
                matchType.HasValue = true;
            }
            if ((s.HasKey("maxPlayers") 
                        || ((maxPlayers != default(OptionalInt)) 
                        && maxPlayers.HasValue)))
            {
                s.Serialize("maxPlayers", ref maxPlayers.Value);
                maxPlayers.HasValue = true;
            }
            if ((s.HasKey("name") 
                        || ((name != default(OptionalString)) 
                        && name.HasValue)))
            {
                s.Serialize("name", ref name.Value);
                name.HasValue = true;
            }
            if ((s.HasKey("newHost") 
                        || ((newHost != default(OptionalString)) 
                        && newHost.HasValue)))
            {
                s.Serialize("newHost", ref newHost.Value);
                newHost.HasValue = true;
            }
            if ((s.HasKey("restriction") 
                        || ((restriction != default(OptionalLobbyRestriction)) 
                        && restriction.HasValue)))
            {
                s.SerializeEnum("restriction", ref restriction.Value, LobbyRestrictionExtensions.ToEnumString, LobbyRestrictionExtensions.FromEnumString);
                restriction.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class AddTags : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString playerId = new OptionalString();
        public OptionalBool replace = new OptionalBool();
        public OptionalArrayOfTag tags = new OptionalArrayOfTag();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalString)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
            if ((s.HasKey("replace") 
                        || ((replace != default(OptionalBool)) 
                        && replace.HasValue)))
            {
                s.Serialize("replace", ref replace.Value);
                replace.HasValue = true;
            }
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfTag)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class RemoveTags : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString playerId = new OptionalString();
        public OptionalArrayOfString tags = new OptionalArrayOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalString)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfString)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class CreateFederatedGameServer : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString matchType = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("matchType") 
                        || ((matchType != default(OptionalString)) 
                        && matchType.HasValue)))
            {
                s.Serialize("matchType", ref matchType.Value);
                matchType.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ApiLobbiesServerPostLobbyResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    public enum LobbyRestriction
    {
        Null,
        Closed,
        Open,
    }
    public class LobbyRestrictionExtensions
    {
        public static string ToEnumString(LobbyRestriction val)
        {
            if ((LobbyRestriction.Null == val))
            {
                return "Null";
            }
            if ((LobbyRestriction.Closed == val))
            {
                return "Closed";
            }
            if ((LobbyRestriction.Open == val))
            {
                return "Open";
            }
            throw new System.ArgumentException("Unknown enum value");
        }
        public static LobbyRestriction FromEnumString(string str)
        {
            if (("Null" == str))
            {
                return LobbyRestriction.Null;
            }
            if (("Closed" == str))
            {
                return LobbyRestriction.Closed;
            }
            if (("Open" == str))
            {
                return LobbyRestriction.Open;
            }
            throw new System.ArgumentException("Unknown string value");
        }
    }
    [System.SerializableAttribute()]
    public partial class MatchType : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString federatedGameServerNamespace = new OptionalString();
        public OptionalString id = new OptionalString();
        public OptionalInt matchingIntervalSecs = new OptionalInt();
        public OptionalInt maxWaitDurationSecs = new OptionalInt();
        public OptionalArrayOfTeamContentProto teams = new OptionalArrayOfTeamContentProto();
        public OptionalInt waitAfterMinReachedSecs = new OptionalInt();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("federatedGameServerNamespace") 
                        || ((federatedGameServerNamespace != default(OptionalString)) 
                        && federatedGameServerNamespace.HasValue)))
            {
                s.Serialize("federatedGameServerNamespace", ref federatedGameServerNamespace.Value);
                federatedGameServerNamespace.HasValue = true;
            }
            if ((s.HasKey("id") 
                        || ((id != default(OptionalString)) 
                        && id.HasValue)))
            {
                s.Serialize("id", ref id.Value);
                id.HasValue = true;
            }
            if ((s.HasKey("matchingIntervalSecs") 
                        || ((matchingIntervalSecs != default(OptionalInt)) 
                        && matchingIntervalSecs.HasValue)))
            {
                s.Serialize("matchingIntervalSecs", ref matchingIntervalSecs.Value);
                matchingIntervalSecs.HasValue = true;
            }
            if ((s.HasKey("maxWaitDurationSecs") 
                        || ((maxWaitDurationSecs != default(OptionalInt)) 
                        && maxWaitDurationSecs.HasValue)))
            {
                s.Serialize("maxWaitDurationSecs", ref maxWaitDurationSecs.Value);
                maxWaitDurationSecs.HasValue = true;
            }
            if ((s.HasKey("teams") 
                        || ((teams != default(OptionalArrayOfTeamContentProto)) 
                        && teams.HasValue)))
            {
                s.SerializeArray("teams", ref teams.Value);
                teams.HasValue = true;
            }
            if ((s.HasKey("waitAfterMinReachedSecs") 
                        || ((waitAfterMinReachedSecs != default(OptionalInt)) 
                        && waitAfterMinReachedSecs.HasValue)))
            {
                s.Serialize("waitAfterMinReachedSecs", ref waitAfterMinReachedSecs.Value);
                waitAfterMinReachedSecs.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class UpdateData : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfString deletes = new OptionalArrayOfString();
        public OptionalMapOfString updates = new OptionalMapOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("deletes") 
                        || ((deletes != default(OptionalArrayOfString)) 
                        && deletes.HasValue)))
            {
                s.SerializeArray("deletes", ref deletes.Value);
                deletes.HasValue = true;
            }
            if ((s.HasKey("updates") 
                        || ((updates != default(OptionalMapOfString)) 
                        && updates.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("updates", ref updates.Value);
                updates.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Tag : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString name = new OptionalString();
        public OptionalString value = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("name") 
                        || ((name != default(OptionalString)) 
                        && name.HasValue)))
            {
                s.Serialize("name", ref name.Value);
                name.HasValue = true;
            }
            if ((s.HasKey("value") 
                        || ((value != default(OptionalString)) 
                        && value.HasValue)))
            {
                s.Serialize("value", ref value.Value);
                value.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class LobbyPlayer : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalDateTime joined = new OptionalDateTime();
        public OptionalString playerId = new OptionalString();
        public OptionalArrayOfTag tags = new OptionalArrayOfTag();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("joined") 
                        || ((joined != default(OptionalDateTime)) 
                        && joined.HasValue)))
            {
                s.Serialize("joined", ref joined.Value, "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-ddTHH:mm:ss.fZ", "yyyy-MM-ddTHH:mm:ss.ffZ", "yyyy-MM-ddTHH:mm:ss.fffZ", "yyyy-MM-ddTHH:mm:ss.ffffZ", "yyyy-MM-ddTHH:mm:ss.fffffZ", "yyyy-MM-ddTHH:mm:ss.ffffffZ", "yyyy-MM-ddTHH:mm:ss.fffffffzzz", "yyyy-MM-ddTHH:mm:ss.ffffffffzzz", "yyyy-MM-ddTHH:mm:ss.fffffffffzzz");
                joined.HasValue = true;
            }
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalString)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfTag)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class TeamContentProto : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalInt maxPlayers = new OptionalInt();
        public OptionalInt minPlayers = new OptionalInt();
        public OptionalString name = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("maxPlayers") 
                        || ((maxPlayers != default(OptionalInt)) 
                        && maxPlayers.HasValue)))
            {
                s.Serialize("maxPlayers", ref maxPlayers.Value);
                maxPlayers.HasValue = true;
            }
            if ((s.HasKey("minPlayers") 
                        || ((minPlayers != default(OptionalInt)) 
                        && minPlayers.HasValue)))
            {
                s.Serialize("minPlayers", ref minPlayers.Value);
                minPlayers.HasValue = true;
            }
            if ((s.HasKey("name") 
                        || ((name != default(OptionalString)) 
                        && name.HasValue)))
            {
                s.Serialize("name", ref name.Value);
                name.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class MessageRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString body = new OptionalString();
        public OptionalString channel = new OptionalString();
        public OptionalString cid = new OptionalString();
        public OptionalString pid = new OptionalString();
        public OptionalString playerId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("body") 
                        || ((body != default(OptionalString)) 
                        && body.HasValue)))
            {
                s.Serialize("body", ref body.Value);
                body.HasValue = true;
            }
            if ((s.HasKey("channel") 
                        || ((channel != default(OptionalString)) 
                        && channel.HasValue)))
            {
                s.Serialize("channel", ref channel.Value);
                channel.HasValue = true;
            }
            if ((s.HasKey("cid") 
                        || ((cid != default(OptionalString)) 
                        && cid.HasValue)))
            {
                s.Serialize("cid", ref cid.Value);
                cid.HasValue = true;
            }
            if ((s.HasKey("pid") 
                        || ((pid != default(OptionalString)) 
                        && pid.HasValue)))
            {
                s.Serialize("pid", ref pid.Value);
                pid.HasValue = true;
            }
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalString)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ApiMailboxPublishPostMailboxResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class CreateParty : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString leader = new OptionalString();
        public OptionalInt maxSize = new OptionalInt();
        public OptionalString restriction = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("leader") 
                        || ((leader != default(OptionalString)) 
                        && leader.HasValue)))
            {
                s.Serialize("leader", ref leader.Value);
                leader.HasValue = true;
            }
            if ((s.HasKey("maxSize") 
                        || ((maxSize != default(OptionalInt)) 
                        && maxSize.HasValue)))
            {
                s.Serialize("maxSize", ref maxSize.Value);
                maxSize.HasValue = true;
            }
            if ((s.HasKey("restriction") 
                        || ((restriction != default(OptionalString)) 
                        && restriction.HasValue)))
            {
                s.Serialize("restriction", ref restriction.Value);
                restriction.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Party : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString id = new OptionalString();
        public OptionalString leader = new OptionalString();
        public OptionalInt maxSize = new OptionalInt();
        public OptionalArrayOfString members = new OptionalArrayOfString();
        public OptionalArrayOfString pendingInvites = new OptionalArrayOfString();
        public OptionalString restriction = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("id") 
                        || ((id != default(OptionalString)) 
                        && id.HasValue)))
            {
                s.Serialize("id", ref id.Value);
                id.HasValue = true;
            }
            if ((s.HasKey("leader") 
                        || ((leader != default(OptionalString)) 
                        && leader.HasValue)))
            {
                s.Serialize("leader", ref leader.Value);
                leader.HasValue = true;
            }
            if ((s.HasKey("maxSize") 
                        || ((maxSize != default(OptionalInt)) 
                        && maxSize.HasValue)))
            {
                s.Serialize("maxSize", ref maxSize.Value);
                maxSize.HasValue = true;
            }
            if ((s.HasKey("members") 
                        || ((members != default(OptionalArrayOfString)) 
                        && members.HasValue)))
            {
                s.SerializeArray("members", ref members.Value);
                members.HasValue = true;
            }
            if ((s.HasKey("pendingInvites") 
                        || ((pendingInvites != default(OptionalArrayOfString)) 
                        && pendingInvites.HasValue)))
            {
                s.SerializeArray("pendingInvites", ref pendingInvites.Value);
                pendingInvites.HasValue = true;
            }
            if ((s.HasKey("restriction") 
                        || ((restriction != default(OptionalString)) 
                        && restriction.HasValue)))
            {
                s.Serialize("restriction", ref restriction.Value);
                restriction.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class UpdateParty : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalInt maxSize = new OptionalInt();
        public OptionalString restriction = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("maxSize") 
                        || ((maxSize != default(OptionalInt)) 
                        && maxSize.HasValue)))
            {
                s.Serialize("maxSize", ref maxSize.Value);
                maxSize.HasValue = true;
            }
            if ((s.HasKey("restriction") 
                        || ((restriction != default(OptionalString)) 
                        && restriction.HasValue)))
            {
                s.Serialize("restriction", ref restriction.Value);
                restriction.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class PromoteNewLeader : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString playerId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalString)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class InviteToParty : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString playerId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalString)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ApiPartiesInvitePostPartyResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class CancelInviteToParty : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString playerId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalString)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ApiPartiesInviteDeletePartyResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaveParty : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString playerId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalString)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ApiPartiesMembersDeletePartyResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class OnlineStatusQuery : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfString playerIds = new OptionalArrayOfString();
        public OptionalBool toManyRequests = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playerIds") 
                        || ((playerIds != default(OptionalArrayOfString)) 
                        && playerIds.HasValue)))
            {
                s.SerializeArray("playerIds", ref playerIds.Value);
                playerIds.HasValue = true;
            }
            if ((s.HasKey("toManyRequests") 
                        || ((toManyRequests != default(OptionalBool)) 
                        && toManyRequests.HasValue)))
            {
                s.Serialize("toManyRequests", ref toManyRequests.Value);
                toManyRequests.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class PlayersStatusResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfOnlineStatus playersStatus = new OptionalArrayOfOnlineStatus();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playersStatus") 
                        || ((playersStatus != default(OptionalArrayOfOnlineStatus)) 
                        && playersStatus.HasValue)))
            {
                s.SerializeArray("playersStatus", ref playersStatus.Value);
                playersStatus.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class OnlineStatus : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString description = new OptionalString();
        public OptionalDateTime lastOnline = new OptionalDateTime();
        public OptionalBool online = new OptionalBool();
        public OptionalString playerId = new OptionalString();
        public OptionalPresenceStatus status = new OptionalPresenceStatus();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("description") 
                        || ((description != default(OptionalString)) 
                        && description.HasValue)))
            {
                s.Serialize("description", ref description.Value);
                description.HasValue = true;
            }
            if ((s.HasKey("lastOnline") 
                        || ((lastOnline != default(OptionalDateTime)) 
                        && lastOnline.HasValue)))
            {
                s.Serialize("lastOnline", ref lastOnline.Value, "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-ddTHH:mm:ss.fZ", "yyyy-MM-ddTHH:mm:ss.ffZ", "yyyy-MM-ddTHH:mm:ss.fffZ", "yyyy-MM-ddTHH:mm:ss.ffffZ", "yyyy-MM-ddTHH:mm:ss.fffffZ", "yyyy-MM-ddTHH:mm:ss.ffffffZ", "yyyy-MM-ddTHH:mm:ss.fffffffzzz", "yyyy-MM-ddTHH:mm:ss.ffffffffzzz", "yyyy-MM-ddTHH:mm:ss.fffffffffzzz");
                lastOnline.HasValue = true;
            }
            if ((s.HasKey("online") 
                        || ((online != default(OptionalBool)) 
                        && online.HasValue)))
            {
                s.Serialize("online", ref online.Value);
                online.HasValue = true;
            }
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalString)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
            if ((s.HasKey("status") 
                        || ((status != default(OptionalPresenceStatus)) 
                        && status.HasValue)))
            {
                s.SerializeEnum("status", ref status.Value, PresenceStatusExtensions.ToEnumString, PresenceStatusExtensions.FromEnumString);
                status.HasValue = true;
            }
        }
    }
    public enum PresenceStatus
    {
        Visible,
        Invisible,
        Dnd,
        Away,
    }
    public class PresenceStatusExtensions
    {
        public static string ToEnumString(PresenceStatus val)
        {
            if ((PresenceStatus.Visible == val))
            {
                return "Visible";
            }
            if ((PresenceStatus.Invisible == val))
            {
                return "Invisible";
            }
            if ((PresenceStatus.Dnd == val))
            {
                return "Dnd";
            }
            if ((PresenceStatus.Away == val))
            {
                return "Away";
            }
            throw new System.ArgumentException("Unknown enum value");
        }
        public static PresenceStatus FromEnumString(string str)
        {
            if (("Visible" == str))
            {
                return PresenceStatus.Visible;
            }
            if (("Invisible" == str))
            {
                return PresenceStatus.Invisible;
            }
            if (("Dnd" == str))
            {
                return PresenceStatus.Dnd;
            }
            if (("Away" == str))
            {
                return PresenceStatus.Away;
            }
            throw new System.ArgumentException("Unknown string value");
        }
    }
    [System.SerializableAttribute()]
    public partial class JobExecutionEvent : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString executionId = new OptionalString();
        public OptionalDateTime executionTime = new OptionalDateTime();
        public OptionalString jobId = new OptionalString();
        public OptionalInt retryCount = new OptionalInt();
        public OptionalJobRetryPolicy retryPolicy = new OptionalJobRetryPolicy();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("executionId") 
                        || ((executionId != default(OptionalString)) 
                        && executionId.HasValue)))
            {
                s.Serialize("executionId", ref executionId.Value);
                executionId.HasValue = true;
            }
            if ((s.HasKey("executionTime") 
                        || ((executionTime != default(OptionalDateTime)) 
                        && executionTime.HasValue)))
            {
                s.Serialize("executionTime", ref executionTime.Value, "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-ddTHH:mm:ss.fZ", "yyyy-MM-ddTHH:mm:ss.ffZ", "yyyy-MM-ddTHH:mm:ss.fffZ", "yyyy-MM-ddTHH:mm:ss.ffffZ", "yyyy-MM-ddTHH:mm:ss.fffffZ", "yyyy-MM-ddTHH:mm:ss.ffffffZ", "yyyy-MM-ddTHH:mm:ss.fffffffzzz", "yyyy-MM-ddTHH:mm:ss.ffffffffzzz", "yyyy-MM-ddTHH:mm:ss.fffffffffzzz");
                executionTime.HasValue = true;
            }
            if ((s.HasKey("jobId") 
                        || ((jobId != default(OptionalString)) 
                        && jobId.HasValue)))
            {
                s.Serialize("jobId", ref jobId.Value);
                jobId.HasValue = true;
            }
            if ((s.HasKey("retryCount") 
                        || ((retryCount != default(OptionalInt)) 
                        && retryCount.HasValue)))
            {
                s.Serialize("retryCount", ref retryCount.Value);
                retryCount.HasValue = true;
            }
            if ((s.HasKey("retryPolicy") 
                        || ((retryPolicy != default(OptionalJobRetryPolicy)) 
                        && retryPolicy.HasValue)))
            {
                s.Serialize("retryPolicy", ref retryPolicy.Value);
                retryPolicy.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class JobExecutionResult : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool isSuccess = new OptionalBool();
        public OptionalString message = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("isSuccess") 
                        || ((isSuccess != default(OptionalBool)) 
                        && isSuccess.HasValue)))
            {
                s.Serialize("isSuccess", ref isSuccess.Value);
                isSuccess.HasValue = true;
            }
            if ((s.HasKey("message") 
                        || ((message != default(OptionalString)) 
                        && message.HasValue)))
            {
                s.Serialize("message", ref message.Value);
                message.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class JobDefinitionSaveRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString id = new OptionalString();
        public IOneOf_HttpCallOrPublishMessageOrServiceCall jobAction;
        public OptionalString name = new OptionalString();
        public OptionalJobRetryPolicy retryPolicy = new OptionalJobRetryPolicy();
        public OptionalString source = new OptionalString();
        public IOneOf_CronTriggerOrExactTrigger[] triggers;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("id") 
                        || ((id != default(OptionalString)) 
                        && id.HasValue)))
            {
                s.Serialize("id", ref id.Value);
                id.HasValue = true;
            }
            s.Serialize("jobAction", ref jobAction);
            if ((s.HasKey("name") 
                        || ((name != default(OptionalString)) 
                        && name.HasValue)))
            {
                s.Serialize("name", ref name.Value);
                name.HasValue = true;
            }
            if ((s.HasKey("retryPolicy") 
                        || ((retryPolicy != default(OptionalJobRetryPolicy)) 
                        && retryPolicy.HasValue)))
            {
                s.Serialize("retryPolicy", ref retryPolicy.Value);
                retryPolicy.HasValue = true;
            }
            if ((s.HasKey("source") 
                        || ((source != default(OptionalString)) 
                        && source.HasValue)))
            {
                s.Serialize("source", ref source.Value);
                source.HasValue = true;
            }
            s.SerializeArray("triggers", ref triggers);
        }
    }
    public partial interface IOneOf_HttpCallOrPublishMessageOrServiceCall : Beamable.Serialization.JsonSerializable.ISerializable
    {
    }
    [System.SerializableAttribute()]
    public class OptionalIOneOf_HttpCallOrPublishMessageOrServiceCall : Beamable.Common.Content.Optional<IOneOf_HttpCallOrPublishMessageOrServiceCall>
    {
        public OptionalIOneOf_HttpCallOrPublishMessageOrServiceCall()
        {
        }
        public OptionalIOneOf_HttpCallOrPublishMessageOrServiceCall(IOneOf_HttpCallOrPublishMessageOrServiceCall value)
        {
            HasValue = true;
            Value = value;
        }
    }
    public class IOneOf_HttpCallOrPublishMessageOrServiceCallFactory : Beamable.Serialization.JsonSerializable.TypeLookupFactory<IOneOf_HttpCallOrPublishMessageOrServiceCall>
    {
        public IOneOf_HttpCallOrPublishMessageOrServiceCallFactory()
        {
            this.Add<HttpCall>("HttpCall");
            this.Add<PublishMessage>("PublishMessage");
            this.Add<ServiceCall>("ServiceCall");
        }
    }
    public partial interface IOneOf_CronTriggerOrExactTrigger : Beamable.Serialization.JsonSerializable.ISerializable
    {
    }
    [System.SerializableAttribute()]
    public class OptionalIOneOf_CronTriggerOrExactTrigger : Beamable.Common.Content.Optional<IOneOf_CronTriggerOrExactTrigger>
    {
        public OptionalIOneOf_CronTriggerOrExactTrigger()
        {
        }
        public OptionalIOneOf_CronTriggerOrExactTrigger(IOneOf_CronTriggerOrExactTrigger value)
        {
            HasValue = true;
            Value = value;
        }
    }
    public class IOneOf_CronTriggerOrExactTriggerFactory : Beamable.Serialization.JsonSerializable.TypeLookupFactory<IOneOf_CronTriggerOrExactTrigger>
    {
        public IOneOf_CronTriggerOrExactTriggerFactory()
        {
            this.Add<CronTrigger>("CronTrigger");
            this.Add<ExactTrigger>("ExactTrigger");
        }
    }
    [System.SerializableAttribute()]
    public partial class JobDefinition : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString id = new OptionalString();
        public IOneOf_HttpCallOrPublishMessageOrServiceCall jobAction;
        public OptionalDateTime lastUpdate = new OptionalDateTime();
        public OptionalString name = new OptionalString();
        public OptionalString owner = new OptionalString();
        public OptionalJobRetryPolicy retryPolicy = new OptionalJobRetryPolicy();
        public OptionalString source = new OptionalString();
        public IOneOf_CronTriggerOrExactTrigger[] triggers;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("id") 
                        || ((id != default(OptionalString)) 
                        && id.HasValue)))
            {
                s.Serialize("id", ref id.Value);
                id.HasValue = true;
            }
            s.Serialize("jobAction", ref jobAction);
            if ((s.HasKey("lastUpdate") 
                        || ((lastUpdate != default(OptionalDateTime)) 
                        && lastUpdate.HasValue)))
            {
                s.Serialize("lastUpdate", ref lastUpdate.Value, "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-ddTHH:mm:ss.fZ", "yyyy-MM-ddTHH:mm:ss.ffZ", "yyyy-MM-ddTHH:mm:ss.fffZ", "yyyy-MM-ddTHH:mm:ss.ffffZ", "yyyy-MM-ddTHH:mm:ss.fffffZ", "yyyy-MM-ddTHH:mm:ss.ffffffZ", "yyyy-MM-ddTHH:mm:ss.fffffffzzz", "yyyy-MM-ddTHH:mm:ss.ffffffffzzz", "yyyy-MM-ddTHH:mm:ss.fffffffffzzz");
                lastUpdate.HasValue = true;
            }
            if ((s.HasKey("name") 
                        || ((name != default(OptionalString)) 
                        && name.HasValue)))
            {
                s.Serialize("name", ref name.Value);
                name.HasValue = true;
            }
            if ((s.HasKey("owner") 
                        || ((owner != default(OptionalString)) 
                        && owner.HasValue)))
            {
                s.Serialize("owner", ref owner.Value);
                owner.HasValue = true;
            }
            if ((s.HasKey("retryPolicy") 
                        || ((retryPolicy != default(OptionalJobRetryPolicy)) 
                        && retryPolicy.HasValue)))
            {
                s.Serialize("retryPolicy", ref retryPolicy.Value);
                retryPolicy.HasValue = true;
            }
            if ((s.HasKey("source") 
                        || ((source != default(OptionalString)) 
                        && source.HasValue)))
            {
                s.Serialize("source", ref source.Value);
                source.HasValue = true;
            }
            s.SerializeArray("triggers", ref triggers);
        }
    }
    [System.SerializableAttribute()]
    public partial class ApiSchedulerJobsGetSchedulerResponse : System.Collections.Generic.List<JobDefinition>, Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class ApiSchedulerJobDeleteSchedulerResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class ApiSchedulerJobActivityGetSchedulerResponse : System.Collections.Generic.List<JobActivity>, Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class ApiSchedulerJobNextExecutionsGetSchedulerResponse : System.Collections.Generic.List<System.DateTime>, Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class ApiSchedulerJobCancelPutSchedulerResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class JobRetryPolicy : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalInt maxRetryCount = new OptionalInt();
        public OptionalInt retryDelayMs = new OptionalInt();
        public OptionalBool useExponentialBackoff = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("maxRetryCount") 
                        || ((maxRetryCount != default(OptionalInt)) 
                        && maxRetryCount.HasValue)))
            {
                s.Serialize("maxRetryCount", ref maxRetryCount.Value);
                maxRetryCount.HasValue = true;
            }
            if ((s.HasKey("retryDelayMs") 
                        || ((retryDelayMs != default(OptionalInt)) 
                        && retryDelayMs.HasValue)))
            {
                s.Serialize("retryDelayMs", ref retryDelayMs.Value);
                retryDelayMs.HasValue = true;
            }
            if ((s.HasKey("useExponentialBackoff") 
                        || ((useExponentialBackoff != default(OptionalBool)) 
                        && useExponentialBackoff.HasValue)))
            {
                s.Serialize("useExponentialBackoff", ref useExponentialBackoff.Value);
                useExponentialBackoff.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class HttpCall : Beamable.Serialization.JsonSerializable.ISerializable, IOneOf_HttpCallOrPublishMessageOrServiceCall
    {
        public OptionalString body = new OptionalString();
        public OptionalString contentType = new OptionalString();
        public OptionalArrayOfStringStringKeyValuePair headers = new OptionalArrayOfStringStringKeyValuePair();
        public OptionalString method = new OptionalString();
        public OptionalString type = new OptionalString();
        public OptionalString uri = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("body") 
                        || ((body != default(OptionalString)) 
                        && body.HasValue)))
            {
                s.Serialize("body", ref body.Value);
                body.HasValue = true;
            }
            if ((s.HasKey("contentType") 
                        || ((contentType != default(OptionalString)) 
                        && contentType.HasValue)))
            {
                s.Serialize("contentType", ref contentType.Value);
                contentType.HasValue = true;
            }
            if ((s.HasKey("headers") 
                        || ((headers != default(OptionalArrayOfStringStringKeyValuePair)) 
                        && headers.HasValue)))
            {
                s.SerializeArray("headers", ref headers.Value);
                headers.HasValue = true;
            }
            if ((s.HasKey("method") 
                        || ((method != default(OptionalString)) 
                        && method.HasValue)))
            {
                s.Serialize("method", ref method.Value);
                method.HasValue = true;
            }
            if ((s.HasKey("type") 
                        || ((type != default(OptionalString)) 
                        && type.HasValue)))
            {
                s.Serialize("type", ref type.Value);
                type.HasValue = true;
            }
            if ((s.HasKey("uri") 
                        || ((uri != default(OptionalString)) 
                        && uri.HasValue)))
            {
                s.Serialize("uri", ref uri.Value);
                uri.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class PublishMessage : Beamable.Serialization.JsonSerializable.ISerializable, IOneOf_HttpCallOrPublishMessageOrServiceCall
    {
        public OptionalMapOfString headers = new OptionalMapOfString();
        public OptionalString message = new OptionalString();
        public OptionalBool persist = new OptionalBool();
        public OptionalString topic = new OptionalString();
        public OptionalString type = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("headers") 
                        || ((headers != default(OptionalMapOfString)) 
                        && headers.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("headers", ref headers.Value);
                headers.HasValue = true;
            }
            if ((s.HasKey("message") 
                        || ((message != default(OptionalString)) 
                        && message.HasValue)))
            {
                s.Serialize("message", ref message.Value);
                message.HasValue = true;
            }
            if ((s.HasKey("persist") 
                        || ((persist != default(OptionalBool)) 
                        && persist.HasValue)))
            {
                s.Serialize("persist", ref persist.Value);
                persist.HasValue = true;
            }
            if ((s.HasKey("topic") 
                        || ((topic != default(OptionalString)) 
                        && topic.HasValue)))
            {
                s.Serialize("topic", ref topic.Value);
                topic.HasValue = true;
            }
            if ((s.HasKey("type") 
                        || ((type != default(OptionalString)) 
                        && type.HasValue)))
            {
                s.Serialize("type", ref type.Value);
                type.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ServiceCall : Beamable.Serialization.JsonSerializable.ISerializable, IOneOf_HttpCallOrPublishMessageOrServiceCall
    {
        public OptionalString body = new OptionalString();
        public OptionalString method = new OptionalString();
        public OptionalString type = new OptionalString();
        public OptionalString uri = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("body") 
                        || ((body != default(OptionalString)) 
                        && body.HasValue)))
            {
                s.Serialize("body", ref body.Value);
                body.HasValue = true;
            }
            if ((s.HasKey("method") 
                        || ((method != default(OptionalString)) 
                        && method.HasValue)))
            {
                s.Serialize("method", ref method.Value);
                method.HasValue = true;
            }
            if ((s.HasKey("type") 
                        || ((type != default(OptionalString)) 
                        && type.HasValue)))
            {
                s.Serialize("type", ref type.Value);
                type.HasValue = true;
            }
            if ((s.HasKey("uri") 
                        || ((uri != default(OptionalString)) 
                        && uri.HasValue)))
            {
                s.Serialize("uri", ref uri.Value);
                uri.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class JobActivity : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString executionId = new OptionalString();
        public OptionalString id = new OptionalString();
        public OptionalString jobId = new OptionalString();
        public OptionalString message = new OptionalString();
        public OptionalJobState state = new OptionalJobState();
        public OptionalDateTime timestamp = new OptionalDateTime();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("executionId") 
                        || ((executionId != default(OptionalString)) 
                        && executionId.HasValue)))
            {
                s.Serialize("executionId", ref executionId.Value);
                executionId.HasValue = true;
            }
            if ((s.HasKey("id") 
                        || ((id != default(OptionalString)) 
                        && id.HasValue)))
            {
                s.Serialize("id", ref id.Value);
                id.HasValue = true;
            }
            if ((s.HasKey("jobId") 
                        || ((jobId != default(OptionalString)) 
                        && jobId.HasValue)))
            {
                s.Serialize("jobId", ref jobId.Value);
                jobId.HasValue = true;
            }
            if ((s.HasKey("message") 
                        || ((message != default(OptionalString)) 
                        && message.HasValue)))
            {
                s.Serialize("message", ref message.Value);
                message.HasValue = true;
            }
            if ((s.HasKey("state") 
                        || ((state != default(OptionalJobState)) 
                        && state.HasValue)))
            {
                s.SerializeEnum("state", ref state.Value, JobStateExtensions.ToEnumString, JobStateExtensions.FromEnumString);
                state.HasValue = true;
            }
            if ((s.HasKey("timestamp") 
                        || ((timestamp != default(OptionalDateTime)) 
                        && timestamp.HasValue)))
            {
                s.Serialize("timestamp", ref timestamp.Value, "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-ddTHH:mm:ss.fZ", "yyyy-MM-ddTHH:mm:ss.ffZ", "yyyy-MM-ddTHH:mm:ss.fffZ", "yyyy-MM-ddTHH:mm:ss.ffffZ", "yyyy-MM-ddTHH:mm:ss.fffffZ", "yyyy-MM-ddTHH:mm:ss.ffffffZ", "yyyy-MM-ddTHH:mm:ss.fffffffzzz", "yyyy-MM-ddTHH:mm:ss.ffffffffzzz", "yyyy-MM-ddTHH:mm:ss.fffffffffzzz");
                timestamp.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class CronTrigger : Beamable.Serialization.JsonSerializable.ISerializable, IOneOf_CronTriggerOrExactTrigger
    {
        public OptionalString expression = new OptionalString();
        public OptionalString type = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("expression") 
                        || ((expression != default(OptionalString)) 
                        && expression.HasValue)))
            {
                s.Serialize("expression", ref expression.Value);
                expression.HasValue = true;
            }
            if ((s.HasKey("type") 
                        || ((type != default(OptionalString)) 
                        && type.HasValue)))
            {
                s.Serialize("type", ref type.Value);
                type.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ExactTrigger : Beamable.Serialization.JsonSerializable.ISerializable, IOneOf_CronTriggerOrExactTrigger
    {
        public OptionalDateTime executeAt = new OptionalDateTime();
        public OptionalString type = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("executeAt") 
                        || ((executeAt != default(OptionalDateTime)) 
                        && executeAt.HasValue)))
            {
                s.Serialize("executeAt", ref executeAt.Value, "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-ddTHH:mm:ss.fZ", "yyyy-MM-ddTHH:mm:ss.ffZ", "yyyy-MM-ddTHH:mm:ss.fffZ", "yyyy-MM-ddTHH:mm:ss.ffffZ", "yyyy-MM-ddTHH:mm:ss.fffffZ", "yyyy-MM-ddTHH:mm:ss.ffffffZ", "yyyy-MM-ddTHH:mm:ss.fffffffzzz", "yyyy-MM-ddTHH:mm:ss.ffffffffzzz", "yyyy-MM-ddTHH:mm:ss.fffffffffzzz");
                executeAt.HasValue = true;
            }
            if ((s.HasKey("type") 
                        || ((type != default(OptionalString)) 
                        && type.HasValue)))
            {
                s.Serialize("type", ref type.Value);
                type.HasValue = true;
            }
        }
    }
    public enum JobState
    {
        ENQUEUED,
        DISPATCHED,
        RUNNING,
        DONE,
        CANCELED,
        ERROR,
    }
    public class JobStateExtensions
    {
        public static string ToEnumString(JobState val)
        {
            if ((JobState.ENQUEUED == val))
            {
                return "ENQUEUED";
            }
            if ((JobState.DISPATCHED == val))
            {
                return "DISPATCHED";
            }
            if ((JobState.RUNNING == val))
            {
                return "RUNNING";
            }
            if ((JobState.DONE == val))
            {
                return "DONE";
            }
            if ((JobState.CANCELED == val))
            {
                return "CANCELED";
            }
            if ((JobState.ERROR == val))
            {
                return "ERROR";
            }
            throw new System.ArgumentException("Unknown enum value");
        }
        public static JobState FromEnumString(string str)
        {
            if (("ENQUEUED" == str))
            {
                return JobState.ENQUEUED;
            }
            if (("DISPATCHED" == str))
            {
                return JobState.DISPATCHED;
            }
            if (("RUNNING" == str))
            {
                return JobState.RUNNING;
            }
            if (("DONE" == str))
            {
                return JobState.DONE;
            }
            if (("CANCELED" == str))
            {
                return JobState.CANCELED;
            }
            if (("ERROR" == str))
            {
                return JobState.ERROR;
            }
            throw new System.ArgumentException("Unknown string value");
        }
    }
    [System.SerializableAttribute()]
    public partial class StringStringKeyValuePair : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString key = new OptionalString();
        public OptionalString value = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("key") 
                        || ((key != default(OptionalString)) 
                        && key.HasValue)))
            {
                s.Serialize("key", ref key.Value);
                key.HasValue = true;
            }
            if ((s.HasKey("value") 
                        || ((value != default(OptionalString)) 
                        && value.HasValue)))
            {
                s.Serialize("value", ref value.Value);
                value.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Match : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalDateTime created = new OptionalDateTime();
        public OptionalString matchId = new OptionalString();
        public OptionalMatchType matchType = new OptionalMatchType();
        public OptionalString status = new OptionalString();
        public OptionalArrayOfTeam teams = new OptionalArrayOfTeam();
        public OptionalArrayOfTicket tickets = new OptionalArrayOfTicket();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("created") 
                        || ((created != default(OptionalDateTime)) 
                        && created.HasValue)))
            {
                s.Serialize("created", ref created.Value, "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-ddTHH:mm:ss.fZ", "yyyy-MM-ddTHH:mm:ss.ffZ", "yyyy-MM-ddTHH:mm:ss.fffZ", "yyyy-MM-ddTHH:mm:ss.ffffZ", "yyyy-MM-ddTHH:mm:ss.fffffZ", "yyyy-MM-ddTHH:mm:ss.ffffffZ", "yyyy-MM-ddTHH:mm:ss.fffffffzzz", "yyyy-MM-ddTHH:mm:ss.ffffffffzzz", "yyyy-MM-ddTHH:mm:ss.fffffffffzzz");
                created.HasValue = true;
            }
            if ((s.HasKey("matchId") 
                        || ((matchId != default(OptionalString)) 
                        && matchId.HasValue)))
            {
                s.Serialize("matchId", ref matchId.Value);
                matchId.HasValue = true;
            }
            if ((s.HasKey("matchType") 
                        || ((matchType != default(OptionalMatchType)) 
                        && matchType.HasValue)))
            {
                s.Serialize("matchType", ref matchType.Value);
                matchType.HasValue = true;
            }
            if ((s.HasKey("status") 
                        || ((status != default(OptionalString)) 
                        && status.HasValue)))
            {
                s.Serialize("status", ref status.Value);
                status.HasValue = true;
            }
            if ((s.HasKey("teams") 
                        || ((teams != default(OptionalArrayOfTeam)) 
                        && teams.HasValue)))
            {
                s.SerializeArray("teams", ref teams.Value);
                teams.HasValue = true;
            }
            if ((s.HasKey("tickets") 
                        || ((tickets != default(OptionalArrayOfTicket)) 
                        && tickets.HasValue)))
            {
                s.SerializeArray("tickets", ref tickets.Value);
                tickets.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Team : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString name = new OptionalString();
        public OptionalArrayOfString players = new OptionalArrayOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("name") 
                        || ((name != default(OptionalString)) 
                        && name.HasValue)))
            {
                s.Serialize("name", ref name.Value);
                name.HasValue = true;
            }
            if ((s.HasKey("players") 
                        || ((players != default(OptionalArrayOfString)) 
                        && players.HasValue)))
            {
                s.SerializeArray("players", ref players.Value);
                players.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Ticket : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalDateTime created = new OptionalDateTime();
        public OptionalDateTime expires = new OptionalDateTime();
        public OptionalString matchId = new OptionalString();
        public OptionalString matchType = new OptionalString();
        public OptionalMapOfDouble numberProperties = new OptionalMapOfDouble();
        public OptionalString partyId = new OptionalString();
        public OptionalArrayOfString players = new OptionalArrayOfString();
        public OptionalInt priority = new OptionalInt();
        public OptionalString status = new OptionalString();
        public OptionalMapOfString stringProperties = new OptionalMapOfString();
        public OptionalArrayOfTag tags = new OptionalArrayOfTag();
        public OptionalString team = new OptionalString();
        public OptionalString ticketId = new OptionalString();
        public OptionalBool watchOnlineStatus = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("created") 
                        || ((created != default(OptionalDateTime)) 
                        && created.HasValue)))
            {
                s.Serialize("created", ref created.Value, "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-ddTHH:mm:ss.fZ", "yyyy-MM-ddTHH:mm:ss.ffZ", "yyyy-MM-ddTHH:mm:ss.fffZ", "yyyy-MM-ddTHH:mm:ss.ffffZ", "yyyy-MM-ddTHH:mm:ss.fffffZ", "yyyy-MM-ddTHH:mm:ss.ffffffZ", "yyyy-MM-ddTHH:mm:ss.fffffffzzz", "yyyy-MM-ddTHH:mm:ss.ffffffffzzz", "yyyy-MM-ddTHH:mm:ss.fffffffffzzz");
                created.HasValue = true;
            }
            if ((s.HasKey("expires") 
                        || ((expires != default(OptionalDateTime)) 
                        && expires.HasValue)))
            {
                s.Serialize("expires", ref expires.Value, "yyyy-MM-ddTHH:mm:ssZ", "yyyy-MM-ddTHH:mm:ss.fZ", "yyyy-MM-ddTHH:mm:ss.ffZ", "yyyy-MM-ddTHH:mm:ss.fffZ", "yyyy-MM-ddTHH:mm:ss.ffffZ", "yyyy-MM-ddTHH:mm:ss.fffffZ", "yyyy-MM-ddTHH:mm:ss.ffffffZ", "yyyy-MM-ddTHH:mm:ss.fffffffzzz", "yyyy-MM-ddTHH:mm:ss.ffffffffzzz", "yyyy-MM-ddTHH:mm:ss.fffffffffzzz");
                expires.HasValue = true;
            }
            if ((s.HasKey("matchId") 
                        || ((matchId != default(OptionalString)) 
                        && matchId.HasValue)))
            {
                s.Serialize("matchId", ref matchId.Value);
                matchId.HasValue = true;
            }
            if ((s.HasKey("matchType") 
                        || ((matchType != default(OptionalString)) 
                        && matchType.HasValue)))
            {
                s.Serialize("matchType", ref matchType.Value);
                matchType.HasValue = true;
            }
            if ((s.HasKey("numberProperties") 
                        || ((numberProperties != default(OptionalMapOfDouble)) 
                        && numberProperties.HasValue)))
            {
                s.SerializeDictionary<MapOfDouble, double>("numberProperties", ref numberProperties.Value);
                numberProperties.HasValue = true;
            }
            if ((s.HasKey("partyId") 
                        || ((partyId != default(OptionalString)) 
                        && partyId.HasValue)))
            {
                s.Serialize("partyId", ref partyId.Value);
                partyId.HasValue = true;
            }
            if ((s.HasKey("players") 
                        || ((players != default(OptionalArrayOfString)) 
                        && players.HasValue)))
            {
                s.SerializeArray("players", ref players.Value);
                players.HasValue = true;
            }
            if ((s.HasKey("priority") 
                        || ((priority != default(OptionalInt)) 
                        && priority.HasValue)))
            {
                s.Serialize("priority", ref priority.Value);
                priority.HasValue = true;
            }
            if ((s.HasKey("status") 
                        || ((status != default(OptionalString)) 
                        && status.HasValue)))
            {
                s.Serialize("status", ref status.Value);
                status.HasValue = true;
            }
            if ((s.HasKey("stringProperties") 
                        || ((stringProperties != default(OptionalMapOfString)) 
                        && stringProperties.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("stringProperties", ref stringProperties.Value);
                stringProperties.HasValue = true;
            }
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfTag)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
            if ((s.HasKey("team") 
                        || ((team != default(OptionalString)) 
                        && team.HasValue)))
            {
                s.Serialize("team", ref team.Value);
                team.HasValue = true;
            }
            if ((s.HasKey("ticketId") 
                        || ((ticketId != default(OptionalString)) 
                        && ticketId.HasValue)))
            {
                s.Serialize("ticketId", ref ticketId.Value);
                ticketId.HasValue = true;
            }
            if ((s.HasKey("watchOnlineStatus") 
                        || ((watchOnlineStatus != default(OptionalBool)) 
                        && watchOnlineStatus.HasValue)))
            {
                s.Serialize("watchOnlineStatus", ref watchOnlineStatus.Value);
                watchOnlineStatus.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class TicketReservationRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfString matchTypes = new OptionalArrayOfString();
        public OptionalInt maxWaitDurationSecs = new OptionalInt();
        public OptionalArrayOfString players = new OptionalArrayOfString();
        public OptionalArrayOfTag tags = new OptionalArrayOfTag();
        public OptionalString team = new OptionalString();
        public OptionalBool watchOnlineStatus = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("matchTypes") 
                        || ((matchTypes != default(OptionalArrayOfString)) 
                        && matchTypes.HasValue)))
            {
                s.SerializeArray("matchTypes", ref matchTypes.Value);
                matchTypes.HasValue = true;
            }
            if ((s.HasKey("maxWaitDurationSecs") 
                        || ((maxWaitDurationSecs != default(OptionalInt)) 
                        && maxWaitDurationSecs.HasValue)))
            {
                s.Serialize("maxWaitDurationSecs", ref maxWaitDurationSecs.Value);
                maxWaitDurationSecs.HasValue = true;
            }
            if ((s.HasKey("players") 
                        || ((players != default(OptionalArrayOfString)) 
                        && players.HasValue)))
            {
                s.SerializeArray("players", ref players.Value);
                players.HasValue = true;
            }
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfTag)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
            if ((s.HasKey("team") 
                        || ((team != default(OptionalString)) 
                        && team.HasValue)))
            {
                s.Serialize("team", ref team.Value);
                team.HasValue = true;
            }
            if ((s.HasKey("watchOnlineStatus") 
                        || ((watchOnlineStatus != default(OptionalBool)) 
                        && watchOnlineStatus.HasValue)))
            {
                s.Serialize("watchOnlineStatus", ref watchOnlineStatus.Value);
                watchOnlineStatus.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class TicketReservationResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfTicket tickets = new OptionalArrayOfTicket();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("tickets") 
                        || ((tickets != default(OptionalArrayOfTicket)) 
                        && tickets.HasValue)))
            {
                s.SerializeArray("tickets", ref tickets.Value);
                tickets.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ApiMatchmakingTicketsDeleteTicketResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class PartyInvitesForPlayerResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfPartyInvitation invitations = new OptionalArrayOfPartyInvitation();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("invitations") 
                        || ((invitations != default(OptionalArrayOfPartyInvitation)) 
                        && invitations.HasValue)))
            {
                s.SerializeArray("invitations", ref invitations.Value);
                invitations.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class PartyInvitation : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString invitedBy = new OptionalString();
        public OptionalString partyId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("invitedBy") 
                        || ((invitedBy != default(OptionalString)) 
                        && invitedBy.HasValue)))
            {
                s.Serialize("invitedBy", ref invitedBy.Value);
                invitedBy.HasValue = true;
            }
            if ((s.HasKey("partyId") 
                        || ((partyId != default(OptionalString)) 
                        && partyId.HasValue)))
            {
                s.Serialize("partyId", ref partyId.Value);
                partyId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ApiPlayersPresencePutPlayerPresenceResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class SetPresenceStatusRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString description = new OptionalString();
        public OptionalPresenceStatus status = new OptionalPresenceStatus();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("description") 
                        || ((description != default(OptionalString)) 
                        && description.HasValue)))
            {
                s.Serialize("description", ref description.Value);
                description.HasValue = true;
            }
            if ((s.HasKey("status") 
                        || ((status != default(OptionalPresenceStatus)) 
                        && status.HasValue)))
            {
                s.SerializeEnum("status", ref status.Value, PresenceStatusExtensions.ToEnumString, PresenceStatusExtensions.FromEnumString);
                status.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ReferenceSuperset : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString checksum = new OptionalString();
        public string id;
        public OptionalArrayOfString tags = new OptionalArrayOfString();
        public string type;
        public string uri;
        public string version;
        public OptionalString visibility = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("checksum") 
                        || ((checksum != default(OptionalString)) 
                        && checksum.HasValue)))
            {
                s.Serialize("checksum", ref checksum.Value);
                checksum.HasValue = true;
            }
            s.Serialize("id", ref id);
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfString)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
            s.Serialize("type", ref type);
            s.Serialize("uri", ref uri);
            s.Serialize("version", ref version);
            if ((s.HasKey("visibility") 
                        || ((visibility != default(OptionalString)) 
                        && visibility.HasValue)))
            {
                s.Serialize("visibility", ref visibility.Value);
                visibility.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class BinaryDefinition : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string checksum;
        public string id;
        public OptionalArrayOfString tags = new OptionalArrayOfString();
        public string uploadContentType;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("checksum", ref checksum);
            s.Serialize("id", ref id);
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfString)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
            s.Serialize("uploadContentType", ref uploadContentType);
        }
    }
    [System.SerializableAttribute()]
    public partial class PullManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString id = new OptionalString();
        public string sourceRealmPid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("id") 
                        || ((id != default(OptionalString)) 
                        && id.HasValue)))
            {
                s.Serialize("id", ref id.Value);
                id.HasValue = true;
            }
            s.Serialize("sourceRealmPid", ref sourceRealmPid);
        }
    }
    [System.SerializableAttribute()]
    public partial class ContentBasicGetManifestsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ContentBasicManifest[] manifests;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("manifests", ref manifests);
        }
    }
    [System.SerializableAttribute()]
    public partial class SaveBinaryRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public BinaryDefinition[] binary;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("binary", ref binary);
        }
    }
    [System.SerializableAttribute()]
    public partial class TextReference : Beamable.Serialization.JsonSerializable.ISerializable, IOneOf_ContentOrTextOrBinary
    {
        public OptionalString checksum = new OptionalString();
        public OptionalLong created = new OptionalLong();
        public string id;
        public OptionalLong lastChanged = new OptionalLong();
        public string[] tags;
        public TextReference_type type;
        public string uri;
        public string version;
        public string visibility;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("checksum") 
                        || ((checksum != default(OptionalString)) 
                        && checksum.HasValue)))
            {
                s.Serialize("checksum", ref checksum.Value);
                checksum.HasValue = true;
            }
            if ((s.HasKey("created") 
                        || ((created != default(OptionalLong)) 
                        && created.HasValue)))
            {
                s.Serialize("created", ref created.Value);
                created.HasValue = true;
            }
            s.Serialize("id", ref id);
            if ((s.HasKey("lastChanged") 
                        || ((lastChanged != default(OptionalLong)) 
                        && lastChanged.HasValue)))
            {
                s.Serialize("lastChanged", ref lastChanged.Value);
                lastChanged.HasValue = true;
            }
            s.SerializeArray("tags", ref tags);
            s.SerializeEnum("type", ref type, TextReference_typeExtensions.ToEnumString, TextReference_typeExtensions.FromEnumString);
            s.Serialize("uri", ref uri);
            s.Serialize("version", ref version);
            s.Serialize("visibility", ref visibility);
        }
        public enum TextReference_type
        {
            Text,
        }
        public class TextReference_typeExtensions
        {
            public static string ToEnumString(TextReference_type val)
            {
                if ((TextReference_type.Text == val))
                {
                    return "text";
                }
                throw new System.ArgumentException("Unknown enum value");
            }
            public static TextReference_type FromEnumString(string str)
            {
                if (("text" == str))
                {
                    return TextReference_type.Text;
                }
                throw new System.ArgumentException("Unknown string value");
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class SaveBinaryResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public BinaryReference[] binary;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("binary", ref binary);
        }
    }
    [System.SerializableAttribute()]
    public partial class SaveTextRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public TextDefinition[] text;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("text", ref text);
        }
    }
    [System.SerializableAttribute()]
    public partial class TextDefinition : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string checksum;
        public string id;
        public MapOfString properties = new MapOfString();
        public OptionalArrayOfString tags = new OptionalArrayOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("checksum", ref checksum);
            s.Serialize("id", ref id);
            s.SerializeDictionary<MapOfString, string>("properties", ref properties);
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfString)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class PutLocalizationsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MapOfArrayOfLocalizedValue localizations = new MapOfArrayOfLocalizedValue();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeDictionary<MapOfArrayOfLocalizedValue, LocalizedValue[]>("localizations", ref localizations);
        }
    }
    [System.SerializableAttribute()]
    public partial class ContentOrText : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string id;
        public MapOfString properties = new MapOfString();
        public string version;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            s.SerializeDictionary<MapOfString, string>("properties", ref properties);
            s.Serialize("version", ref version);
        }
    }
    [System.SerializableAttribute()]
    public partial class CommonResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MapOfString data = new MapOfString();
        public string result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeDictionary<MapOfString, string>("data", ref data);
            s.Serialize("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class ArchiveOrUnarchiveManifestsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] manifestIds;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("manifestIds", ref manifestIds);
        }
    }
    [System.SerializableAttribute()]
    public partial class ContentMeta : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString data = new OptionalString();
        public OptionalString text = new OptionalString();
        public ContentVisibility visibility = new ContentVisibility();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("data") 
                        || ((data != default(OptionalString)) 
                        && data.HasValue)))
            {
                s.Serialize("data", ref data.Value);
                data.HasValue = true;
            }
            if ((s.HasKey("text") 
                        || ((text != default(OptionalString)) 
                        && text.HasValue)))
            {
                s.Serialize("text", ref text.Value);
                text.HasValue = true;
            }
            s.SerializeEnum("visibility", ref visibility, ContentVisibilityExtensions.ToEnumString, ContentVisibilityExtensions.FromEnumString);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetExactManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string uid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("uid", ref uid);
        }
    }
    [System.SerializableAttribute()]
    public partial class BinaryReference : Beamable.Serialization.JsonSerializable.ISerializable, IOneOf_ContentOrTextOrBinary
    {
        public OptionalString checksum = new OptionalString();
        public OptionalString created = new OptionalString();
        public string id;
        public OptionalString lastChanged = new OptionalString();
        public string[] tags;
        public BinaryReference_type type;
        public string uploadMethod;
        public string uploadUri;
        public string uri;
        public string version;
        public string visibility;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("checksum") 
                        || ((checksum != default(OptionalString)) 
                        && checksum.HasValue)))
            {
                s.Serialize("checksum", ref checksum.Value);
                checksum.HasValue = true;
            }
            if ((s.HasKey("created") 
                        || ((created != default(OptionalString)) 
                        && created.HasValue)))
            {
                s.Serialize("created", ref created.Value);
                created.HasValue = true;
            }
            s.Serialize("id", ref id);
            if ((s.HasKey("lastChanged") 
                        || ((lastChanged != default(OptionalString)) 
                        && lastChanged.HasValue)))
            {
                s.Serialize("lastChanged", ref lastChanged.Value);
                lastChanged.HasValue = true;
            }
            s.SerializeArray("tags", ref tags);
            s.SerializeEnum("type", ref type, BinaryReference_typeExtensions.ToEnumString, BinaryReference_typeExtensions.FromEnumString);
            s.Serialize("uploadMethod", ref uploadMethod);
            s.Serialize("uploadUri", ref uploadUri);
            s.Serialize("uri", ref uri);
            s.Serialize("version", ref version);
            s.Serialize("visibility", ref visibility);
        }
        public enum BinaryReference_type
        {
            Binary,
        }
        public class BinaryReference_typeExtensions
        {
            public static string ToEnumString(BinaryReference_type val)
            {
                if ((BinaryReference_type.Binary == val))
                {
                    return "binary";
                }
                throw new System.ArgumentException("Unknown enum value");
            }
            public static BinaryReference_type FromEnumString(string str)
            {
                if (("binary" == str))
                {
                    return BinaryReference_type.Binary;
                }
                throw new System.ArgumentException("Unknown string value");
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ContentBasicGetManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString id = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("id") 
                        || ((id != default(OptionalString)) 
                        && id.HasValue)))
            {
                s.Serialize("id", ref id.Value);
                id.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class PullAllManifestsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string sourceRealmPid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("sourceRealmPid", ref sourceRealmPid);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetManifestHistoryRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString id = new OptionalString();
        public OptionalInt limit = new OptionalInt();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("id") 
                        || ((id != default(OptionalString)) 
                        && id.HasValue)))
            {
                s.Serialize("id", ref id.Value);
                id.HasValue = true;
            }
            if ((s.HasKey("limit") 
                        || ((limit != default(OptionalInt)) 
                        && limit.HasValue)))
            {
                s.Serialize("limit", ref limit.Value);
                limit.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ContentDefinition : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string checksum;
        public string id;
        public string prefix;
        public MapOfContentMeta properties = new MapOfContentMeta();
        public OptionalArrayOfString tags = new OptionalArrayOfString();
        public OptionalArrayOfMapOfContentMeta variants = new OptionalArrayOfMapOfContentMeta();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("checksum", ref checksum);
            s.Serialize("id", ref id);
            s.Serialize("prefix", ref prefix);
            s.SerializeDictionary<MapOfContentMeta, ContentMeta>("properties", ref properties);
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfString)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
            if ((s.HasKey("variants") 
                        || ((variants != default(OptionalArrayOfMapOfContentMeta)) 
                        && variants.HasValue)))
            {
                s.SerializeList("variants", ref variants.Value);
                variants.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ContentBasicManifestChecksum : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool archived = new OptionalBool();
        public string checksum;
        public long createdAt;
        public string id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("archived") 
                        || ((archived != default(OptionalBool)) 
                        && archived.HasValue)))
            {
                s.Serialize("archived", ref archived.Value);
                archived.HasValue = true;
            }
            s.Serialize("checksum", ref checksum);
            s.Serialize("createdAt", ref createdAt);
            s.Serialize("id", ref id);
        }
    }
    [System.SerializableAttribute()]
    public partial class SaveContentRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ContentDefinition[] content;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("content", ref content);
        }
    }
    [System.SerializableAttribute()]
    public partial class SaveManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string id;
        public ReferenceSuperset[] references;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            s.SerializeArray("references", ref references);
        }
    }
    [System.SerializableAttribute()]
    public partial class RepeatManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string uid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("uid", ref uid);
        }
    }
    public enum ContentVisibility
    {
        Public,
        Private,
    }
    public class ContentVisibilityExtensions
    {
        public static string ToEnumString(ContentVisibility val)
        {
            if ((ContentVisibility.Public == val))
            {
                return "public";
            }
            if ((ContentVisibility.Private == val))
            {
                return "private";
            }
            throw new System.ArgumentException("Unknown enum value");
        }
        public static ContentVisibility FromEnumString(string str)
        {
            if (("public" == str))
            {
                return ContentVisibility.Public;
            }
            if (("private" == str))
            {
                return ContentVisibility.Private;
            }
            throw new System.ArgumentException("Unknown string value");
        }
    }
    [System.SerializableAttribute()]
    public partial class ContentBasicManifest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool archived = new OptionalBool();
        public string checksum;
        public long created;
        public string id;
        public IOneOf_ContentOrTextOrBinary[] references;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("archived") 
                        || ((archived != default(OptionalBool)) 
                        && archived.HasValue)))
            {
                s.Serialize("archived", ref archived.Value);
                archived.HasValue = true;
            }
            s.Serialize("checksum", ref checksum);
            s.Serialize("created", ref created);
            s.Serialize("id", ref id);
            s.SerializeArray("references", ref references);
        }
    }
    public partial interface IOneOf_ContentOrTextOrBinary : Beamable.Serialization.JsonSerializable.ISerializable
    {
    }
    [System.SerializableAttribute()]
    public class OptionalIOneOf_ContentOrTextOrBinary : Beamable.Common.Content.Optional<IOneOf_ContentOrTextOrBinary>
    {
        public OptionalIOneOf_ContentOrTextOrBinary()
        {
        }
        public OptionalIOneOf_ContentOrTextOrBinary(IOneOf_ContentOrTextOrBinary value)
        {
            HasValue = true;
            Value = value;
        }
    }
    public class IOneOf_ContentOrTextOrBinaryFactory : Beamable.Serialization.JsonSerializable.TypeLookupFactory<IOneOf_ContentOrTextOrBinary>
    {
        public IOneOf_ContentOrTextOrBinaryFactory()
        {
            this.Add<ContentReference>("content");
            this.Add<TextReference>("text");
            this.Add<BinaryReference>("binary");
        }
    }
    [System.SerializableAttribute()]
    public partial class LocalizationQuery : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string id;
        public OptionalArrayOfString languages = new OptionalArrayOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            if ((s.HasKey("languages") 
                        || ((languages != default(OptionalArrayOfString)) 
                        && languages.HasValue)))
            {
                s.SerializeArray("languages", ref languages.Value);
                languages.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class EmptyResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetLocalizationsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MapOfArrayOfLocalizedValue localizations = new MapOfArrayOfLocalizedValue();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeDictionary<MapOfArrayOfLocalizedValue, LocalizedValue[]>("localizations", ref localizations);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetContentRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string contentId;
        public string version;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("contentId", ref contentId);
            s.Serialize("version", ref version);
        }
    }
    [System.SerializableAttribute()]
    public partial class ClientManifestCsvResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ClientContentInfo[] itemsCsv;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("itemsCsv", ref itemsCsv);
        }
    }
    [System.SerializableAttribute()]
    public partial class LocalizedValue : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string language;
        public string value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("language", ref language);
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class ContentBasicManifestChecksums : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ContentBasicManifestChecksum[] manifests;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("manifests", ref manifests);
        }
    }
    [System.SerializableAttribute()]
    public partial class SaveTextResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public TextReference[] text;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("text", ref text);
        }
    }
    [System.SerializableAttribute()]
    public partial class ManifestSummary : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ContentBasicManifestChecksum manifest = new ContentBasicManifestChecksum();
        public string uid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("manifest", ref manifest);
            s.Serialize("uid", ref uid);
        }
    }
    [System.SerializableAttribute()]
    public partial class DeleteLocalizationRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public LocalizationQuery[] localizations;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("localizations", ref localizations);
        }
    }
    [System.SerializableAttribute()]
    public partial class ClientContentInfo : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string contentId;
        public string[] tags;
        public ContentType type = new ContentType();
        public string uri;
        public string version;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("contentId", ref contentId);
            s.SerializeArray("tags", ref tags);
            s.SerializeEnum("type", ref type, ContentTypeExtensions.ToEnumString, ContentTypeExtensions.FromEnumString);
            s.Serialize("uri", ref uri);
            s.Serialize("version", ref version);
        }
    }
    public enum ContentType
    {
        Content,
        Text,
        Binary,
    }
    public class ContentTypeExtensions
    {
        public static string ToEnumString(ContentType val)
        {
            if ((ContentType.Content == val))
            {
                return "content";
            }
            if ((ContentType.Text == val))
            {
                return "text";
            }
            if ((ContentType.Binary == val))
            {
                return "binary";
            }
            throw new System.ArgumentException("Unknown enum value");
        }
        public static ContentType FromEnumString(string str)
        {
            if (("content" == str))
            {
                return ContentType.Content;
            }
            if (("text" == str))
            {
                return ContentType.Text;
            }
            if (("binary" == str))
            {
                return ContentType.Binary;
            }
            throw new System.ArgumentException("Unknown string value");
        }
    }
    [System.SerializableAttribute()]
    public partial class GetManifestHistoryResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ManifestSummary[] manifests;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("manifests", ref manifests);
        }
    }
    [System.SerializableAttribute()]
    public partial class SaveContentResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ContentReference[] content;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("content", ref content);
        }
    }
    [System.SerializableAttribute()]
    public partial class ContentReference : Beamable.Serialization.JsonSerializable.ISerializable, IOneOf_ContentOrTextOrBinary
    {
        public OptionalString checksum = new OptionalString();
        public OptionalLong created = new OptionalLong();
        public string id;
        public OptionalLong lastChanged = new OptionalLong();
        public string tag;
        public string[] tags;
        public ContentReference_type type;
        public string uri;
        public string version;
        public ContentVisibility visibility = new ContentVisibility();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("checksum") 
                        || ((checksum != default(OptionalString)) 
                        && checksum.HasValue)))
            {
                s.Serialize("checksum", ref checksum.Value);
                checksum.HasValue = true;
            }
            if ((s.HasKey("created") 
                        || ((created != default(OptionalLong)) 
                        && created.HasValue)))
            {
                s.Serialize("created", ref created.Value);
                created.HasValue = true;
            }
            s.Serialize("id", ref id);
            if ((s.HasKey("lastChanged") 
                        || ((lastChanged != default(OptionalLong)) 
                        && lastChanged.HasValue)))
            {
                s.Serialize("lastChanged", ref lastChanged.Value);
                lastChanged.HasValue = true;
            }
            s.Serialize("tag", ref tag);
            s.SerializeArray("tags", ref tags);
            s.SerializeEnum("type", ref type, ContentReference_typeExtensions.ToEnumString, ContentReference_typeExtensions.FromEnumString);
            s.Serialize("uri", ref uri);
            s.Serialize("version", ref version);
            s.SerializeEnum("visibility", ref visibility, ContentVisibilityExtensions.ToEnumString, ContentVisibilityExtensions.FromEnumString);
        }
        public enum ContentReference_type
        {
            Content,
        }
        public class ContentReference_typeExtensions
        {
            public static string ToEnumString(ContentReference_type val)
            {
                if ((ContentReference_type.Content == val))
                {
                    return "content";
                }
                throw new System.ArgumentException("Unknown enum value");
            }
            public static ContentReference_type FromEnumString(string str)
            {
                if (("content" == str))
                {
                    return ContentReference_type.Content;
                }
                throw new System.ArgumentException("Unknown string value");
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class PullBeamoManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string sourceRealmPid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("sourceRealmPid", ref sourceRealmPid);
        }
    }
    [System.SerializableAttribute()]
    public partial class BeamoBasicGetManifestsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ManifestView[] manifests;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("manifests", ref manifests);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetLogsUrlRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong endTime = new OptionalLong();
        public OptionalString filter = new OptionalString();
        public OptionalInt limit = new OptionalInt();
        public OptionalString nextToken = new OptionalString();
        public string serviceName;
        public OptionalLong startTime = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("endTime") 
                        || ((endTime != default(OptionalLong)) 
                        && endTime.HasValue)))
            {
                s.Serialize("endTime", ref endTime.Value);
                endTime.HasValue = true;
            }
            if ((s.HasKey("filter") 
                        || ((filter != default(OptionalString)) 
                        && filter.HasValue)))
            {
                s.Serialize("filter", ref filter.Value);
                filter.HasValue = true;
            }
            if ((s.HasKey("limit") 
                        || ((limit != default(OptionalInt)) 
                        && limit.HasValue)))
            {
                s.Serialize("limit", ref limit.Value);
                limit.HasValue = true;
            }
            if ((s.HasKey("nextToken") 
                        || ((nextToken != default(OptionalString)) 
                        && nextToken.HasValue)))
            {
                s.Serialize("nextToken", ref nextToken.Value);
                nextToken.HasValue = true;
            }
            s.Serialize("serviceName", ref serviceName);
            if ((s.HasKey("startTime") 
                        || ((startTime != default(OptionalLong)) 
                        && startTime.HasValue)))
            {
                s.Serialize("startTime", ref startTime.Value);
                startTime.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GetLogsUrlHeader : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string key;
        public string value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("key", ref key);
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class UploadURL : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string key;
        public string url;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("key", ref key);
            s.Serialize("url", ref url);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetManifestsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool archived = new OptionalBool();
        public OptionalInt limit = new OptionalInt();
        public OptionalInt offset = new OptionalInt();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("archived") 
                        || ((archived != default(OptionalBool)) 
                        && archived.HasValue)))
            {
                s.Serialize("archived", ref archived.Value);
                archived.HasValue = true;
            }
            if ((s.HasKey("limit") 
                        || ((limit != default(OptionalInt)) 
                        && limit.HasValue)))
            {
                s.Serialize("limit", ref limit.Value);
                limit.HasValue = true;
            }
            if ((s.HasKey("offset") 
                        || ((offset != default(OptionalInt)) 
                        && offset.HasValue)))
            {
                s.Serialize("offset", ref offset.Value);
                offset.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GetCurrentManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool archived = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("archived") 
                        || ((archived != default(OptionalBool)) 
                        && archived.HasValue)))
            {
                s.Serialize("archived", ref archived.Value);
                archived.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class DatabasePerformanceRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString endDate = new OptionalString();
        public string granularity;
        public OptionalString period = new OptionalString();
        public OptionalString startDate = new OptionalString();
        public string storageObjectName;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("endDate") 
                        || ((endDate != default(OptionalString)) 
                        && endDate.HasValue)))
            {
                s.Serialize("endDate", ref endDate.Value);
                endDate.HasValue = true;
            }
            s.Serialize("granularity", ref granularity);
            if ((s.HasKey("period") 
                        || ((period != default(OptionalString)) 
                        && period.HasValue)))
            {
                s.Serialize("period", ref period.Value);
                period.HasValue = true;
            }
            if ((s.HasKey("startDate") 
                        || ((startDate != default(OptionalString)) 
                        && startDate.HasValue)))
            {
                s.Serialize("startDate", ref startDate.Value);
                startDate.HasValue = true;
            }
            s.Serialize("storageObjectName", ref storageObjectName);
        }
    }
    [System.SerializableAttribute()]
    public partial class ServiceImageLayers : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] layers;
        public BeamoBasicReference service = new BeamoBasicReference();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("layers", ref layers);
            s.Serialize("service", ref service);
        }
    }
    [System.SerializableAttribute()]
    public partial class PostManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool autoDeploy = new OptionalBool();
        public OptionalString comments = new OptionalString();
        public ServiceReference[] manifest;
        public OptionalArrayOfServiceStorageReference storageReferences = new OptionalArrayOfServiceStorageReference();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("autoDeploy") 
                        || ((autoDeploy != default(OptionalBool)) 
                        && autoDeploy.HasValue)))
            {
                s.Serialize("autoDeploy", ref autoDeploy.Value);
                autoDeploy.HasValue = true;
            }
            if ((s.HasKey("comments") 
                        || ((comments != default(OptionalString)) 
                        && comments.HasValue)))
            {
                s.Serialize("comments", ref comments.Value);
                comments.HasValue = true;
            }
            s.SerializeArray("manifest", ref manifest);
            if ((s.HasKey("storageReferences") 
                        || ((storageReferences != default(OptionalArrayOfServiceStorageReference)) 
                        && storageReferences.HasValue)))
            {
                s.SerializeArray("storageReferences", ref storageReferences.Value);
                storageReferences.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ServiceStorageStatus : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string id;
        public bool isCurrent;
        public bool isRunning;
        public string storageType;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            s.Serialize("isCurrent", ref isCurrent);
            s.Serialize("isRunning", ref isRunning);
            s.Serialize("storageType", ref storageType);
        }
    }
    [System.SerializableAttribute()]
    public partial class PASlowQuery : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string line;
        public string namespaceKey;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("line", ref line);
            s.Serialize("namespace", ref namespaceKey);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetSignedUrlResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string body;
        public GetLogsUrlHeader[] headers;
        public string method;
        public string url;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("body", ref body);
            s.SerializeArray("headers", ref headers);
            s.Serialize("method", ref method);
            s.Serialize("url", ref url);
        }
    }
    [System.SerializableAttribute()]
    public partial class PreSignedUrlsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public BeamoBasicURLResponse[] response;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("response", ref response);
        }
    }
    [System.SerializableAttribute()]
    public partial class ConnectionString : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string connectionString;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("connectionString", ref connectionString);
        }
    }
    [System.SerializableAttribute()]
    public partial class ServiceTemplate : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
        }
    }
    [System.SerializableAttribute()]
    public partial class BeamoBasicGetManifestRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool archived = new OptionalBool();
        public string id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("archived") 
                        || ((archived != default(OptionalBool)) 
                        && archived.HasValue)))
            {
                s.Serialize("archived", ref archived.Value);
                archived.HasValue = true;
            }
            s.Serialize("id", ref id);
        }
    }
    [System.SerializableAttribute()]
    public partial class DatabaseMeasurement : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public DataPoint[] dataPoints;
        public string name;
        public string units;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("dataPoints", ref dataPoints);
            s.Serialize("name", ref name);
            s.Serialize("units", ref units);
        }
    }
    [System.SerializableAttribute()]
    public partial class Query : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string queryId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("queryId", ref queryId);
        }
    }
    [System.SerializableAttribute()]
    public partial class BeamoBasicURLResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public UploadURL[] s3URLs;
        public string serviceName;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("s3URLs", ref s3URLs);
            s.Serialize("serviceName", ref serviceName);
        }
    }
    [System.SerializableAttribute()]
    public partial class ManifestView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string checksum;
        public OptionalString comments = new OptionalString();
        public long created;
        public OptionalLong createdByAccountId = new OptionalLong();
        public string id;
        public ServiceReference[] manifest;
        public OptionalArrayOfServiceStorageReference storageReference = new OptionalArrayOfServiceStorageReference();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("checksum", ref checksum);
            if ((s.HasKey("comments") 
                        || ((comments != default(OptionalString)) 
                        && comments.HasValue)))
            {
                s.Serialize("comments", ref comments.Value);
                comments.HasValue = true;
            }
            s.Serialize("created", ref created);
            if ((s.HasKey("createdByAccountId") 
                        || ((createdByAccountId != default(OptionalLong)) 
                        && createdByAccountId.HasValue)))
            {
                s.Serialize("createdByAccountId", ref createdByAccountId.Value);
                createdByAccountId.HasValue = true;
            }
            s.Serialize("id", ref id);
            s.SerializeArray("manifest", ref manifest);
            if ((s.HasKey("storageReference") 
                        || ((storageReference != default(OptionalArrayOfServiceStorageReference)) 
                        && storageReference.HasValue)))
            {
                s.SerializeArray("storageReference", ref storageReference.Value);
                storageReference.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GetLogsInsightUrlRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong endTime = new OptionalLong();
        public OptionalString filter = new OptionalString();
        public OptionalInt limit = new OptionalInt();
        public OptionalString order = new OptionalString();
        public string serviceName;
        public OptionalLong startTime = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("endTime") 
                        || ((endTime != default(OptionalLong)) 
                        && endTime.HasValue)))
            {
                s.Serialize("endTime", ref endTime.Value);
                endTime.HasValue = true;
            }
            if ((s.HasKey("filter") 
                        || ((filter != default(OptionalString)) 
                        && filter.HasValue)))
            {
                s.Serialize("filter", ref filter.Value);
                filter.HasValue = true;
            }
            if ((s.HasKey("limit") 
                        || ((limit != default(OptionalInt)) 
                        && limit.HasValue)))
            {
                s.Serialize("limit", ref limit.Value);
                limit.HasValue = true;
            }
            if ((s.HasKey("order") 
                        || ((order != default(OptionalString)) 
                        && order.HasValue)))
            {
                s.Serialize("order", ref order.Value);
                order.HasValue = true;
            }
            s.Serialize("serviceName", ref serviceName);
            if ((s.HasKey("startTime") 
                        || ((startTime != default(OptionalLong)) 
                        && startTime.HasValue)))
            {
                s.Serialize("startTime", ref startTime.Value);
                startTime.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ServiceDependencyReference : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string id;
        public string storageType;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            s.Serialize("storageType", ref storageType);
        }
    }
    [System.SerializableAttribute()]
    public partial class BeamoBasicManifestChecksum : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string checksum;
        public long createdAt;
        public string id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("checksum", ref checksum);
            s.Serialize("createdAt", ref createdAt);
            s.Serialize("id", ref id);
        }
    }
    [System.SerializableAttribute()]
    public partial class DataPoint : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string timestamp;
        public string value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("timestamp", ref timestamp);
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class MicroserviceSecretResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string secret;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("secret", ref secret);
        }
    }
    [System.SerializableAttribute()]
    public partial class BeamoBasicReference : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool archived;
        public bool arm;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("archived", ref archived);
            s.Serialize("arm", ref arm);
        }
    }
    [System.SerializableAttribute()]
    public partial class ServiceStatus : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string imageId;
        public bool isCurrent;
        public bool running;
        public OptionalArrayOfServiceDependencyReference serviceDependencyReferences = new OptionalArrayOfServiceDependencyReference();
        public string serviceName;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("imageId", ref imageId);
            s.Serialize("isCurrent", ref isCurrent);
            s.Serialize("running", ref running);
            if ((s.HasKey("serviceDependencyReferences") 
                        || ((serviceDependencyReferences != default(OptionalArrayOfServiceDependencyReference)) 
                        && serviceDependencyReferences.HasValue)))
            {
                s.SerializeArray("serviceDependencyReferences", ref serviceDependencyReferences.Value);
                serviceDependencyReferences.HasValue = true;
            }
            s.Serialize("serviceName", ref serviceName);
        }
    }
    [System.SerializableAttribute()]
    public partial class PASuggestedIndex : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string id;
        public string[] impact;
        public string[] index;
        public string namespaceKey;
        public string weight;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            s.SerializeArray("impact", ref impact);
            s.SerializeArray("index", ref index);
            s.Serialize("namespace", ref namespaceKey);
            s.Serialize("weight", ref weight);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetLambdaURI : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string uri;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("uri", ref uri);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetManifestResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ManifestView manifest = new ManifestView();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("manifest", ref manifest);
        }
    }
    [System.SerializableAttribute()]
    public partial class DatabaseMeasurements : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string databaseName;
        public OptionalString end = new OptionalString();
        public OptionalString granularity = new OptionalString();
        public OptionalString groupId = new OptionalString();
        public OptionalString hostId = new OptionalString();
        public Link[] links;
        public OptionalArrayOfDatabaseMeasurement measurements = new OptionalArrayOfDatabaseMeasurement();
        public OptionalString processId = new OptionalString();
        public OptionalString start = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("databaseName", ref databaseName);
            if ((s.HasKey("end") 
                        || ((end != default(OptionalString)) 
                        && end.HasValue)))
            {
                s.Serialize("end", ref end.Value);
                end.HasValue = true;
            }
            if ((s.HasKey("granularity") 
                        || ((granularity != default(OptionalString)) 
                        && granularity.HasValue)))
            {
                s.Serialize("granularity", ref granularity.Value);
                granularity.HasValue = true;
            }
            if ((s.HasKey("groupId") 
                        || ((groupId != default(OptionalString)) 
                        && groupId.HasValue)))
            {
                s.Serialize("groupId", ref groupId.Value);
                groupId.HasValue = true;
            }
            if ((s.HasKey("hostId") 
                        || ((hostId != default(OptionalString)) 
                        && hostId.HasValue)))
            {
                s.Serialize("hostId", ref hostId.Value);
                hostId.HasValue = true;
            }
            s.SerializeArray("links", ref links);
            if ((s.HasKey("measurements") 
                        || ((measurements != default(OptionalArrayOfDatabaseMeasurement)) 
                        && measurements.HasValue)))
            {
                s.SerializeArray("measurements", ref measurements.Value);
                measurements.HasValue = true;
            }
            if ((s.HasKey("processId") 
                        || ((processId != default(OptionalString)) 
                        && processId.HasValue)))
            {
                s.Serialize("processId", ref processId.Value);
                processId.HasValue = true;
            }
            if ((s.HasKey("start") 
                        || ((start != default(OptionalString)) 
                        && start.HasValue)))
            {
                s.Serialize("start", ref start.Value);
                start.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ServiceReference : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool archived;
        public bool arm;
        public string checksum;
        public OptionalString comments = new OptionalString();
        public OptionalArrayOfServiceComponent components = new OptionalArrayOfServiceComponent();
        public OptionalLong containerHealthCheckPort = new OptionalLong();
        public OptionalArrayOfServiceDependencyReference dependencies = new OptionalArrayOfServiceDependencyReference();
        public bool enabled;
        public OptionalString imageCpuArch = new OptionalString();
        public string imageId;
        public string serviceName;
        public string templateId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("archived", ref archived);
            s.Serialize("arm", ref arm);
            s.Serialize("checksum", ref checksum);
            if ((s.HasKey("comments") 
                        || ((comments != default(OptionalString)) 
                        && comments.HasValue)))
            {
                s.Serialize("comments", ref comments.Value);
                comments.HasValue = true;
            }
            if ((s.HasKey("components") 
                        || ((components != default(OptionalArrayOfServiceComponent)) 
                        && components.HasValue)))
            {
                s.SerializeArray("components", ref components.Value);
                components.HasValue = true;
            }
            if ((s.HasKey("containerHealthCheckPort") 
                        || ((containerHealthCheckPort != default(OptionalLong)) 
                        && containerHealthCheckPort.HasValue)))
            {
                s.Serialize("containerHealthCheckPort", ref containerHealthCheckPort.Value);
                containerHealthCheckPort.HasValue = true;
            }
            if ((s.HasKey("dependencies") 
                        || ((dependencies != default(OptionalArrayOfServiceDependencyReference)) 
                        && dependencies.HasValue)))
            {
                s.SerializeArray("dependencies", ref dependencies.Value);
                dependencies.HasValue = true;
            }
            s.Serialize("enabled", ref enabled);
            if ((s.HasKey("imageCpuArch") 
                        || ((imageCpuArch != default(OptionalString)) 
                        && imageCpuArch.HasValue)))
            {
                s.Serialize("imageCpuArch", ref imageCpuArch.Value);
                imageCpuArch.HasValue = true;
            }
            s.Serialize("imageId", ref imageId);
            s.Serialize("serviceName", ref serviceName);
            s.Serialize("templateId", ref templateId);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetStatusResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool isCurrent;
        public ServiceStatus[] services;
        public OptionalArrayOfServiceStorageStatus storageStatuses = new OptionalArrayOfServiceStorageStatus();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("isCurrent", ref isCurrent);
            s.SerializeArray("services", ref services);
            if ((s.HasKey("storageStatuses") 
                        || ((storageStatuses != default(OptionalArrayOfServiceStorageStatus)) 
                        && storageStatuses.HasValue)))
            {
                s.SerializeArray("storageStatuses", ref storageStatuses.Value);
                storageStatuses.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ServiceComponent : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
        }
    }
    [System.SerializableAttribute()]
    public partial class PerformanceResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public DatabaseMeasurements databaseMeasurements = new DatabaseMeasurements();
        public PASuggestedIndex[] indexes;
        public PANamespace[] namespaces;
        public PASlowQuery[] queries;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("databaseMeasurements", ref databaseMeasurements);
            s.SerializeArray("indexes", ref indexes);
            s.SerializeArray("namespaces", ref namespaces);
            s.SerializeArray("queries", ref queries);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetTemplatesResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ServiceTemplate[] templates;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("templates", ref templates);
        }
    }
    [System.SerializableAttribute()]
    public partial class ServiceStorageReference : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool archived;
        public string checksum;
        public bool enabled;
        public string id;
        public string storageType;
        public OptionalString templateId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("archived", ref archived);
            s.Serialize("checksum", ref checksum);
            s.Serialize("enabled", ref enabled);
            s.Serialize("id", ref id);
            s.Serialize("storageType", ref storageType);
            if ((s.HasKey("templateId") 
                        || ((templateId != default(OptionalString)) 
                        && templateId.HasValue)))
            {
                s.Serialize("templateId", ref templateId.Value);
                templateId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class BeamoBasicManifestChecksums : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public BeamoBasicManifestChecksum[] manifests;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("manifests", ref manifests);
        }
    }
    [System.SerializableAttribute()]
    public partial class LambdaResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString body = new OptionalString();
        public int statusCode;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("body") 
                        || ((body != default(OptionalString)) 
                        && body.HasValue)))
            {
                s.Serialize("body", ref body.Value);
                body.HasValue = true;
            }
            s.Serialize("statusCode", ref statusCode);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetCurrentManifestResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ManifestView manifest = new ManifestView();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("manifest", ref manifest);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetServiceURLsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ServiceImageLayers[] requests;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("requests", ref requests);
        }
    }
    [System.SerializableAttribute()]
    public partial class PostManifestResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBeamoBasicManifestChecksum manifest = new OptionalBeamoBasicManifestChecksum();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("manifest") 
                        || ((manifest != default(OptionalBeamoBasicManifestChecksum)) 
                        && manifest.HasValue)))
            {
                s.Serialize("manifest", ref manifest.Value);
                manifest.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GetMetricsUrlRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong endTime = new OptionalLong();
        public string metricName;
        public OptionalInt period = new OptionalInt();
        public string serviceName;
        public OptionalLong startTime = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("endTime") 
                        || ((endTime != default(OptionalLong)) 
                        && endTime.HasValue)))
            {
                s.Serialize("endTime", ref endTime.Value);
                endTime.HasValue = true;
            }
            s.Serialize("metricName", ref metricName);
            if ((s.HasKey("period") 
                        || ((period != default(OptionalInt)) 
                        && period.HasValue)))
            {
                s.Serialize("period", ref period.Value);
                period.HasValue = true;
            }
            s.Serialize("serviceName", ref serviceName);
            if ((s.HasKey("startTime") 
                        || ((startTime != default(OptionalLong)) 
                        && startTime.HasValue)))
            {
                s.Serialize("startTime", ref startTime.Value);
                startTime.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class CommitImageRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public BeamoBasicReference service = new BeamoBasicReference();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("service", ref service);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetElasticContainerRegistryURI : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string uri;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("uri", ref uri);
        }
    }
    [System.SerializableAttribute()]
    public partial class PANamespace : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string namespaceKey;
        public string type;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("namespace", ref namespaceKey);
            s.Serialize("type", ref type);
        }
    }
    [System.SerializableAttribute()]
    public partial class Link : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string href;
        public string rel;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("href", ref href);
            s.Serialize("rel", ref rel);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventInventoryRewardItem : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string id;
        public OptionalMapOfString properties = new OptionalMapOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            if ((s.HasKey("properties") 
                        || ((properties != default(OptionalMapOfString)) 
                        && properties.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("properties", ref properties.Value);
                properties.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ItemCreateRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string contentId;
        public ItemProperty[] properties;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("contentId", ref contentId);
            s.SerializeArray("properties", ref properties);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventClaimResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string gameRspJson;
        public EventPlayerStateView view = new EventPlayerStateView();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("gameRspJson", ref gameRspJson);
            s.Serialize("view", ref view);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventPlayerView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public EventPlayerStateView[] done;
        public EventPlayerStateView[] running;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("done", ref done);
            s.SerializeArray("running", ref running);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventRewardState : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool claimed;
        public OptionalArrayOfEventInventoryRewardCurrency currencies = new OptionalArrayOfEventInventoryRewardCurrency();
        public bool earned;
        public OptionalArrayOfEventInventoryRewardItem items = new OptionalArrayOfEventInventoryRewardItem();
        public OptionalDouble max = new OptionalDouble();
        public double min;
        public OptionalArrayOfEventRewardObtain obtain = new OptionalArrayOfEventRewardObtain();
        public OptionalMapOfString pendingCurrencyRewards = new OptionalMapOfString();
        public OptionalMapOfString pendingEntitlementRewards = new OptionalMapOfString();
        public EventInventoryPendingRewards pendingInventoryRewards = new EventInventoryPendingRewards();
        public OptionalArrayOfItemCreateRequest pendingItemRewards = new OptionalArrayOfItemCreateRequest();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("claimed", ref claimed);
            if ((s.HasKey("currencies") 
                        || ((currencies != default(OptionalArrayOfEventInventoryRewardCurrency)) 
                        && currencies.HasValue)))
            {
                s.SerializeArray("currencies", ref currencies.Value);
                currencies.HasValue = true;
            }
            s.Serialize("earned", ref earned);
            if ((s.HasKey("items") 
                        || ((items != default(OptionalArrayOfEventInventoryRewardItem)) 
                        && items.HasValue)))
            {
                s.SerializeArray("items", ref items.Value);
                items.HasValue = true;
            }
            if ((s.HasKey("max") 
                        || ((max != default(OptionalDouble)) 
                        && max.HasValue)))
            {
                s.Serialize("max", ref max.Value);
                max.HasValue = true;
            }
            s.Serialize("min", ref min);
            if ((s.HasKey("obtain") 
                        || ((obtain != default(OptionalArrayOfEventRewardObtain)) 
                        && obtain.HasValue)))
            {
                s.SerializeArray("obtain", ref obtain.Value);
                obtain.HasValue = true;
            }
            if ((s.HasKey("pendingCurrencyRewards") 
                        || ((pendingCurrencyRewards != default(OptionalMapOfString)) 
                        && pendingCurrencyRewards.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("pendingCurrencyRewards", ref pendingCurrencyRewards.Value);
                pendingCurrencyRewards.HasValue = true;
            }
            if ((s.HasKey("pendingEntitlementRewards") 
                        || ((pendingEntitlementRewards != default(OptionalMapOfString)) 
                        && pendingEntitlementRewards.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("pendingEntitlementRewards", ref pendingEntitlementRewards.Value);
                pendingEntitlementRewards.HasValue = true;
            }
            s.Serialize("pendingInventoryRewards", ref pendingInventoryRewards);
            if ((s.HasKey("pendingItemRewards") 
                        || ((pendingItemRewards != default(OptionalArrayOfItemCreateRequest)) 
                        && pendingItemRewards.HasValue)))
            {
                s.SerializeArray("pendingItemRewards", ref pendingItemRewards.Value);
                pendingItemRewards.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class EventScoreRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string eventId;
        public OptionalBool increment = new OptionalBool();
        public double score;
        public OptionalMapOfString stats = new OptionalMapOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("eventId", ref eventId);
            if ((s.HasKey("increment") 
                        || ((increment != default(OptionalBool)) 
                        && increment.HasValue)))
            {
                s.Serialize("increment", ref increment.Value);
                increment.HasValue = true;
            }
            s.Serialize("score", ref score);
            if ((s.HasKey("stats") 
                        || ((stats != default(OptionalMapOfString)) 
                        && stats.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("stats", ref stats.Value);
                stats.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class EventRewardObtain : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public int count;
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("count", ref count);
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventClaimRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string eventId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("eventId", ref eventId);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventInventoryRewardCurrency : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long amount;
        public string id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("amount", ref amount);
            s.Serialize("id", ref id);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventInventoryPendingRewards : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalMapOfString currencies = new OptionalMapOfString();
        public bool empty;
        public OptionalArrayOfItemCreateRequest items = new OptionalArrayOfItemCreateRequest();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("currencies") 
                        || ((currencies != default(OptionalMapOfString)) 
                        && currencies.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("currencies", ref currencies.Value);
                currencies.HasValue = true;
            }
            s.Serialize("empty", ref empty);
            if ((s.HasKey("items") 
                        || ((items != default(OptionalArrayOfItemCreateRequest)) 
                        && items.HasValue)))
            {
                s.SerializeArray("items", ref items.Value);
                items.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class EventPlayerStateView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public EventPlayerPhaseView[] allPhases;
        public OptionalEventPlayerPhaseView currentPhase = new OptionalEventPlayerPhaseView();
        public OptionalEventPlayerGroupState groupRewards = new OptionalEventPlayerGroupState();
        public string id;
        public string leaderboardId;
        public string name;
        public long rank;
        public EventRewardState[] rankRewards;
        public bool running;
        public double score;
        public EventRewardState[] scoreRewards;
        public long secondsRemaining;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("allPhases", ref allPhases);
            if ((s.HasKey("currentPhase") 
                        || ((currentPhase != default(OptionalEventPlayerPhaseView)) 
                        && currentPhase.HasValue)))
            {
                s.Serialize("currentPhase", ref currentPhase.Value);
                currentPhase.HasValue = true;
            }
            if ((s.HasKey("groupRewards") 
                        || ((groupRewards != default(OptionalEventPlayerGroupState)) 
                        && groupRewards.HasValue)))
            {
                s.Serialize("groupRewards", ref groupRewards.Value);
                groupRewards.HasValue = true;
            }
            s.Serialize("id", ref id);
            s.Serialize("leaderboardId", ref leaderboardId);
            s.Serialize("name", ref name);
            s.Serialize("rank", ref rank);
            s.SerializeArray("rankRewards", ref rankRewards);
            s.Serialize("running", ref running);
            s.Serialize("score", ref score);
            s.SerializeArray("scoreRewards", ref scoreRewards);
            s.Serialize("secondsRemaining", ref secondsRemaining);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventPlayerPhaseView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long durationSeconds;
        public string name;
        public EventRule[] rules;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("durationSeconds", ref durationSeconds);
            s.Serialize("name", ref name);
            s.SerializeArray("rules", ref rules);
        }
    }
    [System.SerializableAttribute()]
    public partial class ItemProperty : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public string value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventRule : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string rule;
        public string value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("rule", ref rule);
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventPlayerGroupState : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString groupId = new OptionalString();
        public long groupRank;
        public double groupScore;
        public EventRewardState[] rankRewards;
        public EventRewardState[] scoreRewards;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("groupId") 
                        || ((groupId != default(OptionalString)) 
                        && groupId.HasValue)))
            {
                s.Serialize("groupId", ref groupId.Value);
                groupId.HasValue = true;
            }
            s.Serialize("groupRank", ref groupRank);
            s.Serialize("groupScore", ref groupScore);
            s.SerializeArray("rankRewards", ref rankRewards);
            s.SerializeArray("scoreRewards", ref scoreRewards);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardCohort : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString description = new OptionalString();
        public string id;
        public PlayerStatRequirement[] statRequirements;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("description") 
                        || ((description != default(OptionalString)) 
                        && description.HasValue)))
            {
                s.Serialize("description", ref description.Value);
                description.HasValue = true;
            }
            s.Serialize("id", ref id);
            s.SerializeArray("statRequirements", ref statRequirements);
        }
    }
    [System.SerializableAttribute()]
    public partial class InFlightMessage : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string body;
        public OptionalLong gamerTag = new OptionalLong();
        public string id;
        public OptionalBool limitFailureRetries = new OptionalBool();
        public string method;
        public string path;
        public string service;
        public OptionalString shard = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("body", ref body);
            if ((s.HasKey("gamerTag") 
                        || ((gamerTag != default(OptionalLong)) 
                        && gamerTag.HasValue)))
            {
                s.Serialize("gamerTag", ref gamerTag.Value);
                gamerTag.HasValue = true;
            }
            s.Serialize("id", ref id);
            if ((s.HasKey("limitFailureRetries") 
                        || ((limitFailureRetries != default(OptionalBool)) 
                        && limitFailureRetries.HasValue)))
            {
                s.Serialize("limitFailureRetries", ref limitFailureRetries.Value);
                limitFailureRetries.HasValue = true;
            }
            s.Serialize("method", ref method);
            s.Serialize("path", ref path);
            s.Serialize("service", ref service);
            if ((s.HasKey("shard") 
                        || ((shard != default(OptionalString)) 
                        && shard.HasValue)))
            {
                s.Serialize("shard", ref shard.Value);
                shard.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardCohortSettings : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public LeaderboardCohort[] cohorts;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("cohorts", ref cohorts);
        }
    }
    [System.SerializableAttribute()]
    public partial class Event : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLeaderboardCohortSettings cohortSettings = new OptionalLeaderboardCohortSettings();
        public OptionalEventGroupRewards group_rewards = new OptionalEventGroupRewards();
        public string name;
        public OptionalInt partition_size = new OptionalInt();
        public OptionalClientPermission permissions = new OptionalClientPermission();
        public EventPhase[] phases;
        public OptionalArrayOfEventRewardContent rank_rewards = new OptionalArrayOfEventRewardContent();
        public OptionalSchedule schedule = new OptionalSchedule();
        public OptionalArrayOfEventRewardContent score_rewards = new OptionalArrayOfEventRewardContent();
        public string start_date;
        public OptionalArrayOfString stores = new OptionalArrayOfString();
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("cohortSettings") 
                        || ((cohortSettings != default(OptionalLeaderboardCohortSettings)) 
                        && cohortSettings.HasValue)))
            {
                s.Serialize("cohortSettings", ref cohortSettings.Value);
                cohortSettings.HasValue = true;
            }
            if ((s.HasKey("group_rewards") 
                        || ((group_rewards != default(OptionalEventGroupRewards)) 
                        && group_rewards.HasValue)))
            {
                s.Serialize("group_rewards", ref group_rewards.Value);
                group_rewards.HasValue = true;
            }
            s.Serialize("name", ref name);
            if ((s.HasKey("partition_size") 
                        || ((partition_size != default(OptionalInt)) 
                        && partition_size.HasValue)))
            {
                s.Serialize("partition_size", ref partition_size.Value);
                partition_size.HasValue = true;
            }
            if ((s.HasKey("permissions") 
                        || ((permissions != default(OptionalClientPermission)) 
                        && permissions.HasValue)))
            {
                s.Serialize("permissions", ref permissions.Value);
                permissions.HasValue = true;
            }
            s.SerializeArray("phases", ref phases);
            if ((s.HasKey("rank_rewards") 
                        || ((rank_rewards != default(OptionalArrayOfEventRewardContent)) 
                        && rank_rewards.HasValue)))
            {
                s.SerializeArray("rank_rewards", ref rank_rewards.Value);
                rank_rewards.HasValue = true;
            }
            if ((s.HasKey("schedule") 
                        || ((schedule != default(OptionalSchedule)) 
                        && schedule.HasValue)))
            {
                s.Serialize("schedule", ref schedule.Value);
                schedule.HasValue = true;
            }
            if ((s.HasKey("score_rewards") 
                        || ((score_rewards != default(OptionalArrayOfEventRewardContent)) 
                        && score_rewards.HasValue)))
            {
                s.SerializeArray("score_rewards", ref score_rewards.Value);
                score_rewards.HasValue = true;
            }
            s.Serialize("start_date", ref start_date);
            if ((s.HasKey("stores") 
                        || ((stores != default(OptionalArrayOfString)) 
                        && stores.HasValue)))
            {
                s.SerializeArray("stores", ref stores.Value);
                stores.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventPhaseTime : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong endTime = new OptionalLong();
        public string name;
        public OptionalLong startTime = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("endTime") 
                        || ((endTime != default(OptionalLong)) 
                        && endTime.HasValue)))
            {
                s.Serialize("endTime", ref endTime.Value);
                endTime.HasValue = true;
            }
            s.Serialize("name", ref name);
            if ((s.HasKey("startTime") 
                        || ((startTime != default(OptionalLong)) 
                        && startTime.HasValue)))
            {
                s.Serialize("startTime", ref startTime.Value);
                startTime.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class EventQueryResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public EventObjectData[] events;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("events", ref events);
        }
    }
    [System.SerializableAttribute()]
    public partial class PlayerStatRequirement : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString access = new OptionalString();
        public string constraint;
        public OptionalString domain = new OptionalString();
        public string stat;
        public string value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("access") 
                        || ((access != default(OptionalString)) 
                        && access.HasValue)))
            {
                s.Serialize("access", ref access.Value);
                access.HasValue = true;
            }
            s.Serialize("constraint", ref constraint);
            if ((s.HasKey("domain") 
                        || ((domain != default(OptionalString)) 
                        && domain.HasValue)))
            {
                s.Serialize("domain", ref domain.Value);
                domain.HasValue = true;
            }
            s.Serialize("stat", ref stat);
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventGroupRewards : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfEventRewardContent scoreRewards = new OptionalArrayOfEventRewardContent();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("scoreRewards") 
                        || ((scoreRewards != default(OptionalArrayOfEventRewardContent)) 
                        && scoreRewards.HasValue)))
            {
                s.SerializeArray("scoreRewards", ref scoreRewards.Value);
                scoreRewards.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class EventsWithinDateRangeRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString from = new OptionalString();
        public OptionalInt limit = new OptionalInt();
        public OptionalString query = new OptionalString();
        public OptionalString to = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("from") 
                        || ((from != default(OptionalString)) 
                        && from.HasValue)))
            {
                s.Serialize("from", ref from.Value);
                from.HasValue = true;
            }
            if ((s.HasKey("limit") 
                        || ((limit != default(OptionalInt)) 
                        && limit.HasValue)))
            {
                s.Serialize("limit", ref limit.Value);
                limit.HasValue = true;
            }
            if ((s.HasKey("query") 
                        || ((query != default(OptionalString)) 
                        && query.HasValue)))
            {
                s.Serialize("query", ref query.Value);
                query.HasValue = true;
            }
            if ((s.HasKey("to") 
                        || ((to != default(OptionalString)) 
                        && to.HasValue)))
            {
                s.Serialize("to", ref to.Value);
                to.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ClientPermission : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool write_self;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("write_self", ref write_self);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventRewardContent : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfEventInventoryRewardCurrency currencies = new OptionalArrayOfEventInventoryRewardCurrency();
        public OptionalArrayOfEventInventoryRewardItem items = new OptionalArrayOfEventInventoryRewardItem();
        public OptionalDouble max = new OptionalDouble();
        public double min;
        public OptionalArrayOfEventRewardObtain obtain = new OptionalArrayOfEventRewardObtain();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("currencies") 
                        || ((currencies != default(OptionalArrayOfEventInventoryRewardCurrency)) 
                        && currencies.HasValue)))
            {
                s.SerializeArray("currencies", ref currencies.Value);
                currencies.HasValue = true;
            }
            if ((s.HasKey("items") 
                        || ((items != default(OptionalArrayOfEventInventoryRewardItem)) 
                        && items.HasValue)))
            {
                s.SerializeArray("items", ref items.Value);
                items.HasValue = true;
            }
            if ((s.HasKey("max") 
                        || ((max != default(OptionalDouble)) 
                        && max.HasValue)))
            {
                s.Serialize("max", ref max.Value);
                max.HasValue = true;
            }
            s.Serialize("min", ref min);
            if ((s.HasKey("obtain") 
                        || ((obtain != default(OptionalArrayOfEventRewardObtain)) 
                        && obtain.HasValue)))
            {
                s.SerializeArray("obtain", ref obtain.Value);
                obtain.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class EventPhaseRuntime : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long endTime;
        public string name;
        public EventRule[] rules;
        public long startTime;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("endTime", ref endTime);
            s.Serialize("name", ref name);
            s.SerializeArray("rules", ref rules);
            s.Serialize("startTime", ref startTime);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventDateRanges : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong createdAt = new OptionalLong();
        public DateRange[] dates;
        public string id;
        public string name;
        public string state;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("createdAt") 
                        || ((createdAt != default(OptionalLong)) 
                        && createdAt.HasValue)))
            {
                s.Serialize("createdAt", ref createdAt.Value);
                createdAt.HasValue = true;
            }
            s.SerializeArray("dates", ref dates);
            s.Serialize("id", ref id);
            s.Serialize("name", ref name);
            s.Serialize("state", ref state);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventObjectData : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Event content = new Event();
        public OptionalLong createdAt = new OptionalLong();
        public bool done;
        public OptionalLong endTime = new OptionalLong();
        public string id;
        public OptionalArrayOfInFlightMessage inFlight = new OptionalArrayOfInFlightMessage();
        public OptionalString lastChildEventId = new OptionalString();
        public string leaderboardId;
        public OptionalString origin = new OptionalString();
        public OptionalString originType = new OptionalString();
        public OptionalClientPermission permissions = new OptionalClientPermission();
        public OptionalEventPhaseRuntime phase = new OptionalEventPhaseRuntime();
        public OptionalArrayOfEventPhaseTime phaseTimes = new OptionalArrayOfEventPhaseTime();
        public OptionalString rootEventId = new OptionalString();
        public bool running;
        public OptionalLong startTime = new OptionalLong();
        public EventState state = new EventState();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("content", ref content);
            if ((s.HasKey("createdAt") 
                        || ((createdAt != default(OptionalLong)) 
                        && createdAt.HasValue)))
            {
                s.Serialize("createdAt", ref createdAt.Value);
                createdAt.HasValue = true;
            }
            s.Serialize("done", ref done);
            if ((s.HasKey("endTime") 
                        || ((endTime != default(OptionalLong)) 
                        && endTime.HasValue)))
            {
                s.Serialize("endTime", ref endTime.Value);
                endTime.HasValue = true;
            }
            s.Serialize("id", ref id);
            if ((s.HasKey("inFlight") 
                        || ((inFlight != default(OptionalArrayOfInFlightMessage)) 
                        && inFlight.HasValue)))
            {
                s.SerializeArray("inFlight", ref inFlight.Value);
                inFlight.HasValue = true;
            }
            if ((s.HasKey("lastChildEventId") 
                        || ((lastChildEventId != default(OptionalString)) 
                        && lastChildEventId.HasValue)))
            {
                s.Serialize("lastChildEventId", ref lastChildEventId.Value);
                lastChildEventId.HasValue = true;
            }
            s.Serialize("leaderboardId", ref leaderboardId);
            if ((s.HasKey("origin") 
                        || ((origin != default(OptionalString)) 
                        && origin.HasValue)))
            {
                s.Serialize("origin", ref origin.Value);
                origin.HasValue = true;
            }
            if ((s.HasKey("originType") 
                        || ((originType != default(OptionalString)) 
                        && originType.HasValue)))
            {
                s.Serialize("originType", ref originType.Value);
                originType.HasValue = true;
            }
            if ((s.HasKey("permissions") 
                        || ((permissions != default(OptionalClientPermission)) 
                        && permissions.HasValue)))
            {
                s.Serialize("permissions", ref permissions.Value);
                permissions.HasValue = true;
            }
            if ((s.HasKey("phase") 
                        || ((phase != default(OptionalEventPhaseRuntime)) 
                        && phase.HasValue)))
            {
                s.Serialize("phase", ref phase.Value);
                phase.HasValue = true;
            }
            if ((s.HasKey("phaseTimes") 
                        || ((phaseTimes != default(OptionalArrayOfEventPhaseTime)) 
                        && phaseTimes.HasValue)))
            {
                s.SerializeArray("phaseTimes", ref phaseTimes.Value);
                phaseTimes.HasValue = true;
            }
            if ((s.HasKey("rootEventId") 
                        || ((rootEventId != default(OptionalString)) 
                        && rootEventId.HasValue)))
            {
                s.Serialize("rootEventId", ref rootEventId.Value);
                rootEventId.HasValue = true;
            }
            s.Serialize("running", ref running);
            if ((s.HasKey("startTime") 
                        || ((startTime != default(OptionalLong)) 
                        && startTime.HasValue)))
            {
                s.Serialize("startTime", ref startTime.Value);
                startTime.HasValue = true;
            }
            s.SerializeEnum("state", ref state, EventStateExtensions.ToEnumString, EventStateExtensions.FromEnumString);
        }
    }
    [System.SerializableAttribute()]
    public partial class DateRange : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string from;
        public string to;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("from", ref from);
            s.Serialize("to", ref to);
        }
    }
    public enum EventState
    {
        Running,
        Unknown,
        Cancelled,
        Done,
        Pending,
    }
    public class EventStateExtensions
    {
        public static string ToEnumString(EventState val)
        {
            if ((EventState.Running == val))
            {
                return "running";
            }
            if ((EventState.Unknown == val))
            {
                return "unknown";
            }
            if ((EventState.Cancelled == val))
            {
                return "cancelled";
            }
            if ((EventState.Done == val))
            {
                return "done";
            }
            if ((EventState.Pending == val))
            {
                return "pending";
            }
            throw new System.ArgumentException("Unknown enum value");
        }
        public static EventState FromEnumString(string str)
        {
            if (("running" == str))
            {
                return EventState.Running;
            }
            if (("unknown" == str))
            {
                return EventState.Unknown;
            }
            if (("cancelled" == str))
            {
                return EventState.Cancelled;
            }
            if (("done" == str))
            {
                return EventState.Done;
            }
            if (("pending" == str))
            {
                return EventState.Pending;
            }
            throw new System.ArgumentException("Unknown string value");
        }
    }
    [System.SerializableAttribute()]
    public partial class EventsInDateRangeResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public EventDateRanges[] eventInDateRange;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("eventInDateRange", ref eventInDateRange);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventApplyRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Event content = new Event();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("content", ref content);
        }
    }
    [System.SerializableAttribute()]
    public partial class Schedule : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string activeFrom;
        public OptionalString activeTo = new OptionalString();
        public OptionalArrayOfString crons = new OptionalArrayOfString();
        public OptionalArrayOfScheduleDefinition definitions = new OptionalArrayOfScheduleDefinition();
        public OptionalString description = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("activeFrom", ref activeFrom);
            if ((s.HasKey("activeTo") 
                        || ((activeTo != default(OptionalString)) 
                        && activeTo.HasValue)))
            {
                s.Serialize("activeTo", ref activeTo.Value);
                activeTo.HasValue = true;
            }
            if ((s.HasKey("crons") 
                        || ((crons != default(OptionalArrayOfString)) 
                        && crons.HasValue)))
            {
                s.SerializeArray("crons", ref crons.Value);
                crons.HasValue = true;
            }
            if ((s.HasKey("definitions") 
                        || ((definitions != default(OptionalArrayOfScheduleDefinition)) 
                        && definitions.HasValue)))
            {
                s.SerializeArray("definitions", ref definitions.Value);
                definitions.HasValue = true;
            }
            if ((s.HasKey("description") 
                        || ((description != default(OptionalString)) 
                        && description.HasValue)))
            {
                s.Serialize("description", ref description.Value);
                description.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ScheduleDefinition : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] dayOfMonth;
        public string[] dayOfWeek;
        public string[] hour;
        public string[] minute;
        public string[] month;
        public string[] second;
        public string[] year;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("dayOfMonth", ref dayOfMonth);
            s.SerializeArray("dayOfWeek", ref dayOfWeek);
            s.SerializeArray("hour", ref hour);
            s.SerializeArray("minute", ref minute);
            s.SerializeArray("month", ref month);
            s.SerializeArray("second", ref second);
            s.SerializeArray("year", ref year);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventPhase : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long durationMillis;
        public long durationSeconds;
        public int duration_minutes;
        public string name;
        public OptionalArrayOfEventRule rules = new OptionalArrayOfEventRule();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("durationMillis", ref durationMillis);
            s.Serialize("durationSeconds", ref durationSeconds);
            s.Serialize("duration_minutes", ref duration_minutes);
            s.Serialize("name", ref name);
            if ((s.HasKey("rules") 
                        || ((rules != default(OptionalArrayOfEventRule)) 
                        && rules.HasValue)))
            {
                s.SerializeArray("rules", ref rules.Value);
                rules.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class EventContentResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Event[] content;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("content", ref content);
        }
    }
    [System.SerializableAttribute()]
    public partial class EventPhaseEndRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString time = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("time") 
                        || ((time != default(OptionalString)) 
                        && time.HasValue)))
            {
                s.Serialize("time", ref time.Value);
                time.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class PingRsp : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool keepAlive;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("keepAlive", ref keepAlive);
        }
    }
    [System.SerializableAttribute()]
    public partial class SetContentRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Event eventKey = new Event();
        public string origin;
        public OptionalString originType = new OptionalString();
        public OptionalString rootEventId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("event", ref eventKey);
            s.Serialize("origin", ref origin);
            if ((s.HasKey("originType") 
                        || ((originType != default(OptionalString)) 
                        && originType.HasValue)))
            {
                s.Serialize("originType", ref originType.Value);
                originType.HasValue = true;
            }
            if ((s.HasKey("rootEventId") 
                        || ((rootEventId != default(OptionalString)) 
                        && rootEventId.HasValue)))
            {
                s.Serialize("rootEventId", ref rootEventId.Value);
                rootEventId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupCreate : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString clientData = new OptionalString();
        public string enrollmentType;
        public OptionalLong group = new OptionalLong();
        public int maxSize;
        public string name;
        public long requirement;
        public OptionalArrayOfGroupScoreBinding scores = new OptionalArrayOfGroupScoreBinding();
        public OptionalString tag = new OptionalString();
        public OptionalInt time = new OptionalInt();
        public GroupType type = new GroupType();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("clientData") 
                        || ((clientData != default(OptionalString)) 
                        && clientData.HasValue)))
            {
                s.Serialize("clientData", ref clientData.Value);
                clientData.HasValue = true;
            }
            s.Serialize("enrollmentType", ref enrollmentType);
            if ((s.HasKey("group") 
                        || ((group != default(OptionalLong)) 
                        && group.HasValue)))
            {
                s.Serialize("group", ref group.Value);
                group.HasValue = true;
            }
            s.Serialize("maxSize", ref maxSize);
            s.Serialize("name", ref name);
            s.Serialize("requirement", ref requirement);
            if ((s.HasKey("scores") 
                        || ((scores != default(OptionalArrayOfGroupScoreBinding)) 
                        && scores.HasValue)))
            {
                s.SerializeArray("scores", ref scores.Value);
                scores.HasValue = true;
            }
            if ((s.HasKey("tag") 
                        || ((tag != default(OptionalString)) 
                        && tag.HasValue)))
            {
                s.Serialize("tag", ref tag.Value);
                tag.HasValue = true;
            }
            if ((s.HasKey("time") 
                        || ((time != default(OptionalInt)) 
                        && time.HasValue)))
            {
                s.Serialize("time", ref time.Value);
                time.HasValue = true;
            }
            s.SerializeEnum("type", ref type, GroupTypeExtensions.ToEnumString, GroupTypeExtensions.FromEnumString);
        }
    }
    [System.SerializableAttribute()]
    public partial class DonationEntry : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long amount;
        public OptionalBool claimed = new OptionalBool();
        public long playerId;
        public long time;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("amount", ref amount);
            if ((s.HasKey("claimed") 
                        || ((claimed != default(OptionalBool)) 
                        && claimed.HasValue)))
            {
                s.Serialize("claimed", ref claimed.Value);
                claimed.HasValue = true;
            }
            s.Serialize("playerId", ref playerId);
            s.Serialize("time", ref time);
        }
    }
    public enum GroupType
    {
        Guild,
        Subgroup,
    }
    public class GroupTypeExtensions
    {
        public static string ToEnumString(GroupType val)
        {
            if ((GroupType.Guild == val))
            {
                return "guild";
            }
            if ((GroupType.Subgroup == val))
            {
                return "subgroup";
            }
            throw new System.ArgumentException("Unknown enum value");
        }
        public static GroupType FromEnumString(string str)
        {
            if (("guild" == str))
            {
                return GroupType.Guild;
            }
            if (("subgroup" == str))
            {
                return GroupType.Subgroup;
            }
            throw new System.ArgumentException("Unknown string value");
        }
    }
    [System.SerializableAttribute()]
    public partial class Member : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool canDemote = new OptionalBool();
        public OptionalBool canKick = new OptionalBool();
        public OptionalBool canPromote = new OptionalBool();
        public long gamerTag;
        public string role;
        public OptionalArrayOfGroupScoreBinding scores = new OptionalArrayOfGroupScoreBinding();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("canDemote") 
                        || ((canDemote != default(OptionalBool)) 
                        && canDemote.HasValue)))
            {
                s.Serialize("canDemote", ref canDemote.Value);
                canDemote.HasValue = true;
            }
            if ((s.HasKey("canKick") 
                        || ((canKick != default(OptionalBool)) 
                        && canKick.HasValue)))
            {
                s.Serialize("canKick", ref canKick.Value);
                canKick.HasValue = true;
            }
            if ((s.HasKey("canPromote") 
                        || ((canPromote != default(OptionalBool)) 
                        && canPromote.HasValue)))
            {
                s.Serialize("canPromote", ref canPromote.Value);
                canPromote.HasValue = true;
            }
            s.Serialize("gamerTag", ref gamerTag);
            s.Serialize("role", ref role);
            if ((s.HasKey("scores") 
                        || ((scores != default(OptionalArrayOfGroupScoreBinding)) 
                        && scores.HasValue)))
            {
                s.SerializeArray("scores", ref scores.Value);
                scores.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupMembershipResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong gamerTag = new OptionalLong();
        public GroupMetaData group = new GroupMetaData();
        public bool member;
        public long[] subGroups;
        public GroupType type = new GroupType();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("gamerTag") 
                        || ((gamerTag != default(OptionalLong)) 
                        && gamerTag.HasValue)))
            {
                s.Serialize("gamerTag", ref gamerTag.Value);
                gamerTag.HasValue = true;
            }
            s.Serialize("group", ref group);
            s.Serialize("member", ref member);
            s.SerializeArray("subGroups", ref subGroups);
            s.SerializeEnum("type", ref type, GroupTypeExtensions.ToEnumString, GroupTypeExtensions.FromEnumString);
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupRole : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public string[] permissions;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
            s.SerializeArray("permissions", ref permissions);
        }
    }
    [System.SerializableAttribute()]
    public partial class AvailabilityResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool name;
        public bool tag;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
            s.Serialize("tag", ref tag);
        }
    }
    [System.SerializableAttribute()]
    public partial class DonationRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Currency currency = new Currency();
        public long playerId;
        public DonationEntry[] progress;
        public bool satisfied;
        public long timeRequested;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("currency", ref currency);
            s.Serialize("playerId", ref playerId);
            s.SerializeArray("progress", ref progress);
            s.Serialize("satisfied", ref satisfied);
            s.Serialize("timeRequested", ref timeRequested);
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupCreateResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public GroupMetaData group = new GroupMetaData();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("group", ref group);
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupSearchResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Group[] groups;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("groups", ref groups);
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupUserMember : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long id;
        public OptionalLong joined = new OptionalLong();
        public GroupUserMember[] subGroups;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            if ((s.HasKey("joined") 
                        || ((joined != default(OptionalLong)) 
                        && joined.HasValue)))
            {
                s.Serialize("joined", ref joined.Value);
                joined.HasValue = true;
            }
            s.SerializeArray("subGroups", ref subGroups);
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupMemberInfo : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfGroupUserMember guild = new OptionalArrayOfGroupUserMember();
        public OptionalArrayOfGroupUserMember subgroup = new OptionalArrayOfGroupUserMember();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("guild") 
                        || ((guild != default(OptionalArrayOfGroupUserMember)) 
                        && guild.HasValue)))
            {
                s.SerializeArray("guild", ref guild.Value);
                guild.HasValue = true;
            }
            if ((s.HasKey("subgroup") 
                        || ((subgroup != default(OptionalArrayOfGroupUserMember)) 
                        && subgroup.HasValue)))
            {
                s.SerializeArray("subgroup", ref subgroup.Value);
                subgroup.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class CurrencyProperty : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public string value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class Group : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool canDisband = new OptionalBool();
        public OptionalBool canUpdateEnrollment = new OptionalBool();
        public OptionalBool canUpdateMOTD = new OptionalBool();
        public OptionalBool canUpdateSlogan = new OptionalBool();
        public OptionalString clientData = new OptionalString();
        public long created;
        public OptionalArrayOfDonationRequest donations = new OptionalArrayOfDonationRequest();
        public string enrollmentType;
        public int freeSlots;
        public long id;
        public OptionalArrayOfInFlightMessage inFlight = new OptionalArrayOfInFlightMessage();
        public long leader;
        public int maxSize;
        public OptionalMapOfDonationRequest maybeDonations = new OptionalMapOfDonationRequest();
        public Member[] members;
        public string motd;
        public string name;
        public long requirement;
        public OptionalArrayOfGroupRole roles = new OptionalArrayOfGroupRole();
        public MapOfString scores = new MapOfString();
        public OptionalString shard = new OptionalString();
        public string slogan;
        public Group[] subGroups;
        public OptionalString tag = new OptionalString();
        public GroupType type = new GroupType();
        public OptionalInt version = new OptionalInt();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("canDisband") 
                        || ((canDisband != default(OptionalBool)) 
                        && canDisband.HasValue)))
            {
                s.Serialize("canDisband", ref canDisband.Value);
                canDisband.HasValue = true;
            }
            if ((s.HasKey("canUpdateEnrollment") 
                        || ((canUpdateEnrollment != default(OptionalBool)) 
                        && canUpdateEnrollment.HasValue)))
            {
                s.Serialize("canUpdateEnrollment", ref canUpdateEnrollment.Value);
                canUpdateEnrollment.HasValue = true;
            }
            if ((s.HasKey("canUpdateMOTD") 
                        || ((canUpdateMOTD != default(OptionalBool)) 
                        && canUpdateMOTD.HasValue)))
            {
                s.Serialize("canUpdateMOTD", ref canUpdateMOTD.Value);
                canUpdateMOTD.HasValue = true;
            }
            if ((s.HasKey("canUpdateSlogan") 
                        || ((canUpdateSlogan != default(OptionalBool)) 
                        && canUpdateSlogan.HasValue)))
            {
                s.Serialize("canUpdateSlogan", ref canUpdateSlogan.Value);
                canUpdateSlogan.HasValue = true;
            }
            if ((s.HasKey("clientData") 
                        || ((clientData != default(OptionalString)) 
                        && clientData.HasValue)))
            {
                s.Serialize("clientData", ref clientData.Value);
                clientData.HasValue = true;
            }
            s.Serialize("created", ref created);
            if ((s.HasKey("donations") 
                        || ((donations != default(OptionalArrayOfDonationRequest)) 
                        && donations.HasValue)))
            {
                s.SerializeArray("donations", ref donations.Value);
                donations.HasValue = true;
            }
            s.Serialize("enrollmentType", ref enrollmentType);
            s.Serialize("freeSlots", ref freeSlots);
            s.Serialize("id", ref id);
            if ((s.HasKey("inFlight") 
                        || ((inFlight != default(OptionalArrayOfInFlightMessage)) 
                        && inFlight.HasValue)))
            {
                s.SerializeArray("inFlight", ref inFlight.Value);
                inFlight.HasValue = true;
            }
            s.Serialize("leader", ref leader);
            s.Serialize("maxSize", ref maxSize);
            if ((s.HasKey("maybeDonations") 
                        || ((maybeDonations != default(OptionalMapOfDonationRequest)) 
                        && maybeDonations.HasValue)))
            {
                s.SerializeDictionary<MapOfDonationRequest, DonationRequest>("maybeDonations", ref maybeDonations.Value);
                maybeDonations.HasValue = true;
            }
            s.SerializeArray("members", ref members);
            s.Serialize("motd", ref motd);
            s.Serialize("name", ref name);
            s.Serialize("requirement", ref requirement);
            if ((s.HasKey("roles") 
                        || ((roles != default(OptionalArrayOfGroupRole)) 
                        && roles.HasValue)))
            {
                s.SerializeArray("roles", ref roles.Value);
                roles.HasValue = true;
            }
            s.SerializeDictionary<MapOfString, string>("scores", ref scores);
            if ((s.HasKey("shard") 
                        || ((shard != default(OptionalString)) 
                        && shard.HasValue)))
            {
                s.Serialize("shard", ref shard.Value);
                shard.HasValue = true;
            }
            s.Serialize("slogan", ref slogan);
            s.SerializeArray("subGroups", ref subGroups);
            if ((s.HasKey("tag") 
                        || ((tag != default(OptionalString)) 
                        && tag.HasValue)))
            {
                s.Serialize("tag", ref tag.Value);
                tag.HasValue = true;
            }
            s.SerializeEnum("type", ref type, GroupTypeExtensions.ToEnumString, GroupTypeExtensions.FromEnumString);
            if ((s.HasKey("version") 
                        || ((version != default(OptionalInt)) 
                        && version.HasValue)))
            {
                s.Serialize("version", ref version.Value);
                version.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Currency : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long amount;
        public string id;
        public OptionalArrayOfCurrencyProperty properties = new OptionalArrayOfCurrencyProperty();
        public OptionalArchetypeProxy proxy = new OptionalArchetypeProxy();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("amount", ref amount);
            s.Serialize("id", ref id);
            if ((s.HasKey("properties") 
                        || ((properties != default(OptionalArrayOfCurrencyProperty)) 
                        && properties.HasValue)))
            {
                s.SerializeArray("properties", ref properties.Value);
                properties.HasValue = true;
            }
            if ((s.HasKey("proxy") 
                        || ((proxy != default(OptionalArchetypeProxy)) 
                        && proxy.HasValue)))
            {
                s.Serialize("proxy", ref proxy.Value);
                proxy.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupMembershipRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long group;
        public OptionalLong score = new OptionalLong();
        public OptionalLong subGroup = new OptionalLong();
        public OptionalLong successor = new OptionalLong();
        public GroupType type = new GroupType();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("group", ref group);
            if ((s.HasKey("score") 
                        || ((score != default(OptionalLong)) 
                        && score.HasValue)))
            {
                s.Serialize("score", ref score.Value);
                score.HasValue = true;
            }
            if ((s.HasKey("subGroup") 
                        || ((subGroup != default(OptionalLong)) 
                        && subGroup.HasValue)))
            {
                s.Serialize("subGroup", ref subGroup.Value);
                subGroup.HasValue = true;
            }
            if ((s.HasKey("successor") 
                        || ((successor != default(OptionalLong)) 
                        && successor.HasValue)))
            {
                s.Serialize("successor", ref successor.Value);
                successor.HasValue = true;
            }
            s.SerializeEnum("type", ref type, GroupTypeExtensions.ToEnumString, GroupTypeExtensions.FromEnumString);
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupScoreBinding : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string board;
        public string[] derivatives;
        public long score;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("board", ref board);
            s.SerializeArray("derivatives", ref derivatives);
            s.Serialize("score", ref score);
        }
    }
    [System.SerializableAttribute()]
    public partial class ArchetypeProxy : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string namespaceKey;
        public string service;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("namespace", ref namespaceKey);
            s.Serialize("service", ref service);
        }
    }
    [System.SerializableAttribute()]
    public partial class AvailabilityRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString name = new OptionalString();
        public OptionalBool subGroup = new OptionalBool();
        public OptionalString tag = new OptionalString();
        public GroupType type = new GroupType();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("name") 
                        || ((name != default(OptionalString)) 
                        && name.HasValue)))
            {
                s.Serialize("name", ref name.Value);
                name.HasValue = true;
            }
            if ((s.HasKey("subGroup") 
                        || ((subGroup != default(OptionalBool)) 
                        && subGroup.HasValue)))
            {
                s.Serialize("subGroup", ref subGroup.Value);
                subGroup.HasValue = true;
            }
            if ((s.HasKey("tag") 
                        || ((tag != default(OptionalString)) 
                        && tag.HasValue)))
            {
                s.Serialize("tag", ref tag.Value);
                tag.HasValue = true;
            }
            s.SerializeEnum("type", ref type, GroupTypeExtensions.ToEnumString, GroupTypeExtensions.FromEnumString);
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupSearchRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString enrollmentTypes = new OptionalString();
        public OptionalBool hasSlots = new OptionalBool();
        public OptionalInt limit = new OptionalInt();
        public OptionalString name = new OptionalString();
        public OptionalInt offset = new OptionalInt();
        public OptionalLong scoreMax = new OptionalLong();
        public OptionalLong scoreMin = new OptionalLong();
        public OptionalString sortField = new OptionalString();
        public OptionalInt sortValue = new OptionalInt();
        public OptionalBool subGroup = new OptionalBool();
        public GroupType type = new GroupType();
        public OptionalLong userScore = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("enrollmentTypes") 
                        || ((enrollmentTypes != default(OptionalString)) 
                        && enrollmentTypes.HasValue)))
            {
                s.Serialize("enrollmentTypes", ref enrollmentTypes.Value);
                enrollmentTypes.HasValue = true;
            }
            if ((s.HasKey("hasSlots") 
                        || ((hasSlots != default(OptionalBool)) 
                        && hasSlots.HasValue)))
            {
                s.Serialize("hasSlots", ref hasSlots.Value);
                hasSlots.HasValue = true;
            }
            if ((s.HasKey("limit") 
                        || ((limit != default(OptionalInt)) 
                        && limit.HasValue)))
            {
                s.Serialize("limit", ref limit.Value);
                limit.HasValue = true;
            }
            if ((s.HasKey("name") 
                        || ((name != default(OptionalString)) 
                        && name.HasValue)))
            {
                s.Serialize("name", ref name.Value);
                name.HasValue = true;
            }
            if ((s.HasKey("offset") 
                        || ((offset != default(OptionalInt)) 
                        && offset.HasValue)))
            {
                s.Serialize("offset", ref offset.Value);
                offset.HasValue = true;
            }
            if ((s.HasKey("scoreMax") 
                        || ((scoreMax != default(OptionalLong)) 
                        && scoreMax.HasValue)))
            {
                s.Serialize("scoreMax", ref scoreMax.Value);
                scoreMax.HasValue = true;
            }
            if ((s.HasKey("scoreMin") 
                        || ((scoreMin != default(OptionalLong)) 
                        && scoreMin.HasValue)))
            {
                s.Serialize("scoreMin", ref scoreMin.Value);
                scoreMin.HasValue = true;
            }
            if ((s.HasKey("sortField") 
                        || ((sortField != default(OptionalString)) 
                        && sortField.HasValue)))
            {
                s.Serialize("sortField", ref sortField.Value);
                sortField.HasValue = true;
            }
            if ((s.HasKey("sortValue") 
                        || ((sortValue != default(OptionalInt)) 
                        && sortValue.HasValue)))
            {
                s.Serialize("sortValue", ref sortValue.Value);
                sortValue.HasValue = true;
            }
            if ((s.HasKey("subGroup") 
                        || ((subGroup != default(OptionalBool)) 
                        && subGroup.HasValue)))
            {
                s.Serialize("subGroup", ref subGroup.Value);
                subGroup.HasValue = true;
            }
            s.SerializeEnum("type", ref type, GroupTypeExtensions.ToEnumString, GroupTypeExtensions.FromEnumString);
            if ((s.HasKey("userScore") 
                        || ((userScore != default(OptionalLong)) 
                        && userScore.HasValue)))
            {
                s.Serialize("userScore", ref userScore.Value);
                userScore.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupMetaData : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long id;
        public OptionalString name = new OptionalString();
        public OptionalString tag = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            if ((s.HasKey("name") 
                        || ((name != default(OptionalString)) 
                        && name.HasValue)))
            {
                s.Serialize("name", ref name.Value);
                name.HasValue = true;
            }
            if ((s.HasKey("tag") 
                        || ((tag != default(OptionalString)) 
                        && tag.HasValue)))
            {
                s.Serialize("tag", ref tag.Value);
                tag.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupUser : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public GroupUserMember[] allGroups;
        public long gamerTag;
        public OptionalArrayOfInFlightMessage inFlight = new OptionalArrayOfInFlightMessage();
        public GroupMemberInfo member = new GroupMemberInfo();
        public OptionalArrayOfGroupScoreBinding scores = new OptionalArrayOfGroupScoreBinding();
        public long updated;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("allGroups", ref allGroups);
            s.Serialize("gamerTag", ref gamerTag);
            if ((s.HasKey("inFlight") 
                        || ((inFlight != default(OptionalArrayOfInFlightMessage)) 
                        && inFlight.HasValue)))
            {
                s.SerializeArray("inFlight", ref inFlight.Value);
                inFlight.HasValue = true;
            }
            s.Serialize("member", ref member);
            if ((s.HasKey("scores") 
                        || ((scores != default(OptionalArrayOfGroupScoreBinding)) 
                        && scores.HasValue)))
            {
                s.SerializeArray("scores", ref scores.Value);
                scores.HasValue = true;
            }
            s.Serialize("updated", ref updated);
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupInvite : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long gamerTag;
        public OptionalLong subGroup = new OptionalLong();
        public OptionalBool useNewRewardsSystem = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("gamerTag", ref gamerTag);
            if ((s.HasKey("subGroup") 
                        || ((subGroup != default(OptionalLong)) 
                        && subGroup.HasValue)))
            {
                s.Serialize("subGroup", ref subGroup.Value);
                subGroup.HasValue = true;
            }
            if ((s.HasKey("useNewRewardsSystem") 
                        || ((useNewRewardsSystem != default(OptionalBool)) 
                        && useNewRewardsSystem.HasValue)))
            {
                s.Serialize("useNewRewardsSystem", ref useNewRewardsSystem.Value);
                useNewRewardsSystem.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class CreateDonationRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long amount;
        public OptionalString config = new OptionalString();
        public string currencyId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("amount", ref amount);
            if ((s.HasKey("config") 
                        || ((config != default(OptionalString)) 
                        && config.HasValue)))
            {
                s.Serialize("config", ref config.Value);
                config.HasValue = true;
            }
            s.Serialize("currencyId", ref currencyId);
        }
    }
    [System.SerializableAttribute()]
    public partial class KickRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long gamerTag;
        public OptionalLong subGroup = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("gamerTag", ref gamerTag);
            if ((s.HasKey("subGroup") 
                        || ((subGroup != default(OptionalLong)) 
                        && subGroup.HasValue)))
            {
                s.Serialize("subGroup", ref subGroup.Value);
                subGroup.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupUpdate : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString clientData = new OptionalString();
        public OptionalString enrollmentType = new OptionalString();
        public OptionalString motd = new OptionalString();
        public OptionalString name = new OptionalString();
        public OptionalLong requirement = new OptionalLong();
        public OptionalString slogan = new OptionalString();
        public OptionalLong subGroup = new OptionalLong();
        public OptionalString tag = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("clientData") 
                        || ((clientData != default(OptionalString)) 
                        && clientData.HasValue)))
            {
                s.Serialize("clientData", ref clientData.Value);
                clientData.HasValue = true;
            }
            if ((s.HasKey("enrollmentType") 
                        || ((enrollmentType != default(OptionalString)) 
                        && enrollmentType.HasValue)))
            {
                s.Serialize("enrollmentType", ref enrollmentType.Value);
                enrollmentType.HasValue = true;
            }
            if ((s.HasKey("motd") 
                        || ((motd != default(OptionalString)) 
                        && motd.HasValue)))
            {
                s.Serialize("motd", ref motd.Value);
                motd.HasValue = true;
            }
            if ((s.HasKey("name") 
                        || ((name != default(OptionalString)) 
                        && name.HasValue)))
            {
                s.Serialize("name", ref name.Value);
                name.HasValue = true;
            }
            if ((s.HasKey("requirement") 
                        || ((requirement != default(OptionalLong)) 
                        && requirement.HasValue)))
            {
                s.Serialize("requirement", ref requirement.Value);
                requirement.HasValue = true;
            }
            if ((s.HasKey("slogan") 
                        || ((slogan != default(OptionalString)) 
                        && slogan.HasValue)))
            {
                s.Serialize("slogan", ref slogan.Value);
                slogan.HasValue = true;
            }
            if ((s.HasKey("subGroup") 
                        || ((subGroup != default(OptionalLong)) 
                        && subGroup.HasValue)))
            {
                s.Serialize("subGroup", ref subGroup.Value);
                subGroup.HasValue = true;
            }
            if ((s.HasKey("tag") 
                        || ((tag != default(OptionalString)) 
                        && tag.HasValue)))
            {
                s.Serialize("tag", ref tag.Value);
                tag.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupApplication : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong subGroup = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("subGroup") 
                        || ((subGroup != default(OptionalLong)) 
                        && subGroup.HasValue)))
            {
                s.Serialize("subGroup", ref subGroup.Value);
                subGroup.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class MakeDonationRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long amount;
        public OptionalBool autoClaim = new OptionalBool();
        public long recipientId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("amount", ref amount);
            if ((s.HasKey("autoClaim") 
                        || ((autoClaim != default(OptionalBool)) 
                        && autoClaim.HasValue)))
            {
                s.Serialize("autoClaim", ref autoClaim.Value);
                autoClaim.HasValue = true;
            }
            s.Serialize("recipientId", ref recipientId);
        }
    }
    [System.SerializableAttribute()]
    public partial class RoleChangeRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long gamerTag;
        public string role;
        public OptionalLong subGroup = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("gamerTag", ref gamerTag);
            s.Serialize("role", ref role);
            if ((s.HasKey("subGroup") 
                        || ((subGroup != default(OptionalLong)) 
                        && subGroup.HasValue)))
            {
                s.Serialize("subGroup", ref subGroup.Value);
                subGroup.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class DisbandRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong subGroup = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("subGroup") 
                        || ((subGroup != default(OptionalLong)) 
                        && subGroup.HasValue)))
            {
                s.Serialize("subGroup", ref subGroup.Value);
                subGroup.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class CurrencyContentResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public CurrencyArchetype[] content;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("content", ref content);
        }
    }
    [System.SerializableAttribute()]
    public partial class CurrencyArchetype : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalClientPermission clientPermission = new OptionalClientPermission();
        public OptionalArchetypeProxy external = new OptionalArchetypeProxy();
        public OptionalLong startingAmount = new OptionalLong();
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("clientPermission") 
                        || ((clientPermission != default(OptionalClientPermission)) 
                        && clientPermission.HasValue)))
            {
                s.Serialize("clientPermission", ref clientPermission.Value);
                clientPermission.HasValue = true;
            }
            if ((s.HasKey("external") 
                        || ((external != default(OptionalArchetypeProxy)) 
                        && external.HasValue)))
            {
                s.Serialize("external", ref external.Value);
                external.HasValue = true;
            }
            if ((s.HasKey("startingAmount") 
                        || ((startingAmount != default(OptionalLong)) 
                        && startingAmount.HasValue)))
            {
                s.Serialize("startingAmount", ref startingAmount.Value);
                startingAmount.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class ItemArchetype : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalClientPermission clientPermission = new OptionalClientPermission();
        public OptionalArchetypeProxy external = new OptionalArchetypeProxy();
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("clientPermission") 
                        || ((clientPermission != default(OptionalClientPermission)) 
                        && clientPermission.HasValue)))
            {
                s.Serialize("clientPermission", ref clientPermission.Value);
                clientPermission.HasValue = true;
            }
            if ((s.HasKey("external") 
                        || ((external != default(OptionalArchetypeProxy)) 
                        && external.HasValue)))
            {
                s.Serialize("external", ref external.Value);
                external.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class ItemContentResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ItemArchetype[] content;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("content", ref content);
        }
    }
    [System.SerializableAttribute()]
    public partial class ItemGroup : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string id;
        public Item[] items;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            s.SerializeArray("items", ref items);
        }
    }
    [System.SerializableAttribute()]
    public partial class ItemUpdateRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string contentId;
        public long id;
        public ItemProperty[] properties;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("contentId", ref contentId);
            s.Serialize("id", ref id);
            s.SerializeArray("properties", ref properties);
        }
    }
    [System.SerializableAttribute()]
    public partial class CurrencyPreview : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long amount;
        public string id;
        public long originalAmount;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("amount", ref amount);
            s.Serialize("id", ref id);
            s.Serialize("originalAmount", ref originalAmount);
        }
    }
    [System.SerializableAttribute()]
    public partial class CurrencyView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long amount;
        public string id;
        public CurrencyProperty[] properties;
        public OptionalArchetypeProxy proxy = new OptionalArchetypeProxy();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("amount", ref amount);
            s.Serialize("id", ref id);
            s.SerializeArray("properties", ref properties);
            if ((s.HasKey("proxy") 
                        || ((proxy != default(OptionalArchetypeProxy)) 
                        && proxy.HasValue)))
            {
                s.Serialize("proxy", ref proxy.Value);
                proxy.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class InventoryView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public CurrencyView[] currencies;
        public ItemGroup[] items;
        public OptionalString scope = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("currencies", ref currencies);
            s.SerializeArray("items", ref items);
            if ((s.HasKey("scope") 
                        || ((scope != default(OptionalString)) 
                        && scope.HasValue)))
            {
                s.Serialize("scope", ref scope.Value);
                scope.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class InventoryGetRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString scope = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("scope") 
                        || ((scope != default(OptionalString)) 
                        && scope.HasValue)))
            {
                s.Serialize("scope", ref scope.Value);
                scope.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class MultipliersGetResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public VipBonus[] multipliers;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("multipliers", ref multipliers);
        }
    }
    [System.SerializableAttribute()]
    public partial class EndTransactionRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string transaction;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("transaction", ref transaction);
        }
    }
    [System.SerializableAttribute()]
    public partial class InventoryUpdateRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool applyVipBonus = new OptionalBool();
        public OptionalMapOfLong currencies = new OptionalMapOfLong();
        public string[] currencyContentIds;
        public OptionalMapOfArrayOfCurrencyProperty currencyProperties = new OptionalMapOfArrayOfCurrencyProperty();
        public OptionalArrayOfItemDeleteRequest deleteItems = new OptionalArrayOfItemDeleteRequest();
        public bool empty;
        public string[] itemContentIds;
        public OptionalArrayOfItemCreateRequest newItems = new OptionalArrayOfItemCreateRequest();
        public OptionalString transaction = new OptionalString();
        public OptionalArrayOfItemUpdateRequest updateItems = new OptionalArrayOfItemUpdateRequest();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("applyVipBonus") 
                        || ((applyVipBonus != default(OptionalBool)) 
                        && applyVipBonus.HasValue)))
            {
                s.Serialize("applyVipBonus", ref applyVipBonus.Value);
                applyVipBonus.HasValue = true;
            }
            if ((s.HasKey("currencies") 
                        || ((currencies != default(OptionalMapOfLong)) 
                        && currencies.HasValue)))
            {
                s.SerializeDictionary<MapOfLong, long>("currencies", ref currencies.Value);
                currencies.HasValue = true;
            }
            s.SerializeArray("currencyContentIds", ref currencyContentIds);
            if ((s.HasKey("currencyProperties") 
                        || ((currencyProperties != default(OptionalMapOfArrayOfCurrencyProperty)) 
                        && currencyProperties.HasValue)))
            {
                s.SerializeDictionary<MapOfArrayOfCurrencyProperty, CurrencyProperty[]>("currencyProperties", ref currencyProperties.Value);
                currencyProperties.HasValue = true;
            }
            if ((s.HasKey("deleteItems") 
                        || ((deleteItems != default(OptionalArrayOfItemDeleteRequest)) 
                        && deleteItems.HasValue)))
            {
                s.SerializeArray("deleteItems", ref deleteItems.Value);
                deleteItems.HasValue = true;
            }
            s.Serialize("empty", ref empty);
            s.SerializeArray("itemContentIds", ref itemContentIds);
            if ((s.HasKey("newItems") 
                        || ((newItems != default(OptionalArrayOfItemCreateRequest)) 
                        && newItems.HasValue)))
            {
                s.SerializeArray("newItems", ref newItems.Value);
                newItems.HasValue = true;
            }
            if ((s.HasKey("transaction") 
                        || ((transaction != default(OptionalString)) 
                        && transaction.HasValue)))
            {
                s.Serialize("transaction", ref transaction.Value);
                transaction.HasValue = true;
            }
            if ((s.HasKey("updateItems") 
                        || ((updateItems != default(OptionalArrayOfItemUpdateRequest)) 
                        && updateItems.HasValue)))
            {
                s.SerializeArray("updateItems", ref updateItems.Value);
                updateItems.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Item : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong createdAt = new OptionalLong();
        public long id;
        public ItemProperty[] properties;
        public OptionalArchetypeProxy proxy = new OptionalArchetypeProxy();
        public OptionalString proxyId = new OptionalString();
        public OptionalLong updatedAt = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("createdAt") 
                        || ((createdAt != default(OptionalLong)) 
                        && createdAt.HasValue)))
            {
                s.Serialize("createdAt", ref createdAt.Value);
                createdAt.HasValue = true;
            }
            s.Serialize("id", ref id);
            s.SerializeArray("properties", ref properties);
            if ((s.HasKey("proxy") 
                        || ((proxy != default(OptionalArchetypeProxy)) 
                        && proxy.HasValue)))
            {
                s.Serialize("proxy", ref proxy.Value);
                proxy.HasValue = true;
            }
            if ((s.HasKey("proxyId") 
                        || ((proxyId != default(OptionalString)) 
                        && proxyId.HasValue)))
            {
                s.Serialize("proxyId", ref proxyId.Value);
                proxyId.HasValue = true;
            }
            if ((s.HasKey("updatedAt") 
                        || ((updatedAt != default(OptionalLong)) 
                        && updatedAt.HasValue)))
            {
                s.Serialize("updatedAt", ref updatedAt.Value);
                updatedAt.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class InventoryQueryRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfString scopes = new OptionalArrayOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("scopes") 
                        || ((scopes != default(OptionalArrayOfString)) 
                        && scopes.HasValue)))
            {
                s.SerializeArray("scopes", ref scopes.Value);
                scopes.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ItemDeleteRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string contentId;
        public long id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("contentId", ref contentId);
            s.Serialize("id", ref id);
        }
    }
    [System.SerializableAttribute()]
    public partial class VipBonus : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string currency;
        public double multiplier;
        public int roundToNearest;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("currency", ref currency);
            s.Serialize("multiplier", ref multiplier);
            s.Serialize("roundToNearest", ref roundToNearest);
        }
    }
    [System.SerializableAttribute()]
    public partial class PreviewVipBonusResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public CurrencyPreview[] currencies;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("currencies", ref currencies);
        }
    }
    [System.SerializableAttribute()]
    public partial class TransferRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalMapOfLong currencies = new OptionalMapOfLong();
        public long recipientPlayer;
        public OptionalString transaction = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("currencies") 
                        || ((currencies != default(OptionalMapOfLong)) 
                        && currencies.HasValue)))
            {
                s.SerializeDictionary<MapOfLong, long>("currencies", ref currencies.Value);
                currencies.HasValue = true;
            }
            s.Serialize("recipientPlayer", ref recipientPlayer);
            if ((s.HasKey("transaction") 
                        || ((transaction != default(OptionalString)) 
                        && transaction.HasValue)))
            {
                s.Serialize("transaction", ref transaction.Value);
                transaction.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class RankEntryStat : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public string value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardUidResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
        }
    }
    [System.SerializableAttribute()]
    public partial class ListLeaderBoardViewResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public LeaderBoardView[] lbs;
        public string result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("lbs", ref lbs);
            s.Serialize("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class RankEntry : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MapOfLong columns = new MapOfLong();
        public long gt;
        public long rank;
        public OptionalDouble score = new OptionalDouble();
        public OptionalArrayOfRankEntryStat stats = new OptionalArrayOfRankEntryStat();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeDictionary<MapOfLong, long>("columns", ref columns);
            s.Serialize("gt", ref gt);
            s.Serialize("rank", ref rank);
            if ((s.HasKey("score") 
                        || ((score != default(OptionalDouble)) 
                        && score.HasValue)))
            {
                s.Serialize("score", ref score.Value);
                score.HasValue = true;
            }
            if ((s.HasKey("stats") 
                        || ((stats != default(OptionalArrayOfRankEntryStat)) 
                        && stats.HasValue)))
            {
                s.SerializeArray("stats", ref stats.Value);
                stats.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardPlayerAssignmentRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string boardId;
        public OptionalBool joinBoard = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("boardId", ref boardId);
            if ((s.HasKey("joinBoard") 
                        || ((joinBoard != default(OptionalBool)) 
                        && joinBoard.HasValue)))
            {
                s.Serialize("joinBoard", ref joinBoard.Value);
                joinBoard.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardPlayerRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long dbid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("dbid", ref dbid);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardListRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalInt limit = new OptionalInt();
        public OptionalString prefix = new OptionalString();
        public OptionalInt skip = new OptionalInt();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("limit") 
                        || ((limit != default(OptionalInt)) 
                        && limit.HasValue)))
            {
                s.Serialize("limit", ref limit.Value);
                limit.HasValue = true;
            }
            if ((s.HasKey("prefix") 
                        || ((prefix != default(OptionalString)) 
                        && prefix.HasValue)))
            {
                s.Serialize("prefix", ref prefix.Value);
                prefix.HasValue = true;
            }
            if ((s.HasKey("skip") 
                        || ((skip != default(OptionalInt)) 
                        && skip.HasValue)))
            {
                s.Serialize("skip", ref skip.Value);
                skip.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardAssignmentInfo : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string leaderboardId;
        public long playerId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("leaderboardId", ref leaderboardId);
            s.Serialize("playerId", ref playerId);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardListResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] nameList;
        public int offset;
        public int total;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("nameList", ref nameList);
            s.Serialize("offset", ref offset);
            s.Serialize("total", ref total);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderBoardView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long boardSize;
        public string lbId;
        public OptionalRankEntry rankgt = new OptionalRankEntry();
        public RankEntry[] rankings;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("boardSize", ref boardSize);
            s.Serialize("lbId", ref lbId);
            if ((s.HasKey("rankgt") 
                        || ((rankgt != default(OptionalRankEntry)) 
                        && rankgt.HasValue)))
            {
                s.Serialize("rankgt", ref rankgt.Value);
                rankgt.HasValue = true;
            }
            s.SerializeArray("rankings", ref rankings);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardPartitionInfo : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool isEmpty;
        public string leaderboardId;
        public OptionalInt partition = new OptionalInt();
        public long playerId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("isEmpty", ref isEmpty);
            s.Serialize("leaderboardId", ref leaderboardId);
            if ((s.HasKey("partition") 
                        || ((partition != default(OptionalInt)) 
                        && partition.HasValue)))
            {
                s.Serialize("partition", ref partition.Value);
                partition.HasValue = true;
            }
            s.Serialize("playerId", ref playerId);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardPartitionRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long playerId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("playerId", ref playerId);
        }
    }
    [System.SerializableAttribute()]
    public partial class OrderRule : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public int o;
        public string v;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("o", ref o);
            s.Serialize("v", ref v);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardMembershipRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long playerId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("playerId", ref playerId);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardRemoveCacheEntryRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long playerId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("playerId", ref playerId);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardGetRanksRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string ids;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("ids", ref ids);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardApiViewRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong focus = new OptionalLong();
        public OptionalBool friends = new OptionalBool();
        public OptionalInt from = new OptionalInt();
        public OptionalBool guild = new OptionalBool();
        public OptionalInt max = new OptionalInt();
        public OptionalLong outlier = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("focus") 
                        || ((focus != default(OptionalLong)) 
                        && focus.HasValue)))
            {
                s.Serialize("focus", ref focus.Value);
                focus.HasValue = true;
            }
            if ((s.HasKey("friends") 
                        || ((friends != default(OptionalBool)) 
                        && friends.HasValue)))
            {
                s.Serialize("friends", ref friends.Value);
                friends.HasValue = true;
            }
            if ((s.HasKey("from") 
                        || ((from != default(OptionalInt)) 
                        && from.HasValue)))
            {
                s.Serialize("from", ref from.Value);
                from.HasValue = true;
            }
            if ((s.HasKey("guild") 
                        || ((guild != default(OptionalBool)) 
                        && guild.HasValue)))
            {
                s.Serialize("guild", ref guild.Value);
                guild.HasValue = true;
            }
            if ((s.HasKey("max") 
                        || ((max != default(OptionalInt)) 
                        && max.HasValue)))
            {
                s.Serialize("max", ref max.Value);
                max.HasValue = true;
            }
            if ((s.HasKey("outlier") 
                        || ((outlier != default(OptionalLong)) 
                        && outlier.HasValue)))
            {
                s.Serialize("outlier", ref outlier.Value);
                outlier.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class MetadataView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLeaderboardCohortSettings cohortSettings = new OptionalLeaderboardCohortSettings();
        public bool cohorted;
        public OptionalArrayOfString derivatives = new OptionalArrayOfString();
        public OptionalLong expiration = new OptionalLong();
        public OptionalLong freezeTime = new OptionalLong();
        public bool frozen;
        public OptionalInt maxEntries = new OptionalInt();
        public string parentLeaderboard;
        public bool partitioned;
        public OptionalClientPermission permissions = new OptionalClientPermission();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("cohortSettings") 
                        || ((cohortSettings != default(OptionalLeaderboardCohortSettings)) 
                        && cohortSettings.HasValue)))
            {
                s.Serialize("cohortSettings", ref cohortSettings.Value);
                cohortSettings.HasValue = true;
            }
            s.Serialize("cohorted", ref cohorted);
            if ((s.HasKey("derivatives") 
                        || ((derivatives != default(OptionalArrayOfString)) 
                        && derivatives.HasValue)))
            {
                s.SerializeArray("derivatives", ref derivatives.Value);
                derivatives.HasValue = true;
            }
            if ((s.HasKey("expiration") 
                        || ((expiration != default(OptionalLong)) 
                        && expiration.HasValue)))
            {
                s.Serialize("expiration", ref expiration.Value);
                expiration.HasValue = true;
            }
            if ((s.HasKey("freezeTime") 
                        || ((freezeTime != default(OptionalLong)) 
                        && freezeTime.HasValue)))
            {
                s.Serialize("freezeTime", ref freezeTime.Value);
                freezeTime.HasValue = true;
            }
            s.Serialize("frozen", ref frozen);
            if ((s.HasKey("maxEntries") 
                        || ((maxEntries != default(OptionalInt)) 
                        && maxEntries.HasValue)))
            {
                s.Serialize("maxEntries", ref maxEntries.Value);
                maxEntries.HasValue = true;
            }
            s.Serialize("parentLeaderboard", ref parentLeaderboard);
            s.Serialize("partitioned", ref partitioned);
            if ((s.HasKey("permissions") 
                        || ((permissions != default(OptionalClientPermission)) 
                        && permissions.HasValue)))
            {
                s.Serialize("permissions", ref permissions.Value);
                permissions.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class MatchMakingRanking : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long gt;
        public bool isUnranked;
        public int rank;
        public MapOfString variables = new MapOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("gt", ref gt);
            s.Serialize("isUnranked", ref isUnranked);
            s.Serialize("rank", ref rank);
            s.SerializeDictionary<MapOfString, string>("variables", ref variables);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderBoardViewResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public LeaderBoardView lb = new LeaderBoardView();
        public string result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("lb", ref lb);
            s.Serialize("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardDetails : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string fullName;
        public string lbid;
        public OptionalMetadataView metaData = new OptionalMetadataView();
        public int numberOfEntries;
        public OptionalOrderRules orules = new OptionalOrderRules();
        public LeaderBoardView view = new LeaderBoardView();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("fullName", ref fullName);
            s.Serialize("lbid", ref lbid);
            if ((s.HasKey("metaData") 
                        || ((metaData != default(OptionalMetadataView)) 
                        && metaData.HasValue)))
            {
                s.Serialize("metaData", ref metaData.Value);
                metaData.HasValue = true;
            }
            s.Serialize("numberOfEntries", ref numberOfEntries);
            if ((s.HasKey("orules") 
                        || ((orules != default(OptionalOrderRules)) 
                        && orules.HasValue)))
            {
                s.Serialize("orules", ref orules.Value);
                orules.HasValue = true;
            }
            s.Serialize("view", ref view);
        }
    }
    [System.SerializableAttribute()]
    public partial class OrderRules : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OrderRule[] orules;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("orules", ref orules);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardRemoveEntryRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
        }
    }
    [System.SerializableAttribute()]
    public partial class MatchMakingMatchesPvpResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MatchMakingRanking playerRank = new MatchMakingRanking();
        public string result;
        public int totalEntries;
        public MatchMakingWindowResp[] windows;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("playerRank", ref playerRank);
            s.Serialize("result", ref result);
            s.Serialize("totalEntries", ref totalEntries);
            s.SerializeArray("windows", ref windows);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardGetMatchRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public int poolSize;
        public int windowSize;
        public int windows;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("poolSize", ref poolSize);
            s.Serialize("windowSize", ref windowSize);
            s.Serialize("windows", ref windows);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardCreateRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLeaderboardCohortSettings cohortSettings = new OptionalLeaderboardCohortSettings();
        public OptionalArrayOfString derivatives = new OptionalArrayOfString();
        public OptionalLong freezeTime = new OptionalLong();
        public OptionalInt maxEntries = new OptionalInt();
        public OptionalBool partitioned = new OptionalBool();
        public OptionalClientPermission permissions = new OptionalClientPermission();
        public OptionalString scoreName = new OptionalString();
        public bool sharded;
        public OptionalLong ttl = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("cohortSettings") 
                        || ((cohortSettings != default(OptionalLeaderboardCohortSettings)) 
                        && cohortSettings.HasValue)))
            {
                s.Serialize("cohortSettings", ref cohortSettings.Value);
                cohortSettings.HasValue = true;
            }
            if ((s.HasKey("derivatives") 
                        || ((derivatives != default(OptionalArrayOfString)) 
                        && derivatives.HasValue)))
            {
                s.SerializeArray("derivatives", ref derivatives.Value);
                derivatives.HasValue = true;
            }
            if ((s.HasKey("freezeTime") 
                        || ((freezeTime != default(OptionalLong)) 
                        && freezeTime.HasValue)))
            {
                s.Serialize("freezeTime", ref freezeTime.Value);
                freezeTime.HasValue = true;
            }
            if ((s.HasKey("maxEntries") 
                        || ((maxEntries != default(OptionalInt)) 
                        && maxEntries.HasValue)))
            {
                s.Serialize("maxEntries", ref maxEntries.Value);
                maxEntries.HasValue = true;
            }
            if ((s.HasKey("partitioned") 
                        || ((partitioned != default(OptionalBool)) 
                        && partitioned.HasValue)))
            {
                s.Serialize("partitioned", ref partitioned.Value);
                partitioned.HasValue = true;
            }
            if ((s.HasKey("permissions") 
                        || ((permissions != default(OptionalClientPermission)) 
                        && permissions.HasValue)))
            {
                s.Serialize("permissions", ref permissions.Value);
                permissions.HasValue = true;
            }
            if ((s.HasKey("scoreName") 
                        || ((scoreName != default(OptionalString)) 
                        && scoreName.HasValue)))
            {
                s.Serialize("scoreName", ref scoreName.Value);
                scoreName.HasValue = true;
            }
            s.Serialize("sharded", ref sharded);
            if ((s.HasKey("ttl") 
                        || ((ttl != default(OptionalLong)) 
                        && ttl.HasValue)))
            {
                s.Serialize("ttl", ref ttl.Value);
                ttl.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardDetailsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalInt from = new OptionalInt();
        public OptionalInt max = new OptionalInt();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("from") 
                        || ((from != default(OptionalInt)) 
                        && from.HasValue)))
            {
                s.Serialize("from", ref from.Value);
                from.HasValue = true;
            }
            if ((s.HasKey("max") 
                        || ((max != default(OptionalInt)) 
                        && max.HasValue)))
            {
                s.Serialize("max", ref max.Value);
                max.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class MatchMakingWindowResp : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public int difficulty;
        public MatchMakingRanking[] matches;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("difficulty", ref difficulty);
            s.SerializeArray("matches", ref matches);
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardSwapRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long delta;
        public OptionalLong loserId = new OptionalLong();
        public long swapBase;
        public OptionalLong winnerId = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("delta", ref delta);
            if ((s.HasKey("loserId") 
                        || ((loserId != default(OptionalLong)) 
                        && loserId.HasValue)))
            {
                s.Serialize("loserId", ref loserId.Value);
                loserId.HasValue = true;
            }
            s.Serialize("swapBase", ref swapBase);
            if ((s.HasKey("winnerId") 
                        || ((winnerId != default(OptionalLong)) 
                        && winnerId.HasValue)))
            {
                s.Serialize("winnerId", ref winnerId.Value);
                winnerId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardAddRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long id;
        public OptionalBool increment = new OptionalBool();
        public OptionalDouble maxScore = new OptionalDouble();
        public OptionalDouble minScore = new OptionalDouble();
        public double score;
        public OptionalMapOfString stats = new OptionalMapOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            if ((s.HasKey("increment") 
                        || ((increment != default(OptionalBool)) 
                        && increment.HasValue)))
            {
                s.Serialize("increment", ref increment.Value);
                increment.HasValue = true;
            }
            if ((s.HasKey("maxScore") 
                        || ((maxScore != default(OptionalDouble)) 
                        && maxScore.HasValue)))
            {
                s.Serialize("maxScore", ref maxScore.Value);
                maxScore.HasValue = true;
            }
            if ((s.HasKey("minScore") 
                        || ((minScore != default(OptionalDouble)) 
                        && minScore.HasValue)))
            {
                s.Serialize("minScore", ref minScore.Value);
                minScore.HasValue = true;
            }
            s.Serialize("score", ref score);
            if ((s.HasKey("stats") 
                        || ((stats != default(OptionalMapOfString)) 
                        && stats.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("stats", ref stats.Value);
                stats.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class LeaderboardMembershipResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class PasswordUpdateConfirmation : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string code;
        public OptionalString email = new OptionalString();
        public string newPassword;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("code", ref code);
            if ((s.HasKey("email") 
                        || ((email != default(OptionalString)) 
                        && email.HasValue)))
            {
                s.Serialize("email", ref email.Value);
                email.HasValue = true;
            }
            s.Serialize("newPassword", ref newPassword);
        }
    }
    [System.SerializableAttribute()]
    public partial class DeviceIdAvailableRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string deviceId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("deviceId", ref deviceId);
        }
    }
    [System.SerializableAttribute()]
    public partial class AccountUpdate : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString country = new OptionalString();
        public OptionalString deviceId = new OptionalString();
        public OptionalArrayOfExternalIdentity external = new OptionalArrayOfExternalIdentity();
        public OptionalGamerTagAssociation gamerTagAssoc = new OptionalGamerTagAssociation();
        public bool hasThirdPartyToken;
        public OptionalString language = new OptionalString();
        public OptionalString thirdParty = new OptionalString();
        public OptionalString token = new OptionalString();
        public OptionalString userName = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("country") 
                        || ((country != default(OptionalString)) 
                        && country.HasValue)))
            {
                s.Serialize("country", ref country.Value);
                country.HasValue = true;
            }
            if ((s.HasKey("deviceId") 
                        || ((deviceId != default(OptionalString)) 
                        && deviceId.HasValue)))
            {
                s.Serialize("deviceId", ref deviceId.Value);
                deviceId.HasValue = true;
            }
            if ((s.HasKey("external") 
                        || ((external != default(OptionalArrayOfExternalIdentity)) 
                        && external.HasValue)))
            {
                s.SerializeArray("external", ref external.Value);
                external.HasValue = true;
            }
            if ((s.HasKey("gamerTagAssoc") 
                        || ((gamerTagAssoc != default(OptionalGamerTagAssociation)) 
                        && gamerTagAssoc.HasValue)))
            {
                s.Serialize("gamerTagAssoc", ref gamerTagAssoc.Value);
                gamerTagAssoc.HasValue = true;
            }
            s.Serialize("hasThirdPartyToken", ref hasThirdPartyToken);
            if ((s.HasKey("language") 
                        || ((language != default(OptionalString)) 
                        && language.HasValue)))
            {
                s.Serialize("language", ref language.Value);
                language.HasValue = true;
            }
            if ((s.HasKey("thirdParty") 
                        || ((thirdParty != default(OptionalString)) 
                        && thirdParty.HasValue)))
            {
                s.Serialize("thirdParty", ref thirdParty.Value);
                thirdParty.HasValue = true;
            }
            if ((s.HasKey("token") 
                        || ((token != default(OptionalString)) 
                        && token.HasValue)))
            {
                s.Serialize("token", ref token.Value);
                token.HasValue = true;
            }
            if ((s.HasKey("userName") 
                        || ((userName != default(OptionalString)) 
                        && userName.HasValue)))
            {
                s.Serialize("userName", ref userName.Value);
                userName.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class EmailUpdateRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString codeType = new OptionalString();
        public string newEmail;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("codeType") 
                        || ((codeType != default(OptionalString)) 
                        && codeType.HasValue)))
            {
                s.Serialize("codeType", ref codeType.Value);
                codeType.HasValue = true;
            }
            s.Serialize("newEmail", ref newEmail);
        }
    }
    [System.SerializableAttribute()]
    public partial class ThirdPartyAssociation : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string appId;
        public OptionalString email = new OptionalString();
        public MapOfString meta = new MapOfString();
        public string name;
        public string userAppId;
        public OptionalString userBusinessId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("appId", ref appId);
            if ((s.HasKey("email") 
                        || ((email != default(OptionalString)) 
                        && email.HasValue)))
            {
                s.Serialize("email", ref email.Value);
                email.HasValue = true;
            }
            s.SerializeDictionary<MapOfString, string>("meta", ref meta);
            s.Serialize("name", ref name);
            s.Serialize("userAppId", ref userAppId);
            if ((s.HasKey("userBusinessId") 
                        || ((userBusinessId != default(OptionalString)) 
                        && userBusinessId.HasValue)))
            {
                s.Serialize("userBusinessId", ref userBusinessId.Value);
                userBusinessId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class DeleteDevicesRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfString deviceIds = new OptionalArrayOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("deviceIds") 
                        || ((deviceIds != default(OptionalArrayOfString)) 
                        && deviceIds.HasValue)))
            {
                s.SerializeArray("deviceIds", ref deviceIds.Value);
                deviceIds.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class AccountPersonallyIdentifiableInformationResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Account account = new Account();
        public ListAuditResponse paymentAudits = new ListAuditResponse();
        public StatsResponse[] stats;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("account", ref account);
            s.Serialize("paymentAudits", ref paymentAudits);
            s.SerializeArray("stats", ref stats);
        }
    }
    [System.SerializableAttribute()]
    public partial class AccountPortalView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString email = new OptionalString();
        public OptionalArrayOfExternalIdentity external = new OptionalArrayOfExternalIdentity();
        public long id;
        public OptionalString language = new OptionalString();
        public OptionalString roleString = new OptionalString();
        public OptionalArrayOfRoleMapping roles = new OptionalArrayOfRoleMapping();
        public string[] scopes;
        public string[] thirdPartyAppAssociations;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("email") 
                        || ((email != default(OptionalString)) 
                        && email.HasValue)))
            {
                s.Serialize("email", ref email.Value);
                email.HasValue = true;
            }
            if ((s.HasKey("external") 
                        || ((external != default(OptionalArrayOfExternalIdentity)) 
                        && external.HasValue)))
            {
                s.SerializeArray("external", ref external.Value);
                external.HasValue = true;
            }
            s.Serialize("id", ref id);
            if ((s.HasKey("language") 
                        || ((language != default(OptionalString)) 
                        && language.HasValue)))
            {
                s.Serialize("language", ref language.Value);
                language.HasValue = true;
            }
            if ((s.HasKey("roleString") 
                        || ((roleString != default(OptionalString)) 
                        && roleString.HasValue)))
            {
                s.Serialize("roleString", ref roleString.Value);
                roleString.HasValue = true;
            }
            if ((s.HasKey("roles") 
                        || ((roles != default(OptionalArrayOfRoleMapping)) 
                        && roles.HasValue)))
            {
                s.SerializeArray("roles", ref roles.Value);
                roles.HasValue = true;
            }
            s.SerializeArray("scopes", ref scopes);
            s.SerializeArray("thirdPartyAppAssociations", ref thirdPartyAppAssociations);
        }
    }
    [System.SerializableAttribute()]
    public partial class SearchAccountsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public int page;
        public int pagesize;
        public string query;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("page", ref page);
            s.Serialize("pagesize", ref pagesize);
            s.Serialize("query", ref query);
        }
    }
    [System.SerializableAttribute()]
    public partial class PasswordUpdateRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString codeType = new OptionalString();
        public string email;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("codeType") 
                        || ((codeType != default(OptionalString)) 
                        && codeType.HasValue)))
            {
                s.Serialize("codeType", ref codeType.Value);
                codeType.HasValue = true;
            }
            s.Serialize("email", ref email);
        }
    }
    [System.SerializableAttribute()]
    public partial class PaymentAuditEntryViewModel : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong created = new OptionalLong();
        public PaymentDetailsEntryViewModel details = new PaymentDetailsEntryViewModel();
        public EntitlementGenerator[] entitlements;
        public long gt;
        public PaymentHistoryEntryViewModel[] history;
        public OptionalArrayOfCurrencyChange obtainCurrency = new OptionalArrayOfCurrencyChange();
        public OptionalArrayOfItemCreateRequest obtainItems = new OptionalArrayOfItemCreateRequest();
        public string providerid;
        public string providername;
        public OptionalString replayGuardValue = new OptionalString();
        public long txid;
        public string txstate;
        public OptionalLong updated = new OptionalLong();
        public OptionalString version = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("created") 
                        || ((created != default(OptionalLong)) 
                        && created.HasValue)))
            {
                s.Serialize("created", ref created.Value);
                created.HasValue = true;
            }
            s.Serialize("details", ref details);
            s.SerializeArray("entitlements", ref entitlements);
            s.Serialize("gt", ref gt);
            s.SerializeArray("history", ref history);
            if ((s.HasKey("obtainCurrency") 
                        || ((obtainCurrency != default(OptionalArrayOfCurrencyChange)) 
                        && obtainCurrency.HasValue)))
            {
                s.SerializeArray("obtainCurrency", ref obtainCurrency.Value);
                obtainCurrency.HasValue = true;
            }
            if ((s.HasKey("obtainItems") 
                        || ((obtainItems != default(OptionalArrayOfItemCreateRequest)) 
                        && obtainItems.HasValue)))
            {
                s.SerializeArray("obtainItems", ref obtainItems.Value);
                obtainItems.HasValue = true;
            }
            s.Serialize("providerid", ref providerid);
            s.Serialize("providername", ref providername);
            if ((s.HasKey("replayGuardValue") 
                        || ((replayGuardValue != default(OptionalString)) 
                        && replayGuardValue.HasValue)))
            {
                s.Serialize("replayGuardValue", ref replayGuardValue.Value);
                replayGuardValue.HasValue = true;
            }
            s.Serialize("txid", ref txid);
            s.Serialize("txstate", ref txstate);
            if ((s.HasKey("updated") 
                        || ((updated != default(OptionalLong)) 
                        && updated.HasValue)))
            {
                s.Serialize("updated", ref updated.Value);
                updated.HasValue = true;
            }
            if ((s.HasKey("version") 
                        || ((version != default(OptionalString)) 
                        && version.HasValue)))
            {
                s.Serialize("version", ref version.Value);
                version.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ExternalIdentityAvailableApiRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString provider_namespace = new OptionalString();
        public string provider_service;
        public string user_id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("provider_namespace") 
                        || ((provider_namespace != default(OptionalString)) 
                        && provider_namespace.HasValue)))
            {
                s.Serialize("provider_namespace", ref provider_namespace.Value);
                provider_namespace.HasValue = true;
            }
            s.Serialize("provider_service", ref provider_service);
            s.Serialize("user_id", ref user_id);
        }
    }
    [System.SerializableAttribute()]
    public partial class AccountPlayerView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] deviceIds;
        public OptionalString email = new OptionalString();
        public OptionalArrayOfExternalIdentity external = new OptionalArrayOfExternalIdentity();
        public long id;
        public OptionalString language = new OptionalString();
        public string[] scopes;
        public string[] thirdPartyAppAssociations;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("deviceIds", ref deviceIds);
            if ((s.HasKey("email") 
                        || ((email != default(OptionalString)) 
                        && email.HasValue)))
            {
                s.Serialize("email", ref email.Value);
                email.HasValue = true;
            }
            if ((s.HasKey("external") 
                        || ((external != default(OptionalArrayOfExternalIdentity)) 
                        && external.HasValue)))
            {
                s.SerializeArray("external", ref external.Value);
                external.HasValue = true;
            }
            s.Serialize("id", ref id);
            if ((s.HasKey("language") 
                        || ((language != default(OptionalString)) 
                        && language.HasValue)))
            {
                s.Serialize("language", ref language.Value);
                language.HasValue = true;
            }
            s.SerializeArray("scopes", ref scopes);
            s.SerializeArray("thirdPartyAppAssociations", ref thirdPartyAppAssociations);
        }
    }
    [System.SerializableAttribute()]
    public partial class PaymentHistoryEntryViewModel : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string change;
        public OptionalString data = new OptionalString();
        public OptionalString timestamp = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("change", ref change);
            if ((s.HasKey("data") 
                        || ((data != default(OptionalString)) 
                        && data.HasValue)))
            {
                s.Serialize("data", ref data.Value);
                data.HasValue = true;
            }
            if ((s.HasKey("timestamp") 
                        || ((timestamp != default(OptionalString)) 
                        && timestamp.HasValue)))
            {
                s.Serialize("timestamp", ref timestamp.Value);
                timestamp.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class AccountAvailableResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool available;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("available", ref available);
        }
    }
    [System.SerializableAttribute()]
    public partial class EntitlementGenerator : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string action;
        public OptionalEntitlementClaimWindow claimWindow = new OptionalEntitlementClaimWindow();
        public OptionalMapOfString paramsKey = new OptionalMapOfString();
        public OptionalInt quantity = new OptionalInt();
        public OptionalString specialization = new OptionalString();
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("action", ref action);
            if ((s.HasKey("claimWindow") 
                        || ((claimWindow != default(OptionalEntitlementClaimWindow)) 
                        && claimWindow.HasValue)))
            {
                s.Serialize("claimWindow", ref claimWindow.Value);
                claimWindow.HasValue = true;
            }
            if ((s.HasKey("params") 
                        || ((paramsKey != default(OptionalMapOfString)) 
                        && paramsKey.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("params", ref paramsKey.Value);
                paramsKey.HasValue = true;
            }
            if ((s.HasKey("quantity") 
                        || ((quantity != default(OptionalInt)) 
                        && quantity.HasValue)))
            {
                s.Serialize("quantity", ref quantity.Value);
                quantity.HasValue = true;
            }
            if ((s.HasKey("specialization") 
                        || ((specialization != default(OptionalString)) 
                        && specialization.HasValue)))
            {
                s.Serialize("specialization", ref specialization.Value);
                specialization.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class StatsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long id;
        public MapOfString stats = new MapOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            s.SerializeDictionary<MapOfString, string>("stats", ref stats);
        }
    }
    [System.SerializableAttribute()]
    public partial class AttachExternalIdentityApiResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString challenge_token = new OptionalString();
        public string result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("challenge_token") 
                        || ((challenge_token != default(OptionalString)) 
                        && challenge_token.HasValue)))
            {
                s.Serialize("challenge_token", ref challenge_token.Value);
                challenge_token.HasValue = true;
            }
            s.Serialize("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class RoleMapping : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string projectId;
        public string role;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("projectId", ref projectId);
            s.Serialize("role", ref role);
        }
    }
    [System.SerializableAttribute()]
    public partial class AccountRegistration : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string email;
        public string password;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("email", ref email);
            s.Serialize("password", ref password);
        }
    }
    [System.SerializableAttribute()]
    public partial class AttachExternalIdentityApiRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalChallengeSolution challenge_solution = new OptionalChallengeSolution();
        public string external_token;
        public OptionalString provider_namespace = new OptionalString();
        public string provider_service;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("challenge_solution") 
                        || ((challenge_solution != default(OptionalChallengeSolution)) 
                        && challenge_solution.HasValue)))
            {
                s.Serialize("challenge_solution", ref challenge_solution.Value);
                challenge_solution.HasValue = true;
            }
            s.Serialize("external_token", ref external_token);
            if ((s.HasKey("provider_namespace") 
                        || ((provider_namespace != default(OptionalString)) 
                        && provider_namespace.HasValue)))
            {
                s.Serialize("provider_namespace", ref provider_namespace.Value);
                provider_namespace.HasValue = true;
            }
            s.Serialize("provider_service", ref provider_service);
        }
    }
    [System.SerializableAttribute()]
    public partial class EmailUpdateConfirmation : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string code;
        public string password;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("code", ref code);
            s.Serialize("password", ref password);
        }
    }
    [System.SerializableAttribute()]
    public partial class ExternalIdentity : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string providerNamespace;
        public string providerService;
        public string userId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("providerNamespace", ref providerNamespace);
            s.Serialize("providerService", ref providerService);
            s.Serialize("userId", ref userId);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetAdminsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public AccountPortalView[] accounts;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("accounts", ref accounts);
        }
    }
    [System.SerializableAttribute()]
    public partial class PaymentDetailsEntryViewModel : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString category = new OptionalString();
        public string gameplace;
        public OptionalString localCurrency = new OptionalString();
        public OptionalString localPrice = new OptionalString();
        public string name;
        public int price;
        public string providerProductId;
        public int quantity;
        public string reference;
        public string sku;
        public OptionalString subcategory = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("category") 
                        || ((category != default(OptionalString)) 
                        && category.HasValue)))
            {
                s.Serialize("category", ref category.Value);
                category.HasValue = true;
            }
            s.Serialize("gameplace", ref gameplace);
            if ((s.HasKey("localCurrency") 
                        || ((localCurrency != default(OptionalString)) 
                        && localCurrency.HasValue)))
            {
                s.Serialize("localCurrency", ref localCurrency.Value);
                localCurrency.HasValue = true;
            }
            if ((s.HasKey("localPrice") 
                        || ((localPrice != default(OptionalString)) 
                        && localPrice.HasValue)))
            {
                s.Serialize("localPrice", ref localPrice.Value);
                localPrice.HasValue = true;
            }
            s.Serialize("name", ref name);
            s.Serialize("price", ref price);
            s.Serialize("providerProductId", ref providerProductId);
            s.Serialize("quantity", ref quantity);
            s.Serialize("reference", ref reference);
            s.Serialize("sku", ref sku);
            if ((s.HasKey("subcategory") 
                        || ((subcategory != default(OptionalString)) 
                        && subcategory.HasValue)))
            {
                s.Serialize("subcategory", ref subcategory.Value);
                subcategory.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class CurrencyChange : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long amount;
        public OptionalLong originalAmount = new OptionalLong();
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("amount", ref amount);
            if ((s.HasKey("originalAmount") 
                        || ((originalAmount != default(OptionalLong)) 
                        && originalAmount.HasValue)))
            {
                s.Serialize("originalAmount", ref originalAmount.Value);
                originalAmount.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class AddAccountRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string email;
        public OptionalString role = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("email", ref email);
            if ((s.HasKey("role") 
                        || ((role != default(OptionalString)) 
                        && role.HasValue)))
            {
                s.Serialize("role", ref role.Value);
                role.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class EntitlementClaimWindow : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long close;
        public long open;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("close", ref close);
            s.Serialize("open", ref open);
        }
    }
    [System.SerializableAttribute()]
    public partial class GamerTagAssociation : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long gamerTag;
        public string projectId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("gamerTag", ref gamerTag);
            s.Serialize("projectId", ref projectId);
        }
    }
    [System.SerializableAttribute()]
    public partial class ChallengeSolution : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string challenge_token;
        public string solution;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("challenge_token", ref challenge_token);
            s.Serialize("solution", ref solution);
        }
    }
    [System.SerializableAttribute()]
    public partial class DeleteExternalIdentityApiRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString provider_namespace = new OptionalString();
        public string provider_service;
        public string user_id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("provider_namespace") 
                        || ((provider_namespace != default(OptionalString)) 
                        && provider_namespace.HasValue)))
            {
                s.Serialize("provider_namespace", ref provider_namespace.Value);
                provider_namespace.HasValue = true;
            }
            s.Serialize("provider_service", ref provider_service);
            s.Serialize("user_id", ref user_id);
        }
    }
    [System.SerializableAttribute()]
    public partial class ThirdPartyAvailableRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string thirdParty;
        public string token;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("thirdParty", ref thirdParty);
            s.Serialize("token", ref token);
        }
    }
    [System.SerializableAttribute()]
    public partial class AccountSearchResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Account[] accounts;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("accounts", ref accounts);
        }
    }
    [System.SerializableAttribute()]
    public partial class ListAuditResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public PaymentAuditEntryViewModel[] audits;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("audits", ref audits);
        }
    }
    [System.SerializableAttribute()]
    public partial class AccountAvailableRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string email;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("email", ref email);
        }
    }
    [System.SerializableAttribute()]
    public partial class FindAccountRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string query;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("query", ref query);
        }
    }
    [System.SerializableAttribute()]
    public partial class Account : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString country = new OptionalString();
        public long createdTimeMillis;
        public OptionalString deviceId = new OptionalString();
        public OptionalArrayOfString deviceIds = new OptionalArrayOfString();
        public OptionalString email = new OptionalString();
        public ExternalIdentity[] external;
        public GamerTagAssociation[] gamerTags;
        public OptionalLong heartbeat = new OptionalLong();
        public long id;
        public OptionalArrayOfInFlightMessage inFlight = new OptionalArrayOfInFlightMessage();
        public OptionalString language = new OptionalString();
        public OptionalString password = new OptionalString();
        public bool privilegedAccount;
        public OptionalString realmId = new OptionalString();
        public OptionalString roleString = new OptionalString();
        public OptionalArrayOfRoleMapping roles = new OptionalArrayOfRoleMapping();
        public ThirdPartyAssociation[] thirdParties;
        public long updatedTimeMillis;
        public OptionalString userName = new OptionalString();
        public OptionalBool wasMigrated = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("country") 
                        || ((country != default(OptionalString)) 
                        && country.HasValue)))
            {
                s.Serialize("country", ref country.Value);
                country.HasValue = true;
            }
            s.Serialize("createdTimeMillis", ref createdTimeMillis);
            if ((s.HasKey("deviceId") 
                        || ((deviceId != default(OptionalString)) 
                        && deviceId.HasValue)))
            {
                s.Serialize("deviceId", ref deviceId.Value);
                deviceId.HasValue = true;
            }
            if ((s.HasKey("deviceIds") 
                        || ((deviceIds != default(OptionalArrayOfString)) 
                        && deviceIds.HasValue)))
            {
                s.SerializeArray("deviceIds", ref deviceIds.Value);
                deviceIds.HasValue = true;
            }
            if ((s.HasKey("email") 
                        || ((email != default(OptionalString)) 
                        && email.HasValue)))
            {
                s.Serialize("email", ref email.Value);
                email.HasValue = true;
            }
            s.SerializeArray("external", ref external);
            s.SerializeArray("gamerTags", ref gamerTags);
            if ((s.HasKey("heartbeat") 
                        || ((heartbeat != default(OptionalLong)) 
                        && heartbeat.HasValue)))
            {
                s.Serialize("heartbeat", ref heartbeat.Value);
                heartbeat.HasValue = true;
            }
            s.Serialize("id", ref id);
            if ((s.HasKey("inFlight") 
                        || ((inFlight != default(OptionalArrayOfInFlightMessage)) 
                        && inFlight.HasValue)))
            {
                s.SerializeArray("inFlight", ref inFlight.Value);
                inFlight.HasValue = true;
            }
            if ((s.HasKey("language") 
                        || ((language != default(OptionalString)) 
                        && language.HasValue)))
            {
                s.Serialize("language", ref language.Value);
                language.HasValue = true;
            }
            if ((s.HasKey("password") 
                        || ((password != default(OptionalString)) 
                        && password.HasValue)))
            {
                s.Serialize("password", ref password.Value);
                password.HasValue = true;
            }
            s.Serialize("privilegedAccount", ref privilegedAccount);
            if ((s.HasKey("realmId") 
                        || ((realmId != default(OptionalString)) 
                        && realmId.HasValue)))
            {
                s.Serialize("realmId", ref realmId.Value);
                realmId.HasValue = true;
            }
            if ((s.HasKey("roleString") 
                        || ((roleString != default(OptionalString)) 
                        && roleString.HasValue)))
            {
                s.Serialize("roleString", ref roleString.Value);
                roleString.HasValue = true;
            }
            if ((s.HasKey("roles") 
                        || ((roles != default(OptionalArrayOfRoleMapping)) 
                        && roles.HasValue)))
            {
                s.SerializeArray("roles", ref roles.Value);
                roles.HasValue = true;
            }
            s.SerializeArray("thirdParties", ref thirdParties);
            s.Serialize("updatedTimeMillis", ref updatedTimeMillis);
            if ((s.HasKey("userName") 
                        || ((userName != default(OptionalString)) 
                        && userName.HasValue)))
            {
                s.Serialize("userName", ref userName.Value);
                userName.HasValue = true;
            }
            if ((s.HasKey("wasMigrated") 
                        || ((wasMigrated != default(OptionalBool)) 
                        && wasMigrated.HasValue)))
            {
                s.Serialize("wasMigrated", ref wasMigrated.Value);
                wasMigrated.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class AccountRolesReport : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long accountId;
        public string email;
        public RealmRolesReport[] realms;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("accountId", ref accountId);
            s.Serialize("email", ref email);
            s.SerializeArray("realms", ref realms);
        }
    }
    [System.SerializableAttribute()]
    public partial class DeleteThirdPartyAssociation : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string thirdParty;
        public string userAppId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("thirdParty", ref thirdParty);
            s.Serialize("userAppId", ref userAppId);
        }
    }
    [System.SerializableAttribute()]
    public partial class DeleteRole : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString realm = new OptionalString();
        public OptionalString role = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("realm") 
                        || ((realm != default(OptionalString)) 
                        && realm.HasValue)))
            {
                s.Serialize("realm", ref realm.Value);
                realm.HasValue = true;
            }
            if ((s.HasKey("role") 
                        || ((role != default(OptionalString)) 
                        && role.HasValue)))
            {
                s.Serialize("role", ref role.Value);
                role.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class UpdateRole : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString cid = new OptionalString();
        public OptionalString realm = new OptionalString();
        public OptionalString role = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("cid") 
                        || ((cid != default(OptionalString)) 
                        && cid.HasValue)))
            {
                s.Serialize("cid", ref cid.Value);
                cid.HasValue = true;
            }
            if ((s.HasKey("realm") 
                        || ((realm != default(OptionalString)) 
                        && realm.HasValue)))
            {
                s.Serialize("realm", ref realm.Value);
                realm.HasValue = true;
            }
            if ((s.HasKey("role") 
                        || ((role != default(OptionalString)) 
                        && role.HasValue)))
            {
                s.Serialize("role", ref role.Value);
                role.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class AvailableRolesResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] roles;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("roles", ref roles);
        }
    }
    [System.SerializableAttribute()]
    public partial class RealmRolesReport : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string realmDisplayName;
        public string realmName;
        public string[] roles;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("realmDisplayName", ref realmDisplayName);
            s.Serialize("realmName", ref realmName);
            s.SerializeArray("roles", ref roles);
        }
    }
    [System.SerializableAttribute()]
    public partial class TransferThirdPartyAssociation : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long fromAccountId;
        public ThirdPartyAssociation thirdParty = new ThirdPartyAssociation();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("fromAccountId", ref fromAccountId);
            s.Serialize("thirdParty", ref thirdParty);
        }
    }
    [System.SerializableAttribute()]
    public partial class StatUpdateRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalMapOfString add = new OptionalMapOfString();
        public OptionalBool emitAnalytics = new OptionalBool();
        public OptionalString objectId = new OptionalString();
        public OptionalMapOfString set = new OptionalMapOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("add") 
                        || ((add != default(OptionalMapOfString)) 
                        && add.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("add", ref add.Value);
                add.HasValue = true;
            }
            if ((s.HasKey("emitAnalytics") 
                        || ((emitAnalytics != default(OptionalBool)) 
                        && emitAnalytics.HasValue)))
            {
                s.Serialize("emitAnalytics", ref emitAnalytics.Value);
                emitAnalytics.HasValue = true;
            }
            if ((s.HasKey("objectId") 
                        || ((objectId != default(OptionalString)) 
                        && objectId.HasValue)))
            {
                s.Serialize("objectId", ref objectId.Value);
                objectId.HasValue = true;
            }
            if ((s.HasKey("set") 
                        || ((set != default(OptionalMapOfString)) 
                        && set.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("set", ref set.Value);
                set.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class StatsUnsubscribeRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string service;
        public OptionalArrayOfString subscriptions = new OptionalArrayOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("service", ref service);
            if ((s.HasKey("subscriptions") 
                        || ((subscriptions != default(OptionalArrayOfString)) 
                        && subscriptions.HasValue)))
            {
                s.SerializeArray("subscriptions", ref subscriptions.Value);
                subscriptions.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class StatsSubscribeRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string service;
        public string[] subscriptions;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("service", ref service);
            s.SerializeArray("subscriptions", ref subscriptions);
        }
    }
    [System.SerializableAttribute()]
    public partial class StatsSearchResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long[] ids;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("ids", ref ids);
        }
    }
    [System.SerializableAttribute()]
    public partial class NetworkSerializable : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class BatchReadStatsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString format = new OptionalString();
        public string objectIds;
        public OptionalString stats = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("format") 
                        || ((format != default(OptionalString)) 
                        && format.HasValue)))
            {
                s.Serialize("format", ref format.Value);
                format.HasValue = true;
            }
            s.Serialize("objectIds", ref objectIds);
            if ((s.HasKey("stats") 
                        || ((stats != default(OptionalString)) 
                        && stats.HasValue)))
            {
                s.Serialize("stats", ref stats.Value);
                stats.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class BatchSetStatsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public StatUpdateRequest[] updates;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("updates", ref updates);
        }
    }
    [System.SerializableAttribute()]
    public partial class StatsSearchRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string access;
        public StatsSearchCriteria[] criteria;
        public string domain;
        public string objectType;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("access", ref access);
            s.SerializeArray("criteria", ref criteria);
            s.Serialize("domain", ref domain);
            s.Serialize("objectType", ref objectType);
        }
    }
    [System.SerializableAttribute()]
    public partial class StatsSearchCriteria : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string rel;
        public string stat;
        public OptionalString value = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("rel", ref rel);
            s.Serialize("stat", ref stat);
            if ((s.HasKey("value") 
                        || ((value != default(OptionalString)) 
                        && value.HasValue)))
            {
                s.Serialize("value", ref value.Value);
                value.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class BatchReadStatsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public NetworkSerializable[] results;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("results", ref results);
        }
    }
    [System.SerializableAttribute()]
    public partial class SearchExtendedResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MapOfMapOfString gamerStats = new MapOfMapOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeDictionary<MapOfMapOfString, MapOfString>("gamerStats", ref gamerStats);
        }
    }
    [System.SerializableAttribute()]
    public partial class SearchExtendedRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string access;
        public StatsSearchCriteria[] criteria;
        public string domain;
        public string objectType;
        public string[] statKeys;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("access", ref access);
            s.SerializeArray("criteria", ref criteria);
            s.Serialize("domain", ref domain);
            s.Serialize("objectType", ref objectType);
            s.SerializeArray("statKeys", ref statKeys);
        }
    }
    [System.SerializableAttribute()]
    public partial class StatUpdateRequestStringListFormat : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfStatStringListEntry set = new OptionalArrayOfStatStringListEntry();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("set") 
                        || ((set != default(OptionalArrayOfStatStringListEntry)) 
                        && set.HasValue)))
            {
                s.SerializeArray("set", ref set.Value);
                set.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class StatRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString stats = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("stats") 
                        || ((stats != default(OptionalString)) 
                        && stats.HasValue)))
            {
                s.Serialize("stats", ref stats.Value);
                stats.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class StatStringListEntry : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string k;
        public string v;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("k", ref k);
            s.Serialize("v", ref v);
        }
    }
    [System.SerializableAttribute()]
    public partial class RewardsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public TournamentCurrencyReward[] rewardCurrencies;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("rewardCurrencies", ref rewardCurrencies);
        }
    }
    [System.SerializableAttribute()]
    public partial class GroupStatus : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfCompletedStatus completed = new OptionalArrayOfCompletedStatus();
        public string contentId;
        public long groupId;
        public int lastUpdateCycle;
        public int stage;
        public int tier;
        public string tournamentId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("completed") 
                        || ((completed != default(OptionalArrayOfCompletedStatus)) 
                        && completed.HasValue)))
            {
                s.SerializeArray("completed", ref completed.Value);
                completed.HasValue = true;
            }
            s.Serialize("contentId", ref contentId);
            s.Serialize("groupId", ref groupId);
            s.Serialize("lastUpdateCycle", ref lastUpdateCycle);
            s.Serialize("stage", ref stage);
            s.Serialize("tier", ref tier);
            s.Serialize("tournamentId", ref tournamentId);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetPlayerStatusRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString contentId = new OptionalString();
        public OptionalBool hasUnclaimedRewards = new OptionalBool();
        public OptionalString tournamentId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("contentId") 
                        || ((contentId != default(OptionalString)) 
                        && contentId.HasValue)))
            {
                s.Serialize("contentId", ref contentId.Value);
                contentId.HasValue = true;
            }
            if ((s.HasKey("hasUnclaimedRewards") 
                        || ((hasUnclaimedRewards != default(OptionalBool)) 
                        && hasUnclaimedRewards.HasValue)))
            {
                s.Serialize("hasUnclaimedRewards", ref hasUnclaimedRewards.Value);
                hasUnclaimedRewards.HasValue = true;
            }
            if ((s.HasKey("tournamentId") 
                        || ((tournamentId != default(OptionalString)) 
                        && tournamentId.HasValue)))
            {
                s.Serialize("tournamentId", ref tournamentId.Value);
                tournamentId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GetPlayerStatusResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public PlayerStatus[] statuses;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("statuses", ref statuses);
        }
    }
    [System.SerializableAttribute()]
    public partial class RewardsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString contentId = new OptionalString();
        public OptionalString tournamentId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("contentId") 
                        || ((contentId != default(OptionalString)) 
                        && contentId.HasValue)))
            {
                s.Serialize("contentId", ref contentId.Value);
                contentId.HasValue = true;
            }
            if ((s.HasKey("tournamentId") 
                        || ((tournamentId != default(OptionalString)) 
                        && tournamentId.HasValue)))
            {
                s.Serialize("tournamentId", ref tournamentId.Value);
                tournamentId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ScoreRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString contentId = new OptionalString();
        public OptionalBool increment = new OptionalBool();
        public long playerId;
        public double score;
        public OptionalMapOfString stats = new OptionalMapOfString();
        public string tournamentId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("contentId") 
                        || ((contentId != default(OptionalString)) 
                        && contentId.HasValue)))
            {
                s.Serialize("contentId", ref contentId.Value);
                contentId.HasValue = true;
            }
            if ((s.HasKey("increment") 
                        || ((increment != default(OptionalBool)) 
                        && increment.HasValue)))
            {
                s.Serialize("increment", ref increment.Value);
                increment.HasValue = true;
            }
            s.Serialize("playerId", ref playerId);
            s.Serialize("score", ref score);
            if ((s.HasKey("stats") 
                        || ((stats != default(OptionalMapOfString)) 
                        && stats.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("stats", ref stats.Value);
                stats.HasValue = true;
            }
            s.Serialize("tournamentId", ref tournamentId);
        }
    }
    [System.SerializableAttribute()]
    public partial class AdminGetPlayerStatusRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString contentId = new OptionalString();
        public OptionalBool hasUnclaimedRewards = new OptionalBool();
        public long playerId;
        public OptionalString tournamentId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("contentId") 
                        || ((contentId != default(OptionalString)) 
                        && contentId.HasValue)))
            {
                s.Serialize("contentId", ref contentId.Value);
                contentId.HasValue = true;
            }
            if ((s.HasKey("hasUnclaimedRewards") 
                        || ((hasUnclaimedRewards != default(OptionalBool)) 
                        && hasUnclaimedRewards.HasValue)))
            {
                s.Serialize("hasUnclaimedRewards", ref hasUnclaimedRewards.Value);
                hasUnclaimedRewards.HasValue = true;
            }
            s.Serialize("playerId", ref playerId);
            if ((s.HasKey("tournamentId") 
                        || ((tournamentId != default(OptionalString)) 
                        && tournamentId.HasValue)))
            {
                s.Serialize("tournamentId", ref tournamentId.Value);
                tournamentId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GetGroupStatusRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString contentId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("contentId") 
                        || ((contentId != default(OptionalString)) 
                        && contentId.HasValue)))
            {
                s.Serialize("contentId", ref contentId.Value);
                contentId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GetChampionsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ChampionScore[] entries;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("entries", ref entries);
        }
    }
    [System.SerializableAttribute()]
    public partial class TournamentClientView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string contentId;
        public int cycle;
        public string endTimeUtc;
        public long secondsRemaining;
        public string startTimeUtc;
        public string tournamentId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("contentId", ref contentId);
            s.Serialize("cycle", ref cycle);
            s.Serialize("endTimeUtc", ref endTimeUtc);
            s.Serialize("secondsRemaining", ref secondsRemaining);
            s.Serialize("startTimeUtc", ref startTimeUtc);
            s.Serialize("tournamentId", ref tournamentId);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetStatusForGroupsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string contentId;
        public GroupStatus[] statuses;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("contentId", ref contentId);
            s.SerializeArray("statuses", ref statuses);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetStandingsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString contentId = new OptionalString();
        public OptionalInt cycle = new OptionalInt();
        public OptionalLong focus = new OptionalLong();
        public OptionalInt from = new OptionalInt();
        public OptionalInt max = new OptionalInt();
        public string tournamentId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("contentId") 
                        || ((contentId != default(OptionalString)) 
                        && contentId.HasValue)))
            {
                s.Serialize("contentId", ref contentId.Value);
                contentId.HasValue = true;
            }
            if ((s.HasKey("cycle") 
                        || ((cycle != default(OptionalInt)) 
                        && cycle.HasValue)))
            {
                s.Serialize("cycle", ref cycle.Value);
                cycle.HasValue = true;
            }
            if ((s.HasKey("focus") 
                        || ((focus != default(OptionalLong)) 
                        && focus.HasValue)))
            {
                s.Serialize("focus", ref focus.Value);
                focus.HasValue = true;
            }
            if ((s.HasKey("from") 
                        || ((from != default(OptionalInt)) 
                        && from.HasValue)))
            {
                s.Serialize("from", ref from.Value);
                from.HasValue = true;
            }
            if ((s.HasKey("max") 
                        || ((max != default(OptionalInt)) 
                        && max.HasValue)))
            {
                s.Serialize("max", ref max.Value);
                max.HasValue = true;
            }
            s.Serialize("tournamentId", ref tournamentId);
        }
    }
    [System.SerializableAttribute()]
    public partial class TournamentEntry : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public TournamentCurrencyReward[] currencyRewards;
        public OptionalInt nextStageChange = new OptionalInt();
        public long playerId;
        public OptionalInt previousStageChange = new OptionalInt();
        public long rank;
        public double score;
        public int stage;
        public int stageChange;
        public int tier;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("currencyRewards", ref currencyRewards);
            if ((s.HasKey("nextStageChange") 
                        || ((nextStageChange != default(OptionalInt)) 
                        && nextStageChange.HasValue)))
            {
                s.Serialize("nextStageChange", ref nextStageChange.Value);
                nextStageChange.HasValue = true;
            }
            s.Serialize("playerId", ref playerId);
            if ((s.HasKey("previousStageChange") 
                        || ((previousStageChange != default(OptionalInt)) 
                        && previousStageChange.HasValue)))
            {
                s.Serialize("previousStageChange", ref previousStageChange.Value);
                previousStageChange.HasValue = true;
            }
            s.Serialize("rank", ref rank);
            s.Serialize("score", ref score);
            s.Serialize("stage", ref stage);
            s.Serialize("stageChange", ref stageChange);
            s.Serialize("tier", ref tier);
        }
    }
    [System.SerializableAttribute()]
    public partial class PlayerStatusUpdate : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalDouble score = new OptionalDouble();
        public OptionalInt stage = new OptionalInt();
        public OptionalInt tier = new OptionalInt();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("score") 
                        || ((score != default(OptionalDouble)) 
                        && score.HasValue)))
            {
                s.Serialize("score", ref score.Value);
                score.HasValue = true;
            }
            if ((s.HasKey("stage") 
                        || ((stage != default(OptionalInt)) 
                        && stage.HasValue)))
            {
                s.Serialize("stage", ref stage.Value);
                stage.HasValue = true;
            }
            if ((s.HasKey("tier") 
                        || ((tier != default(OptionalInt)) 
                        && tier.HasValue)))
            {
                s.Serialize("tier", ref tier.Value);
                tier.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class TournamentQueryResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public TournamentClientView[] tournaments;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("tournaments", ref tournaments);
        }
    }
    [System.SerializableAttribute()]
    public partial class PlayerStatus : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string contentId;
        public OptionalLong groupId = new OptionalLong();
        public int lastUpdateCycle;
        public long playerId;
        public int stage;
        public int tier;
        public string tournamentId;
        public TournamentCurrencyReward[] unclaimedRewards;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("contentId", ref contentId);
            if ((s.HasKey("groupId") 
                        || ((groupId != default(OptionalLong)) 
                        && groupId.HasValue)))
            {
                s.Serialize("groupId", ref groupId.Value);
                groupId.HasValue = true;
            }
            s.Serialize("lastUpdateCycle", ref lastUpdateCycle);
            s.Serialize("playerId", ref playerId);
            s.Serialize("stage", ref stage);
            s.Serialize("tier", ref tier);
            s.Serialize("tournamentId", ref tournamentId);
            s.SerializeArray("unclaimedRewards", ref unclaimedRewards);
        }
    }
    [System.SerializableAttribute()]
    public partial class CompletedStatus : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public int cycle;
        public int delta;
        public int stage;
        public int tier;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("cycle", ref cycle);
            s.Serialize("delta", ref delta);
            s.Serialize("stage", ref stage);
            s.Serialize("tier", ref tier);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetStandingsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public TournamentEntry[] entries;
        public OptionalTournamentEntry me = new OptionalTournamentEntry();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("entries", ref entries);
            if ((s.HasKey("me") 
                        || ((me != default(OptionalTournamentEntry)) 
                        && me.HasValue)))
            {
                s.Serialize("me", ref me.Value);
                me.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class TournamentQueryRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString contentId = new OptionalString();
        public OptionalInt cycle = new OptionalInt();
        public OptionalBool isRunning = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("contentId") 
                        || ((contentId != default(OptionalString)) 
                        && contentId.HasValue)))
            {
                s.Serialize("contentId", ref contentId.Value);
                contentId.HasValue = true;
            }
            if ((s.HasKey("cycle") 
                        || ((cycle != default(OptionalInt)) 
                        && cycle.HasValue)))
            {
                s.Serialize("cycle", ref cycle.Value);
                cycle.HasValue = true;
            }
            if ((s.HasKey("isRunning") 
                        || ((isRunning != default(OptionalBool)) 
                        && isRunning.HasValue)))
            {
                s.Serialize("isRunning", ref isRunning.Value);
                isRunning.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class TournamentCurrencyReward : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long amount;
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("amount", ref amount);
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class JoinRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString contentId = new OptionalString();
        public string tournamentId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("contentId") 
                        || ((contentId != default(OptionalString)) 
                        && contentId.HasValue)))
            {
                s.Serialize("contentId", ref contentId.Value);
                contentId.HasValue = true;
            }
            s.Serialize("tournamentId", ref tournamentId);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetGroupsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public TournamentGroupEntry[] entries;
        public OptionalTournamentGroupEntry focus = new OptionalTournamentGroupEntry();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("entries", ref entries);
            if ((s.HasKey("focus") 
                        || ((focus != default(OptionalTournamentGroupEntry)) 
                        && focus.HasValue)))
            {
                s.Serialize("focus", ref focus.Value);
                focus.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class TournamentGroupEntry : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public TournamentCurrencyReward[] currencyRewards;
        public long groupId;
        public long rank;
        public double score;
        public int stageChange;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("currencyRewards", ref currencyRewards);
            s.Serialize("groupId", ref groupId);
            s.Serialize("rank", ref rank);
            s.Serialize("score", ref score);
            s.Serialize("stageChange", ref stageChange);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetStatusForGroupsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string contentId;
        public long[] groupIds;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("contentId", ref contentId);
            s.SerializeArray("groupIds", ref groupIds);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetGroupStatusResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public GroupStatus[] statuses;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("statuses", ref statuses);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetGroupsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString contentId = new OptionalString();
        public OptionalInt cycle = new OptionalInt();
        public OptionalLong focus = new OptionalLong();
        public OptionalInt from = new OptionalInt();
        public OptionalInt max = new OptionalInt();
        public string tournamentId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("contentId") 
                        || ((contentId != default(OptionalString)) 
                        && contentId.HasValue)))
            {
                s.Serialize("contentId", ref contentId.Value);
                contentId.HasValue = true;
            }
            if ((s.HasKey("cycle") 
                        || ((cycle != default(OptionalInt)) 
                        && cycle.HasValue)))
            {
                s.Serialize("cycle", ref cycle.Value);
                cycle.HasValue = true;
            }
            if ((s.HasKey("focus") 
                        || ((focus != default(OptionalLong)) 
                        && focus.HasValue)))
            {
                s.Serialize("focus", ref focus.Value);
                focus.HasValue = true;
            }
            if ((s.HasKey("from") 
                        || ((from != default(OptionalInt)) 
                        && from.HasValue)))
            {
                s.Serialize("from", ref from.Value);
                from.HasValue = true;
            }
            if ((s.HasKey("max") 
                        || ((max != default(OptionalInt)) 
                        && max.HasValue)))
            {
                s.Serialize("max", ref max.Value);
                max.HasValue = true;
            }
            s.Serialize("tournamentId", ref tournamentId);
        }
    }
    [System.SerializableAttribute()]
    public partial class AdminPlayerStatus : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string contentId;
        public long nextCycleStartMs;
        public long playerId;
        public int rank;
        public double score;
        public int stage;
        public int tier;
        public string tournamentId;
        public TournamentCurrencyReward[] unclaimedRewards;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("contentId", ref contentId);
            s.Serialize("nextCycleStartMs", ref nextCycleStartMs);
            s.Serialize("playerId", ref playerId);
            s.Serialize("rank", ref rank);
            s.Serialize("score", ref score);
            s.Serialize("stage", ref stage);
            s.Serialize("tier", ref tier);
            s.Serialize("tournamentId", ref tournamentId);
            s.SerializeArray("unclaimedRewards", ref unclaimedRewards);
        }
    }
    [System.SerializableAttribute()]
    public partial class UpdatePlayerStatusRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long playerId;
        public string tournamentId;
        public PlayerStatusUpdate update = new PlayerStatusUpdate();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("playerId", ref playerId);
            s.Serialize("tournamentId", ref tournamentId);
            s.Serialize("update", ref update);
        }
    }
    [System.SerializableAttribute()]
    public partial class ChampionScore : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public int cycle;
        public long endTimeMs;
        public long playerId;
        public double score;
        public long startTimeMs;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("cycle", ref cycle);
            s.Serialize("endTimeMs", ref endTimeMs);
            s.Serialize("playerId", ref playerId);
            s.Serialize("score", ref score);
            s.Serialize("startTimeMs", ref startTimeMs);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetChampionsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString contentId = new OptionalString();
        public int cycles;
        public string tournamentId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("contentId") 
                        || ((contentId != default(OptionalString)) 
                        && contentId.HasValue)))
            {
                s.Serialize("contentId", ref contentId.Value);
                contentId.HasValue = true;
            }
            s.Serialize("cycles", ref cycles);
            s.Serialize("tournamentId", ref tournamentId);
        }
    }
    [System.SerializableAttribute()]
    public partial class AdminGetPlayerStatusResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public AdminPlayerStatus[] statuses;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("statuses", ref statuses);
        }
    }
    [System.SerializableAttribute()]
    public partial class RevokeTokenRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string token;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("token", ref token);
        }
    }
    [System.SerializableAttribute()]
    public partial class ListTokensRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong cid = new OptionalLong();
        public long gamerTagOrAccountId;
        public int page;
        public int pageSize;
        public OptionalString pid = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("cid") 
                        || ((cid != default(OptionalLong)) 
                        && cid.HasValue)))
            {
                s.Serialize("cid", ref cid.Value);
                cid.HasValue = true;
            }
            s.Serialize("gamerTagOrAccountId", ref gamerTagOrAccountId);
            s.Serialize("page", ref page);
            s.Serialize("pageSize", ref pageSize);
            if ((s.HasKey("pid") 
                        || ((pid != default(OptionalString)) 
                        && pid.HasValue)))
            {
                s.Serialize("pid", ref pid.Value);
                pid.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ContextInfo : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string device;
        public string platform;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("device", ref device);
            s.Serialize("platform", ref platform);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetTokenRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string token;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("token", ref token);
        }
    }
    [System.SerializableAttribute()]
    public partial class TokenRequestWrapper : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalChallengeSolution challenge_solution = new OptionalChallengeSolution();
        public OptionalString client_id = new OptionalString();
        public OptionalString code = new OptionalString();
        public OptionalContextInfo context = new OptionalContextInfo();
        public OptionalBool customerScoped = new OptionalBool();
        public OptionalString device_id = new OptionalString();
        public OptionalString external_token = new OptionalString();
        public string grant_type;
        public OptionalString password = new OptionalString();
        public OptionalString provider_namespace = new OptionalString();
        public OptionalString provider_service = new OptionalString();
        public OptionalString redirect_uri = new OptionalString();
        public OptionalString refresh_token = new OptionalString();
        public OptionalArrayOfString scope = new OptionalArrayOfString();
        public OptionalString third_party = new OptionalString();
        public OptionalString token = new OptionalString();
        public OptionalString username = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("challenge_solution") 
                        || ((challenge_solution != default(OptionalChallengeSolution)) 
                        && challenge_solution.HasValue)))
            {
                s.Serialize("challenge_solution", ref challenge_solution.Value);
                challenge_solution.HasValue = true;
            }
            if ((s.HasKey("client_id") 
                        || ((client_id != default(OptionalString)) 
                        && client_id.HasValue)))
            {
                s.Serialize("client_id", ref client_id.Value);
                client_id.HasValue = true;
            }
            if ((s.HasKey("code") 
                        || ((code != default(OptionalString)) 
                        && code.HasValue)))
            {
                s.Serialize("code", ref code.Value);
                code.HasValue = true;
            }
            if ((s.HasKey("context") 
                        || ((context != default(OptionalContextInfo)) 
                        && context.HasValue)))
            {
                s.Serialize("context", ref context.Value);
                context.HasValue = true;
            }
            if ((s.HasKey("customerScoped") 
                        || ((customerScoped != default(OptionalBool)) 
                        && customerScoped.HasValue)))
            {
                s.Serialize("customerScoped", ref customerScoped.Value);
                customerScoped.HasValue = true;
            }
            if ((s.HasKey("device_id") 
                        || ((device_id != default(OptionalString)) 
                        && device_id.HasValue)))
            {
                s.Serialize("device_id", ref device_id.Value);
                device_id.HasValue = true;
            }
            if ((s.HasKey("external_token") 
                        || ((external_token != default(OptionalString)) 
                        && external_token.HasValue)))
            {
                s.Serialize("external_token", ref external_token.Value);
                external_token.HasValue = true;
            }
            s.Serialize("grant_type", ref grant_type);
            if ((s.HasKey("password") 
                        || ((password != default(OptionalString)) 
                        && password.HasValue)))
            {
                s.Serialize("password", ref password.Value);
                password.HasValue = true;
            }
            if ((s.HasKey("provider_namespace") 
                        || ((provider_namespace != default(OptionalString)) 
                        && provider_namespace.HasValue)))
            {
                s.Serialize("provider_namespace", ref provider_namespace.Value);
                provider_namespace.HasValue = true;
            }
            if ((s.HasKey("provider_service") 
                        || ((provider_service != default(OptionalString)) 
                        && provider_service.HasValue)))
            {
                s.Serialize("provider_service", ref provider_service.Value);
                provider_service.HasValue = true;
            }
            if ((s.HasKey("redirect_uri") 
                        || ((redirect_uri != default(OptionalString)) 
                        && redirect_uri.HasValue)))
            {
                s.Serialize("redirect_uri", ref redirect_uri.Value);
                redirect_uri.HasValue = true;
            }
            if ((s.HasKey("refresh_token") 
                        || ((refresh_token != default(OptionalString)) 
                        && refresh_token.HasValue)))
            {
                s.Serialize("refresh_token", ref refresh_token.Value);
                refresh_token.HasValue = true;
            }
            if ((s.HasKey("scope") 
                        || ((scope != default(OptionalArrayOfString)) 
                        && scope.HasValue)))
            {
                s.SerializeArray("scope", ref scope.Value);
                scope.HasValue = true;
            }
            if ((s.HasKey("third_party") 
                        || ((third_party != default(OptionalString)) 
                        && third_party.HasValue)))
            {
                s.Serialize("third_party", ref third_party.Value);
                third_party.HasValue = true;
            }
            if ((s.HasKey("token") 
                        || ((token != default(OptionalString)) 
                        && token.HasValue)))
            {
                s.Serialize("token", ref token.Value);
                token.HasValue = true;
            }
            if ((s.HasKey("username") 
                        || ((username != default(OptionalString)) 
                        && username.HasValue)))
            {
                s.Serialize("username", ref username.Value);
                username.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ListTokenResponseItem : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string created;
        public string device;
        public string platform;
        public string token;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("created", ref created);
            s.Serialize("device", ref device);
            s.Serialize("platform", ref platform);
            s.Serialize("token", ref token);
        }
    }
    [System.SerializableAttribute()]
    public partial class ListTokenResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ListTokenResponseItem[] items;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("items", ref items);
        }
    }
    [System.SerializableAttribute()]
    public partial class TokenResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString access_token = new OptionalString();
        public OptionalString challenge_token = new OptionalString();
        public long expires_in;
        public OptionalString refresh_token = new OptionalString();
        public OptionalArrayOfString scopes = new OptionalArrayOfString();
        public string token_type;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("access_token") 
                        || ((access_token != default(OptionalString)) 
                        && access_token.HasValue)))
            {
                s.Serialize("access_token", ref access_token.Value);
                access_token.HasValue = true;
            }
            if ((s.HasKey("challenge_token") 
                        || ((challenge_token != default(OptionalString)) 
                        && challenge_token.HasValue)))
            {
                s.Serialize("challenge_token", ref challenge_token.Value);
                challenge_token.HasValue = true;
            }
            s.Serialize("expires_in", ref expires_in);
            if ((s.HasKey("refresh_token") 
                        || ((refresh_token != default(OptionalString)) 
                        && refresh_token.HasValue)))
            {
                s.Serialize("refresh_token", ref refresh_token.Value);
                refresh_token.HasValue = true;
            }
            if ((s.HasKey("scopes") 
                        || ((scopes != default(OptionalArrayOfString)) 
                        && scopes.HasValue)))
            {
                s.SerializeArray("scopes", ref scopes.Value);
                scopes.HasValue = true;
            }
            s.Serialize("token_type", ref token_type);
        }
    }
    [System.SerializableAttribute()]
    public partial class Token : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong accountId = new OptionalLong();
        public long cid;
        public long created;
        public OptionalString device = new OptionalString();
        public OptionalLong expiresMs = new OptionalLong();
        public OptionalLong gamerTag = new OptionalLong();
        public OptionalString pid = new OptionalString();
        public OptionalString platform = new OptionalString();
        public OptionalBool revoked = new OptionalBool();
        public OptionalArrayOfString scopes = new OptionalArrayOfString();
        public string token;
        public string type;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("accountId") 
                        || ((accountId != default(OptionalLong)) 
                        && accountId.HasValue)))
            {
                s.Serialize("accountId", ref accountId.Value);
                accountId.HasValue = true;
            }
            s.Serialize("cid", ref cid);
            s.Serialize("created", ref created);
            if ((s.HasKey("device") 
                        || ((device != default(OptionalString)) 
                        && device.HasValue)))
            {
                s.Serialize("device", ref device.Value);
                device.HasValue = true;
            }
            if ((s.HasKey("expiresMs") 
                        || ((expiresMs != default(OptionalLong)) 
                        && expiresMs.HasValue)))
            {
                s.Serialize("expiresMs", ref expiresMs.Value);
                expiresMs.HasValue = true;
            }
            if ((s.HasKey("gamerTag") 
                        || ((gamerTag != default(OptionalLong)) 
                        && gamerTag.HasValue)))
            {
                s.Serialize("gamerTag", ref gamerTag.Value);
                gamerTag.HasValue = true;
            }
            if ((s.HasKey("pid") 
                        || ((pid != default(OptionalString)) 
                        && pid.HasValue)))
            {
                s.Serialize("pid", ref pid.Value);
                pid.HasValue = true;
            }
            if ((s.HasKey("platform") 
                        || ((platform != default(OptionalString)) 
                        && platform.HasValue)))
            {
                s.Serialize("platform", ref platform.Value);
                platform.HasValue = true;
            }
            if ((s.HasKey("revoked") 
                        || ((revoked != default(OptionalBool)) 
                        && revoked.HasValue)))
            {
                s.Serialize("revoked", ref revoked.Value);
                revoked.HasValue = true;
            }
            if ((s.HasKey("scopes") 
                        || ((scopes != default(OptionalArrayOfString)) 
                        && scopes.HasValue)))
            {
                s.SerializeArray("scopes", ref scopes.Value);
                scopes.HasValue = true;
            }
            s.Serialize("token", ref token);
            s.Serialize("type", ref type);
        }
    }
    [System.SerializableAttribute()]
    public partial class ObjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string objectKey;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("objectKey", ref objectKey);
        }
    }
    [System.SerializableAttribute()]
    public partial class ObjectRequests : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong playerId = new OptionalLong();
        public OptionalArrayOfObjectRequest request = new OptionalArrayOfObjectRequest();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalLong)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
            if ((s.HasKey("request") 
                        || ((request != default(OptionalArrayOfObjectRequest)) 
                        && request.HasValue)))
            {
                s.SerializeArray("request", ref request.Value);
                request.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ObjectsMetadataResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ObjectMetadataResponse[] response;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("response", ref response);
        }
    }
    [System.SerializableAttribute()]
    public partial class URLSResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public CloudsavingBasicURLResponse[] response;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("response", ref response);
        }
    }
    [System.SerializableAttribute()]
    public partial class CloudsavingBasicURLResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string objectKey;
        public string url;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("objectKey", ref objectKey);
            s.Serialize("url", ref url);
        }
    }
    [System.SerializableAttribute()]
    public partial class CloudsavingBasicReference : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class ObjectMetadataResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MapOfString metadata = new MapOfString();
        public string objectKey;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeDictionary<MapOfString, string>("metadata", ref metadata);
            s.Serialize("objectKey", ref objectKey);
        }
    }
    [System.SerializableAttribute()]
    public partial class MetadataPair : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string key;
        public string value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("key", ref key);
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class CloudsavingBasicManifest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long created;
        public string id;
        public CloudsavingBasicReference[] manifest;
        public bool replacement;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("created", ref created);
            s.Serialize("id", ref id);
            s.SerializeArray("manifest", ref manifest);
            s.Serialize("replacement", ref replacement);
        }
    }
    [System.SerializableAttribute()]
    public partial class PlayerBasicCloudDataRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong playerId = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalLong)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class UploadRequestsFromPortal : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong playerId = new OptionalLong();
        public UploadRequestFromPortal[] request;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalLong)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
            s.SerializeArray("request", ref request);
        }
    }
    [System.SerializableAttribute()]
    public partial class UploadRequests : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong playerId = new OptionalLong();
        public UploadRequest[] request;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("playerId") 
                        || ((playerId != default(OptionalLong)) 
                        && playerId.HasValue)))
            {
                s.Serialize("playerId", ref playerId.Value);
                playerId.HasValue = true;
            }
            s.SerializeArray("request", ref request);
        }
    }
    [System.SerializableAttribute()]
    public partial class ReplaceObjectsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long sourcePlayerId;
        public long targetPlayerId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("sourcePlayerId", ref sourcePlayerId);
            s.Serialize("targetPlayerId", ref targetPlayerId);
        }
    }
    [System.SerializableAttribute()]
    public partial class UploadRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString checksum = new OptionalString();
        public OptionalBool deleted = new OptionalBool();
        public OptionalLong lastModified = new OptionalLong();
        public OptionalArrayOfMetadataPair metadata = new OptionalArrayOfMetadataPair();
        public string objectKey;
        public long sizeInBytes;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("checksum") 
                        || ((checksum != default(OptionalString)) 
                        && checksum.HasValue)))
            {
                s.Serialize("checksum", ref checksum.Value);
                checksum.HasValue = true;
            }
            if ((s.HasKey("deleted") 
                        || ((deleted != default(OptionalBool)) 
                        && deleted.HasValue)))
            {
                s.Serialize("deleted", ref deleted.Value);
                deleted.HasValue = true;
            }
            if ((s.HasKey("lastModified") 
                        || ((lastModified != default(OptionalLong)) 
                        && lastModified.HasValue)))
            {
                s.Serialize("lastModified", ref lastModified.Value);
                lastModified.HasValue = true;
            }
            if ((s.HasKey("metadata") 
                        || ((metadata != default(OptionalArrayOfMetadataPair)) 
                        && metadata.HasValue)))
            {
                s.SerializeArray("metadata", ref metadata.Value);
                metadata.HasValue = true;
            }
            s.Serialize("objectKey", ref objectKey);
            s.Serialize("sizeInBytes", ref sizeInBytes);
        }
    }
    [System.SerializableAttribute()]
    public partial class UploadRequestFromPortal : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong lastModified = new OptionalLong();
        public OptionalArrayOfMetadataPair metadata = new OptionalArrayOfMetadataPair();
        public string objectKey;
        public long sizeInBytes;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("lastModified") 
                        || ((lastModified != default(OptionalLong)) 
                        && lastModified.HasValue)))
            {
                s.Serialize("lastModified", ref lastModified.Value);
                lastModified.HasValue = true;
            }
            if ((s.HasKey("metadata") 
                        || ((metadata != default(OptionalArrayOfMetadataPair)) 
                        && metadata.HasValue)))
            {
                s.SerializeArray("metadata", ref metadata.Value);
                metadata.HasValue = true;
            }
            s.Serialize("objectKey", ref objectKey);
            s.Serialize("sizeInBytes", ref sizeInBytes);
        }
    }
    [System.SerializableAttribute()]
    public partial class CompletePurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string isoCurrencySymbol;
        public string priceInLocalCurrency;
        public string receipt;
        public long txid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("isoCurrencySymbol", ref isoCurrencySymbol);
            s.Serialize("priceInLocalCurrency", ref priceInLocalCurrency);
            s.Serialize("receipt", ref receipt);
            s.Serialize("txid", ref txid);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetProductsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ProductView[] products;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("products", ref products);
        }
    }
    [System.SerializableAttribute()]
    public partial class TrackPurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string isoCurrencySymbol;
        public CurrencyChange[] obtainCurrency;
        public ItemCreateRequest[] obtainItems;
        public double priceInLocalCurrency;
        public string purchaseId;
        public string skuName;
        public string skuProductId;
        public string store;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("isoCurrencySymbol", ref isoCurrencySymbol);
            s.SerializeArray("obtainCurrency", ref obtainCurrency);
            s.SerializeArray("obtainItems", ref obtainItems);
            s.Serialize("priceInLocalCurrency", ref priceInLocalCurrency);
            s.Serialize("purchaseId", ref purchaseId);
            s.Serialize("skuName", ref skuName);
            s.Serialize("skuProductId", ref skuProductId);
            s.Serialize("store", ref store);
        }
    }
    [System.SerializableAttribute()]
    public partial class FacebookUpdatedEntry : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] changed_fields;
        public string id;
        public long time;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("changed_fields", ref changed_fields);
            s.Serialize("id", ref id);
            s.Serialize("time", ref time);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetPricesRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long steamId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("steamId", ref steamId);
        }
    }
    [System.SerializableAttribute()]
    public partial class FacebookPaymentUpdateRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public FacebookUpdatedEntry[] entry;
        public string objectKey;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("entry", ref entry);
            s.Serialize("object", ref objectKey);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetOrderInfoRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string orderId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("orderId", ref orderId);
        }
    }
    [System.SerializableAttribute()]
    public partial class ListAuditRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalInt limit = new OptionalInt();
        public OptionalLong player = new OptionalLong();
        public OptionalString provider = new OptionalString();
        public OptionalString providerid = new OptionalString();
        public OptionalInt start = new OptionalInt();
        public OptionalString state = new OptionalString();
        public OptionalLong txid = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("limit") 
                        || ((limit != default(OptionalInt)) 
                        && limit.HasValue)))
            {
                s.Serialize("limit", ref limit.Value);
                limit.HasValue = true;
            }
            if ((s.HasKey("player") 
                        || ((player != default(OptionalLong)) 
                        && player.HasValue)))
            {
                s.Serialize("player", ref player.Value);
                player.HasValue = true;
            }
            if ((s.HasKey("provider") 
                        || ((provider != default(OptionalString)) 
                        && provider.HasValue)))
            {
                s.Serialize("provider", ref provider.Value);
                provider.HasValue = true;
            }
            if ((s.HasKey("providerid") 
                        || ((providerid != default(OptionalString)) 
                        && providerid.HasValue)))
            {
                s.Serialize("providerid", ref providerid.Value);
                providerid.HasValue = true;
            }
            if ((s.HasKey("start") 
                        || ((start != default(OptionalInt)) 
                        && start.HasValue)))
            {
                s.Serialize("start", ref start.Value);
                start.HasValue = true;
            }
            if ((s.HasKey("state") 
                        || ((state != default(OptionalString)) 
                        && state.HasValue)))
            {
                s.Serialize("state", ref state.Value);
                state.HasValue = true;
            }
            if ((s.HasKey("txid") 
                        || ((txid != default(OptionalLong)) 
                        && txid.HasValue)))
            {
                s.Serialize("txid", ref txid.Value);
                txid.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ProductView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string description;
        public string isoCurrencyCode;
        public double localizedPrice;
        public string localizedPriceString;
        public string sku;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("description", ref description);
            s.Serialize("isoCurrencyCode", ref isoCurrencyCode);
            s.Serialize("localizedPrice", ref localizedPrice);
            s.Serialize("localizedPriceString", ref localizedPriceString);
            s.Serialize("sku", ref sku);
        }
    }
    [System.SerializableAttribute()]
    public partial class FailPurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string reason;
        public long txid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("reason", ref reason);
            s.Serialize("txid", ref txid);
        }
    }
    [System.SerializableAttribute()]
    public partial class BeginPurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString language = new OptionalString();
        public string purchaseId;
        public OptionalString time = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("language") 
                        || ((language != default(OptionalString)) 
                        && language.HasValue)))
            {
                s.Serialize("language", ref language.Value);
                language.HasValue = true;
            }
            s.Serialize("purchaseId", ref purchaseId);
            if ((s.HasKey("time") 
                        || ((time != default(OptionalString)) 
                        && time.HasValue)))
            {
                s.Serialize("time", ref time.Value);
                time.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class SteamOrderInfoItem : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long amount;
        public long itemid;
        public string itemstatus;
        public long qty;
        public long vat;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("amount", ref amount);
            s.Serialize("itemid", ref itemid);
            s.Serialize("itemstatus", ref itemstatus);
            s.Serialize("qty", ref qty);
            s.Serialize("vat", ref vat);
        }
    }
    [System.SerializableAttribute()]
    public partial class VerifyPurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string receipt;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("receipt", ref receipt);
        }
    }
    [System.SerializableAttribute()]
    public partial class SubscriptionVerificationRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string hubChallenge;
        public string hubMode;
        public string hubVerifyToken;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("hubChallenge", ref hubChallenge);
            s.Serialize("hubMode", ref hubMode);
            s.Serialize("hubVerifyToken", ref hubVerifyToken);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetProductResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string description;
        public string id;
        public string name;
        public int price;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("description", ref description);
            s.Serialize("id", ref id);
            s.Serialize("name", ref name);
            s.Serialize("price", ref price);
        }
    }
    [System.SerializableAttribute()]
    public partial class LocalizedPriceMap : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string currency;
        public LocalizedPrice[] prices;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("currency", ref currency);
            s.SerializeArray("prices", ref prices);
        }
    }
    [System.SerializableAttribute()]
    public partial class LocalizedPrice : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long price;
        public double priceLocalized;
        public string priceLocalizedString;
        public long to;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("price", ref price);
            s.Serialize("priceLocalized", ref priceLocalized);
            s.Serialize("priceLocalizedString", ref priceLocalizedString);
            s.Serialize("to", ref to);
        }
    }
    [System.SerializableAttribute()]
    public partial class PaymentResultResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class BeginPurchaseResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString access_token = new OptionalString();
        public long txid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("access_token") 
                        || ((access_token != default(OptionalString)) 
                        && access_token.HasValue)))
            {
                s.Serialize("access_token", ref access_token.Value);
                access_token.HasValue = true;
            }
            s.Serialize("txid", ref txid);
        }
    }
    [System.SerializableAttribute()]
    public partial class SteamOrderInfoResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string country;
        public string currency;
        public SteamOrderInfoItem[] items;
        public long orderid;
        public string status;
        public long steamid;
        public string time;
        public string timecreated;
        public long transid;
        public string usstate;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("country", ref country);
            s.Serialize("currency", ref currency);
            s.SerializeArray("items", ref items);
            s.Serialize("orderid", ref orderid);
            s.Serialize("status", ref status);
            s.Serialize("steamid", ref steamid);
            s.Serialize("time", ref time);
            s.Serialize("timecreated", ref timecreated);
            s.Serialize("transid", ref transid);
            s.Serialize("usstate", ref usstate);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetProductRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string sku;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("sku", ref sku);
        }
    }
    [System.SerializableAttribute()]
    public partial class CancelPurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long txid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("txid", ref txid);
        }
    }
    [System.SerializableAttribute()]
    public partial class SteamAuthRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string ticket;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("ticket", ref ticket);
        }
    }
    [System.SerializableAttribute()]
    public partial class FacebookPaymentUpdateResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class SubscriptionVerificationResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string hubChallenge;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("hubChallenge", ref hubChallenge);
        }
    }
    [System.SerializableAttribute()]
    public partial class EmptyRsp : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
        }
    }
    [System.SerializableAttribute()]
    public partial class SendNotification : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString body = new OptionalString();
        public OptionalString title = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("body") 
                        || ((body != default(OptionalString)) 
                        && body.HasValue)))
            {
                s.Serialize("body", ref body.Value);
                body.HasValue = true;
            }
            if ((s.HasKey("title") 
                        || ((title != default(OptionalString)) 
                        && title.HasValue)))
            {
                s.Serialize("title", ref title.Value);
                title.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class RegisterReq : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string provider;
        public string token;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("provider", ref provider);
            s.Serialize("token", ref token);
        }
    }
    [System.SerializableAttribute()]
    public partial class SendReq : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public SendMsg[] msgs;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("msgs", ref msgs);
        }
    }
    [System.SerializableAttribute()]
    public partial class SendMsg : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalMapOfString data = new OptionalMapOfString();
        public OptionalSendNotification notification = new OptionalSendNotification();
        public long[] to;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("data") 
                        || ((data != default(OptionalMapOfString)) 
                        && data.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("data", ref data.Value);
                data.HasValue = true;
            }
            if ((s.HasKey("notification") 
                        || ((notification != default(OptionalSendNotification)) 
                        && notification.HasValue)))
            {
                s.Serialize("notification", ref notification.Value);
                notification.HasValue = true;
            }
            s.SerializeArray("to", ref to);
        }
    }
    [System.SerializableAttribute()]
    public partial class NotificationRequestData : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString channel = new OptionalString();
        public OptionalString context = new OptionalString();
        public OptionalString messageFull = new OptionalString();
        public OptionalString messageKey = new OptionalString();
        public OptionalArrayOfString messageParams = new OptionalArrayOfString();
        public OptionalMapOfString meta = new OptionalMapOfString();
        public OptionalString shard = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("channel") 
                        || ((channel != default(OptionalString)) 
                        && channel.HasValue)))
            {
                s.Serialize("channel", ref channel.Value);
                channel.HasValue = true;
            }
            if ((s.HasKey("context") 
                        || ((context != default(OptionalString)) 
                        && context.HasValue)))
            {
                s.Serialize("context", ref context.Value);
                context.HasValue = true;
            }
            if ((s.HasKey("messageFull") 
                        || ((messageFull != default(OptionalString)) 
                        && messageFull.HasValue)))
            {
                s.Serialize("messageFull", ref messageFull.Value);
                messageFull.HasValue = true;
            }
            if ((s.HasKey("messageKey") 
                        || ((messageKey != default(OptionalString)) 
                        && messageKey.HasValue)))
            {
                s.Serialize("messageKey", ref messageKey.Value);
                messageKey.HasValue = true;
            }
            if ((s.HasKey("messageParams") 
                        || ((messageParams != default(OptionalArrayOfString)) 
                        && messageParams.HasValue)))
            {
                s.SerializeArray("messageParams", ref messageParams.Value);
                messageParams.HasValue = true;
            }
            if ((s.HasKey("meta") 
                        || ((meta != default(OptionalMapOfString)) 
                        && meta.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("meta", ref meta.Value);
                meta.HasValue = true;
            }
            if ((s.HasKey("shard") 
                        || ((shard != default(OptionalString)) 
                        && shard.HasValue)))
            {
                s.Serialize("shard", ref shard.Value);
                shard.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ServerEvent : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string eventKey;
        public OptionalString payload = new OptionalString();
        public bool toAll;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("event", ref eventKey);
            if ((s.HasKey("payload") 
                        || ((payload != default(OptionalString)) 
                        && payload.HasValue)))
            {
                s.Serialize("payload", ref payload.Value);
                payload.HasValue = true;
            }
            s.Serialize("toAll", ref toAll);
        }
    }
    [System.SerializableAttribute()]
    public partial class NotificationRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString customChannelSuffix = new OptionalString();
        public OptionalLong dbid = new OptionalLong();
        public OptionalArrayOfLong dbids = new OptionalArrayOfLong();
        public NotificationRequestData payload = new NotificationRequestData();
        public OptionalBool useSignalWhenPossible = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("customChannelSuffix") 
                        || ((customChannelSuffix != default(OptionalString)) 
                        && customChannelSuffix.HasValue)))
            {
                s.Serialize("customChannelSuffix", ref customChannelSuffix.Value);
                customChannelSuffix.HasValue = true;
            }
            if ((s.HasKey("dbid") 
                        || ((dbid != default(OptionalLong)) 
                        && dbid.HasValue)))
            {
                s.Serialize("dbid", ref dbid.Value);
                dbid.HasValue = true;
            }
            if ((s.HasKey("dbids") 
                        || ((dbids != default(OptionalArrayOfLong)) 
                        && dbids.HasValue)))
            {
                s.SerializeArray("dbids", ref dbids.Value);
                dbids.HasValue = true;
            }
            s.Serialize("payload", ref payload);
            if ((s.HasKey("useSignalWhenPossible") 
                        || ((useSignalWhenPossible != default(OptionalBool)) 
                        && useSignalWhenPossible.HasValue)))
            {
                s.Serialize("useSignalWhenPossible", ref useSignalWhenPossible.Value);
                useSignalWhenPossible.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class SubscriberDetailsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string authenticationKey;
        public string customChannelPrefix;
        public OptionalString gameGlobalNotificationChannel = new OptionalString();
        public string gameNotificationChannel;
        public string playerChannel;
        public string[] playerChannels;
        public string playerForRealmChannel;
        public string subscribeKey;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("authenticationKey", ref authenticationKey);
            s.Serialize("customChannelPrefix", ref customChannelPrefix);
            if ((s.HasKey("gameGlobalNotificationChannel") 
                        || ((gameGlobalNotificationChannel != default(OptionalString)) 
                        && gameGlobalNotificationChannel.HasValue)))
            {
                s.Serialize("gameGlobalNotificationChannel", ref gameGlobalNotificationChannel.Value);
                gameGlobalNotificationChannel.HasValue = true;
            }
            s.Serialize("gameNotificationChannel", ref gameNotificationChannel);
            s.Serialize("playerChannel", ref playerChannel);
            s.SerializeArray("playerChannels", ref playerChannels);
            s.Serialize("playerForRealmChannel", ref playerForRealmChannel);
            s.Serialize("subscribeKey", ref subscribeKey);
        }
    }
    [System.SerializableAttribute()]
    public partial class Promotable : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string checksum;
        public long createdAt;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("checksum", ref checksum);
            s.Serialize("createdAt", ref createdAt);
        }
    }
    [System.SerializableAttribute()]
    public partial class ArchiveProjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string pid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("pid", ref pid);
        }
    }
    [System.SerializableAttribute()]
    public partial class UpdateGameHierarchyRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ProjectView[] projects;
        public string rootPID;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("projects", ref projects);
            s.Serialize("rootPID", ref rootPID);
        }
    }
    [System.SerializableAttribute()]
    public partial class LaunchMessageListResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] files;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("files", ref files);
        }
    }
    [System.SerializableAttribute()]
    public partial class CustomerResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Customer customer = new Customer();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("customer", ref customer);
        }
    }
    [System.SerializableAttribute()]
    public partial class CustomersResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Customer[] result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class CreatePlanRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string memcachedHosts;
        public OptionalArrayOfString messageBusAnalytics = new OptionalArrayOfString();
        public OptionalArrayOfString messageBusCommon = new OptionalArrayOfString();
        public string mongoHosts;
        public bool mongoSSL;
        public OptionalString mongoSrvAddress = new OptionalString();
        public string name;
        public string platformJBDC;
        public RedisShardRequest[] redisShards;
        public bool sharded;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("memcachedHosts", ref memcachedHosts);
            if ((s.HasKey("messageBusAnalytics") 
                        || ((messageBusAnalytics != default(OptionalArrayOfString)) 
                        && messageBusAnalytics.HasValue)))
            {
                s.SerializeArray("messageBusAnalytics", ref messageBusAnalytics.Value);
                messageBusAnalytics.HasValue = true;
            }
            if ((s.HasKey("messageBusCommon") 
                        || ((messageBusCommon != default(OptionalArrayOfString)) 
                        && messageBusCommon.HasValue)))
            {
                s.SerializeArray("messageBusCommon", ref messageBusCommon.Value);
                messageBusCommon.HasValue = true;
            }
            s.Serialize("mongoHosts", ref mongoHosts);
            s.Serialize("mongoSSL", ref mongoSSL);
            if ((s.HasKey("mongoSrvAddress") 
                        || ((mongoSrvAddress != default(OptionalString)) 
                        && mongoSrvAddress.HasValue)))
            {
                s.Serialize("mongoSrvAddress", ref mongoSrvAddress.Value);
                mongoSrvAddress.HasValue = true;
            }
            s.Serialize("name", ref name);
            s.Serialize("platformJBDC", ref platformJBDC);
            s.SerializeArray("redisShards", ref redisShards);
            s.Serialize("sharded", ref sharded);
        }
    }
    [System.SerializableAttribute()]
    public partial class ContentLimits : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalInt maxDistinctContentIds = new OptionalInt();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("maxDistinctContentIds") 
                        || ((maxDistinctContentIds != default(OptionalInt)) 
                        && maxDistinctContentIds.HasValue)))
            {
                s.Serialize("maxDistinctContentIds", ref maxDistinctContentIds.Value);
                maxDistinctContentIds.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ServiceLimits : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBeamoLimits beamo = new OptionalBeamoLimits();
        public OptionalContentLimits content = new OptionalContentLimits();
        public OptionalGatewayLimits gateway = new OptionalGatewayLimits();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("beamo") 
                        || ((beamo != default(OptionalBeamoLimits)) 
                        && beamo.HasValue)))
            {
                s.Serialize("beamo", ref beamo.Value);
                beamo.HasValue = true;
            }
            if ((s.HasKey("content") 
                        || ((content != default(OptionalContentLimits)) 
                        && content.HasValue)))
            {
                s.Serialize("content", ref content.Value);
                content.HasValue = true;
            }
            if ((s.HasKey("gateway") 
                        || ((gateway != default(OptionalGatewayLimits)) 
                        && gateway.HasValue)))
            {
                s.Serialize("gateway", ref gateway.Value);
                gateway.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class FailedInFlightFilterRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string serviceName;
        public OptionalString serviceObjectId = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("serviceName", ref serviceName);
            if ((s.HasKey("serviceObjectId") 
                        || ((serviceObjectId != default(OptionalString)) 
                        && serviceObjectId.HasValue)))
            {
                s.Serialize("serviceObjectId", ref serviceObjectId.Value);
                serviceObjectId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GatewayLimits : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public int maxConcurrentRequests;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("maxConcurrentRequests", ref maxConcurrentRequests);
        }
    }
    [System.SerializableAttribute()]
    public partial class RealmConfiguration : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string environment;
        public string microserviceEcrURI;
        public string microserviceURI;
        public string portalURI;
        public string storageBrowserURI;
        public WebSocketConfiguration websocketConfig = new WebSocketConfiguration();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("environment", ref environment);
            s.Serialize("microserviceEcrURI", ref microserviceEcrURI);
            s.Serialize("microserviceURI", ref microserviceURI);
            s.Serialize("portalURI", ref portalURI);
            s.Serialize("storageBrowserURI", ref storageBrowserURI);
            s.Serialize("websocketConfig", ref websocketConfig);
        }
    }
    [System.SerializableAttribute()]
    public partial class NewCustomerRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString alias = new OptionalString();
        public OptionalString customerName = new OptionalString();
        public string email;
        public OptionalBool hierarchy = new OptionalBool();
        public string password;
        public string projectName;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("alias") 
                        || ((alias != default(OptionalString)) 
                        && alias.HasValue)))
            {
                s.Serialize("alias", ref alias.Value);
                alias.HasValue = true;
            }
            if ((s.HasKey("customerName") 
                        || ((customerName != default(OptionalString)) 
                        && customerName.HasValue)))
            {
                s.Serialize("customerName", ref customerName.Value);
                customerName.HasValue = true;
            }
            s.Serialize("email", ref email);
            if ((s.HasKey("hierarchy") 
                        || ((hierarchy != default(OptionalBool)) 
                        && hierarchy.HasValue)))
            {
                s.Serialize("hierarchy", ref hierarchy.Value);
                hierarchy.HasValue = true;
            }
            s.Serialize("password", ref password);
            s.Serialize("projectName", ref projectName);
        }
    }
    [System.SerializableAttribute()]
    public partial class PromoteRealmResponseOld : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public RealmPromotion[] promotions;
        public string sourcePid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("promotions", ref promotions);
            s.Serialize("sourcePid", ref sourcePid);
        }
    }
    [System.SerializableAttribute()]
    public partial class CustomerView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString alias = new OptionalString();
        public long cid;
        public string name;
        public ProjectView[] projects;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("alias") 
                        || ((alias != default(OptionalString)) 
                        && alias.HasValue)))
            {
                s.Serialize("alias", ref alias.Value);
                alias.HasValue = true;
            }
            s.Serialize("cid", ref cid);
            s.Serialize("name", ref name);
            s.SerializeArray("projects", ref projects);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetGameResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ProjectView[] projects;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("projects", ref projects);
        }
    }
    [System.SerializableAttribute()]
    public partial class PromoteRealmRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfString contentManifestIds = new OptionalArrayOfString();
        public OptionalArrayOfString promotions = new OptionalArrayOfString();
        public string sourcePid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("contentManifestIds") 
                        || ((contentManifestIds != default(OptionalArrayOfString)) 
                        && contentManifestIds.HasValue)))
            {
                s.SerializeArray("contentManifestIds", ref contentManifestIds.Value);
                contentManifestIds.HasValue = true;
            }
            if ((s.HasKey("promotions") 
                        || ((promotions != default(OptionalArrayOfString)) 
                        && promotions.HasValue)))
            {
                s.SerializeArray("promotions", ref promotions.Value);
                promotions.HasValue = true;
            }
            s.Serialize("sourcePid", ref sourcePid);
        }
    }
    [System.SerializableAttribute()]
    public partial class CreateLaunchMessageRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string body;
        public string name;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("body", ref body);
            s.Serialize("name", ref name);
        }
    }
    [System.SerializableAttribute()]
    public partial class RealmConfigSaveRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MapOfString config = new MapOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeDictionary<MapOfString, string>("config", ref config);
        }
    }
    [System.SerializableAttribute()]
    public partial class InFlightFailureResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public InFlightFailure[] failures;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("failures", ref failures);
        }
    }
    [System.SerializableAttribute()]
    public partial class PromotionScope : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public Promotion[] promotions;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
            s.SerializeArray("promotions", ref promotions);
        }
    }
    [System.SerializableAttribute()]
    public partial class ServicePlan : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong created = new OptionalLong();
        public DataDomain dataDomain = new DataDomain();
        public OptionalServiceLimits limits = new OptionalServiceLimits();
        public OptionalString minCustomerStatusSaved = new OptionalString();
        public string name;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("created") 
                        || ((created != default(OptionalLong)) 
                        && created.HasValue)))
            {
                s.Serialize("created", ref created.Value);
                created.HasValue = true;
            }
            s.Serialize("dataDomain", ref dataDomain);
            if ((s.HasKey("limits") 
                        || ((limits != default(OptionalServiceLimits)) 
                        && limits.HasValue)))
            {
                s.Serialize("limits", ref limits.Value);
                limits.HasValue = true;
            }
            if ((s.HasKey("minCustomerStatusSaved") 
                        || ((minCustomerStatusSaved != default(OptionalString)) 
                        && minCustomerStatusSaved.HasValue)))
            {
                s.Serialize("minCustomerStatusSaved", ref minCustomerStatusSaved.Value);
                minCustomerStatusSaved.HasValue = true;
            }
            s.Serialize("name", ref name);
        }
    }
    [System.SerializableAttribute()]
    public partial class CustomerViewResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public CustomerView customer = new CustomerView();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("customer", ref customer);
        }
    }
    [System.SerializableAttribute()]
    public partial class AliasAvailableResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string alias;
        public bool available;
        public long cid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("alias", ref alias);
            s.Serialize("available", ref available);
            s.Serialize("cid", ref cid);
        }
    }
    [System.SerializableAttribute()]
    public partial class RealmPromotion : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Promotable destination = new Promotable();
        public string name;
        public Promotable source = new Promotable();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("destination", ref destination);
            s.Serialize("name", ref name);
            s.Serialize("source", ref source);
        }
    }
    [System.SerializableAttribute()]
    public partial class BeamoLimits : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string maxContainerSize;
        public int maxRunningContainersPerService;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("maxContainerSize", ref maxContainerSize);
            s.Serialize("maxRunningContainersPerService", ref maxRunningContainersPerService);
        }
    }
    [System.SerializableAttribute()]
    public partial class Project : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool archived;
        public OptionalArrayOfString children = new OptionalArrayOfString();
        public OptionalMapOfString config = new OptionalMapOfString();
        public OptionalLong created = new OptionalLong();
        public MapOfString customCharts = new MapOfString();
        public OptionalString displayName = new OptionalString();
        public string name;
        public OptionalString parent = new OptionalString();
        public string plan;
        public bool root;
        public string secret;
        public OptionalBool sharded = new OptionalBool();
        public OptionalBool sigval = new OptionalBool();
        public OptionalString status = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("archived", ref archived);
            if ((s.HasKey("children") 
                        || ((children != default(OptionalArrayOfString)) 
                        && children.HasValue)))
            {
                s.SerializeArray("children", ref children.Value);
                children.HasValue = true;
            }
            if ((s.HasKey("config") 
                        || ((config != default(OptionalMapOfString)) 
                        && config.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("config", ref config.Value);
                config.HasValue = true;
            }
            if ((s.HasKey("created") 
                        || ((created != default(OptionalLong)) 
                        && created.HasValue)))
            {
                s.Serialize("created", ref created.Value);
                created.HasValue = true;
            }
            s.SerializeDictionary<MapOfString, string>("customCharts", ref customCharts);
            if ((s.HasKey("displayName") 
                        || ((displayName != default(OptionalString)) 
                        && displayName.HasValue)))
            {
                s.Serialize("displayName", ref displayName.Value);
                displayName.HasValue = true;
            }
            s.Serialize("name", ref name);
            if ((s.HasKey("parent") 
                        || ((parent != default(OptionalString)) 
                        && parent.HasValue)))
            {
                s.Serialize("parent", ref parent.Value);
                parent.HasValue = true;
            }
            s.Serialize("plan", ref plan);
            s.Serialize("root", ref root);
            s.Serialize("secret", ref secret);
            if ((s.HasKey("sharded") 
                        || ((sharded != default(OptionalBool)) 
                        && sharded.HasValue)))
            {
                s.Serialize("sharded", ref sharded.Value);
                sharded.HasValue = true;
            }
            if ((s.HasKey("sigval") 
                        || ((sigval != default(OptionalBool)) 
                        && sigval.HasValue)))
            {
                s.Serialize("sigval", ref sigval.Value);
                sigval.HasValue = true;
            }
            if ((s.HasKey("status") 
                        || ((status != default(OptionalString)) 
                        && status.HasValue)))
            {
                s.Serialize("status", ref status.Value);
                status.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class RedisShardRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string masterHost;
        public int shardId;
        public string slaveHosts;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("masterHost", ref masterHost);
            s.Serialize("shardId", ref shardId);
            s.Serialize("slaveHosts", ref slaveHosts);
        }
    }
    [System.SerializableAttribute()]
    public partial class RealmConfigResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MapOfString config = new MapOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeDictionary<MapOfString, string>("config", ref config);
        }
    }
    [System.SerializableAttribute()]
    public partial class Customer : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public RealmsBasicAccount[] accounts;
        public OptionalString alias = new OptionalString();
        public long cid;
        public OptionalString contact = new OptionalString();
        public OptionalLong created = new OptionalLong();
        public OptionalString crm_link = new OptionalString();
        public OptionalString image = new OptionalString();
        public string name;
        public OptionalString paymentStatus = new OptionalString();
        public Project[] projects;
        public OptionalLong updated = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("accounts", ref accounts);
            if ((s.HasKey("alias") 
                        || ((alias != default(OptionalString)) 
                        && alias.HasValue)))
            {
                s.Serialize("alias", ref alias.Value);
                alias.HasValue = true;
            }
            s.Serialize("cid", ref cid);
            if ((s.HasKey("contact") 
                        || ((contact != default(OptionalString)) 
                        && contact.HasValue)))
            {
                s.Serialize("contact", ref contact.Value);
                contact.HasValue = true;
            }
            if ((s.HasKey("created") 
                        || ((created != default(OptionalLong)) 
                        && created.HasValue)))
            {
                s.Serialize("created", ref created.Value);
                created.HasValue = true;
            }
            if ((s.HasKey("crm_link") 
                        || ((crm_link != default(OptionalString)) 
                        && crm_link.HasValue)))
            {
                s.Serialize("crm_link", ref crm_link.Value);
                crm_link.HasValue = true;
            }
            if ((s.HasKey("image") 
                        || ((image != default(OptionalString)) 
                        && image.HasValue)))
            {
                s.Serialize("image", ref image.Value);
                image.HasValue = true;
            }
            s.Serialize("name", ref name);
            if ((s.HasKey("paymentStatus") 
                        || ((paymentStatus != default(OptionalString)) 
                        && paymentStatus.HasValue)))
            {
                s.Serialize("paymentStatus", ref paymentStatus.Value);
                paymentStatus.HasValue = true;
            }
            s.SerializeArray("projects", ref projects);
            if ((s.HasKey("updated") 
                        || ((updated != default(OptionalLong)) 
                        && updated.HasValue)))
            {
                s.Serialize("updated", ref updated.Value);
                updated.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class AliasAvailableRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string alias;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("alias", ref alias);
        }
    }
    [System.SerializableAttribute()]
    public partial class Promotion : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Promotable destination = new Promotable();
        public string id;
        public Promotable source = new Promotable();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("destination", ref destination);
            s.Serialize("id", ref id);
            s.Serialize("source", ref source);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetGameRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string rootPID;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("rootPID", ref rootPID);
        }
    }
    [System.SerializableAttribute()]
    public partial class InFlightFailure : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string id;
        public InFlightMessage inFlightMessage = new InFlightMessage();
        public string lastError;
        public string serviceName;
        public string serviceObjectId;
        public long timestamp;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            s.Serialize("inFlightMessage", ref inFlightMessage);
            s.Serialize("lastError", ref lastError);
            s.Serialize("serviceName", ref serviceName);
            s.Serialize("serviceObjectId", ref serviceObjectId);
            s.Serialize("timestamp", ref timestamp);
        }
    }
    [System.SerializableAttribute()]
    public partial class BatchDeleteInFlightRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] inFlightFailureIds;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("inFlightFailureIds", ref inFlightFailureIds);
        }
    }
    [System.SerializableAttribute()]
    public partial class WebSocketConfiguration : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string provider;
        public OptionalString uri = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("provider", ref provider);
            if ((s.HasKey("uri") 
                        || ((uri != default(OptionalString)) 
                        && uri.HasValue)))
            {
                s.Serialize("uri", ref uri.Value);
                uri.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class NewCustomerResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString alias = new OptionalString();
        public long cid;
        public string name;
        public string pid;
        public string projectName;
        public TokenResponse token = new TokenResponse();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("alias") 
                        || ((alias != default(OptionalString)) 
                        && alias.HasValue)))
            {
                s.Serialize("alias", ref alias.Value);
                alias.HasValue = true;
            }
            s.Serialize("cid", ref cid);
            s.Serialize("name", ref name);
            s.Serialize("pid", ref pid);
            s.Serialize("projectName", ref projectName);
            s.Serialize("token", ref token);
        }
    }
    [System.SerializableAttribute()]
    public partial class DataDomain : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] memcachedHosts;
        public OptionalArrayOfString messageBusAnalytics = new OptionalArrayOfString();
        public OptionalArrayOfString messageBusCommon = new OptionalArrayOfString();
        public string[] mongoHosts;
        public OptionalBool mongoSSL = new OptionalBool();
        public bool mongoSSLEnabled;
        public bool mongoSharded;
        public OptionalString mongoSrvAddress = new OptionalString();
        public OptionalArrayOfRedisShard redisShards = new OptionalArrayOfRedisShard();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("memcachedHosts", ref memcachedHosts);
            if ((s.HasKey("messageBusAnalytics") 
                        || ((messageBusAnalytics != default(OptionalArrayOfString)) 
                        && messageBusAnalytics.HasValue)))
            {
                s.SerializeArray("messageBusAnalytics", ref messageBusAnalytics.Value);
                messageBusAnalytics.HasValue = true;
            }
            if ((s.HasKey("messageBusCommon") 
                        || ((messageBusCommon != default(OptionalArrayOfString)) 
                        && messageBusCommon.HasValue)))
            {
                s.SerializeArray("messageBusCommon", ref messageBusCommon.Value);
                messageBusCommon.HasValue = true;
            }
            s.SerializeArray("mongoHosts", ref mongoHosts);
            if ((s.HasKey("mongoSSL") 
                        || ((mongoSSL != default(OptionalBool)) 
                        && mongoSSL.HasValue)))
            {
                s.Serialize("mongoSSL", ref mongoSSL.Value);
                mongoSSL.HasValue = true;
            }
            s.Serialize("mongoSSLEnabled", ref mongoSSLEnabled);
            s.Serialize("mongoSharded", ref mongoSharded);
            if ((s.HasKey("mongoSrvAddress") 
                        || ((mongoSrvAddress != default(OptionalString)) 
                        && mongoSrvAddress.HasValue)))
            {
                s.Serialize("mongoSrvAddress", ref mongoSrvAddress.Value);
                mongoSrvAddress.HasValue = true;
            }
            if ((s.HasKey("redisShards") 
                        || ((redisShards != default(OptionalArrayOfRedisShard)) 
                        && redisShards.HasValue)))
            {
                s.SerializeArray("redisShards", ref redisShards.Value);
                redisShards.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ServicePlansResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public ServicePlan[] result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class RenameProjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string newName;
        public string projectId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("newName", ref newName);
            s.Serialize("projectId", ref projectId);
        }
    }
    [System.SerializableAttribute()]
    public partial class NewGameRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string gameName;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("gameName", ref gameName);
        }
    }
    [System.SerializableAttribute()]
    public partial class CreateProjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public OptionalString parent = new OptionalString();
        public OptionalString plan = new OptionalString();
        public OptionalBool sharded = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
            if ((s.HasKey("parent") 
                        || ((parent != default(OptionalString)) 
                        && parent.HasValue)))
            {
                s.Serialize("parent", ref parent.Value);
                parent.HasValue = true;
            }
            if ((s.HasKey("plan") 
                        || ((plan != default(OptionalString)) 
                        && plan.HasValue)))
            {
                s.Serialize("plan", ref plan.Value);
                plan.HasValue = true;
            }
            if ((s.HasKey("sharded") 
                        || ((sharded != default(OptionalBool)) 
                        && sharded.HasValue)))
            {
                s.Serialize("sharded", ref sharded.Value);
                sharded.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class UnarchiveProjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string projectId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("projectId", ref projectId);
        }
    }
    [System.SerializableAttribute()]
    public partial class RedisShard : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string masterHost;
        public int shardId;
        public string[] slaveHosts;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("masterHost", ref masterHost);
            s.Serialize("shardId", ref shardId);
            s.SerializeArray("slaveHosts", ref slaveHosts);
        }
    }
    [System.SerializableAttribute()]
    public partial class PromoteRealmResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public PromotionScope[] scopes;
        public string sourcePid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("scopes", ref scopes);
            s.Serialize("sourcePid", ref sourcePid);
        }
    }
    [System.SerializableAttribute()]
    public partial class RemoveLaunchMessageRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string file;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("file", ref file);
        }
    }
    [System.SerializableAttribute()]
    public partial class ProjectView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool archived = new OptionalBool();
        public OptionalArrayOfString children = new OptionalArrayOfString();
        public OptionalLong cid = new OptionalLong();
        public OptionalString parent = new OptionalString();
        public string pid;
        public string projectName;
        public OptionalString secret = new OptionalString();
        public OptionalBool sharded = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("archived") 
                        || ((archived != default(OptionalBool)) 
                        && archived.HasValue)))
            {
                s.Serialize("archived", ref archived.Value);
                archived.HasValue = true;
            }
            if ((s.HasKey("children") 
                        || ((children != default(OptionalArrayOfString)) 
                        && children.HasValue)))
            {
                s.SerializeArray("children", ref children.Value);
                children.HasValue = true;
            }
            if ((s.HasKey("cid") 
                        || ((cid != default(OptionalLong)) 
                        && cid.HasValue)))
            {
                s.Serialize("cid", ref cid.Value);
                cid.HasValue = true;
            }
            if ((s.HasKey("parent") 
                        || ((parent != default(OptionalString)) 
                        && parent.HasValue)))
            {
                s.Serialize("parent", ref parent.Value);
                parent.HasValue = true;
            }
            s.Serialize("pid", ref pid);
            s.Serialize("projectName", ref projectName);
            if ((s.HasKey("secret") 
                        || ((secret != default(OptionalString)) 
                        && secret.HasValue)))
            {
                s.Serialize("secret", ref secret.Value);
                secret.HasValue = true;
            }
            if ((s.HasKey("sharded") 
                        || ((sharded != default(OptionalBool)) 
                        && sharded.HasValue)))
            {
                s.Serialize("sharded", ref sharded.Value);
                sharded.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class RealmsBasicAccount : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong created = new OptionalLong();
        public string password;
        public string[] projects;
        public string user;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("created") 
                        || ((created != default(OptionalLong)) 
                        && created.HasValue)))
            {
                s.Serialize("created", ref created.Value);
                created.HasValue = true;
            }
            s.Serialize("password", ref password);
            s.SerializeArray("projects", ref projects);
            s.Serialize("user", ref user);
        }
    }
    public enum InvitationDirection
    {
        Incoming,
        Outgoing,
    }
    public class InvitationDirectionExtensions
    {
        public static string ToEnumString(InvitationDirection val)
        {
            if ((InvitationDirection.Incoming == val))
            {
                return "incoming";
            }
            if ((InvitationDirection.Outgoing == val))
            {
                return "outgoing";
            }
            throw new System.ArgumentException("Unknown enum value");
        }
        public static InvitationDirection FromEnumString(string str)
        {
            if (("incoming" == str))
            {
                return InvitationDirection.Incoming;
            }
            if (("outgoing" == str))
            {
                return InvitationDirection.Outgoing;
            }
            throw new System.ArgumentException("Unknown string value");
        }
    }
    public enum FriendSource
    {
        Native,
        Facebook,
    }
    public class FriendSourceExtensions
    {
        public static string ToEnumString(FriendSource val)
        {
            if ((FriendSource.Native == val))
            {
                return "native";
            }
            if ((FriendSource.Facebook == val))
            {
                return "facebook";
            }
            throw new System.ArgumentException("Unknown enum value");
        }
        public static FriendSource FromEnumString(string str)
        {
            if (("native" == str))
            {
                return FriendSource.Native;
            }
            if (("facebook" == str))
            {
                return FriendSource.Facebook;
            }
            throw new System.ArgumentException("Unknown string value");
        }
    }
    [System.SerializableAttribute()]
    public partial class Player : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string playerId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("playerId", ref playerId);
        }
    }
    [System.SerializableAttribute()]
    public partial class Friend : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string playerId;
        public FriendSource source = new FriendSource();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("playerId", ref playerId);
            s.SerializeEnum("source", ref source, FriendSourceExtensions.ToEnumString, FriendSourceExtensions.FromEnumString);
        }
    }
    [System.SerializableAttribute()]
    public partial class Invite : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public InvitationDirection direction = new InvitationDirection();
        public string playerId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeEnum("direction", ref direction, InvitationDirectionExtensions.ToEnumString, InvitationDirectionExtensions.FromEnumString);
            s.Serialize("playerId", ref playerId);
        }
    }
    [System.SerializableAttribute()]
    public partial class Social : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Player[] blocked;
        public Friend[] friends;
        public Invite[] invites;
        public string playerId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("blocked", ref blocked);
            s.SerializeArray("friends", ref friends);
            s.SerializeArray("invites", ref invites);
            s.Serialize("playerId", ref playerId);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetSocialStatusesResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Social[] statuses;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("statuses", ref statuses);
        }
    }
    [System.SerializableAttribute()]
    public partial class PlayerIdRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string playerId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("playerId", ref playerId);
        }
    }
    [System.SerializableAttribute()]
    public partial class FriendshipStatus : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string friendId;
        public bool isBlocked;
        public string playerId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("friendId", ref friendId);
            s.Serialize("isBlocked", ref isBlocked);
            s.Serialize("playerId", ref playerId);
        }
    }
    [System.SerializableAttribute()]
    public partial class MakeFriendshipRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long gamerTag;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("gamerTag", ref gamerTag);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetSocialStatusesRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] playerIds;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("playerIds", ref playerIds);
        }
    }
    [System.SerializableAttribute()]
    public partial class ImportFriendsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string source;
        public string token;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("source", ref source);
            s.Serialize("token", ref token);
        }
    }
    [System.SerializableAttribute()]
    public partial class SendFriendRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long gamerTag;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("gamerTag", ref gamerTag);
        }
    }
    [System.SerializableAttribute()]
    public partial class OfferDefinition : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] descriptions;
        public string[] images;
        public OptionalCommerceLootRoll lootRoll = new OptionalCommerceLootRoll();
        public OptionalString metadata = new OptionalString();
        public string[] obtain;
        public OptionalArrayOfCurrencyChange obtainCurrency = new OptionalArrayOfCurrencyChange();
        public OptionalArrayOfItemCreateRequest obtainItems = new OptionalArrayOfItemCreateRequest();
        public string symbol;
        public string[] titles;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("descriptions", ref descriptions);
            s.SerializeArray("images", ref images);
            if ((s.HasKey("lootRoll") 
                        || ((lootRoll != default(OptionalCommerceLootRoll)) 
                        && lootRoll.HasValue)))
            {
                s.Serialize("lootRoll", ref lootRoll.Value);
                lootRoll.HasValue = true;
            }
            if ((s.HasKey("metadata") 
                        || ((metadata != default(OptionalString)) 
                        && metadata.HasValue)))
            {
                s.Serialize("metadata", ref metadata.Value);
                metadata.HasValue = true;
            }
            s.SerializeArray("obtain", ref obtain);
            if ((s.HasKey("obtainCurrency") 
                        || ((obtainCurrency != default(OptionalArrayOfCurrencyChange)) 
                        && obtainCurrency.HasValue)))
            {
                s.SerializeArray("obtainCurrency", ref obtainCurrency.Value);
                obtainCurrency.HasValue = true;
            }
            if ((s.HasKey("obtainItems") 
                        || ((obtainItems != default(OptionalArrayOfItemCreateRequest)) 
                        && obtainItems.HasValue)))
            {
                s.SerializeArray("obtainItems", ref obtainItems.Value);
                obtainItems.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
            s.SerializeArray("titles", ref titles);
        }
    }
    [System.SerializableAttribute()]
    public partial class EntitlementRequirement : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string constraint;
        public OptionalString specialization = new OptionalString();
        public string state;
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("constraint", ref constraint);
            if ((s.HasKey("specialization") 
                        || ((specialization != default(OptionalString)) 
                        && specialization.HasValue)))
            {
                s.Serialize("specialization", ref specialization.Value);
                specialization.HasValue = true;
            }
            s.Serialize("state", ref state);
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetSkusReq : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong version = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("version") 
                        || ((version != default(OptionalLong)) 
                        && version.HasValue)))
            {
                s.Serialize("version", ref version.Value);
                version.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Listing : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalInt activeDurationCoolDownSeconds = new OptionalInt();
        public OptionalInt activeDurationPurchaseLimit = new OptionalInt();
        public OptionalInt activeDurationSeconds = new OptionalInt();
        public OptionalPeriod activePeriod = new OptionalPeriod();
        public OptionalMapOfString buttonText = new OptionalMapOfString();
        public MapOfString clientData = new MapOfString();
        public CohortRequirement[] cohortRequirements;
        public EntitlementRequirement[] entitlementRequirements;
        public OfferRequirement[] offerRequirements;
        public string offerSymbol;
        public PlayerStatRequirement[] playerStatRequirements;
        public Price price = new Price();
        public OptionalInt purchaseLimit = new OptionalInt();
        public OptionalSchedule schedule = new OptionalSchedule();
        public OptionalInt scheduleInstancePurchaseLimit = new OptionalInt();
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("activeDurationCoolDownSeconds") 
                        || ((activeDurationCoolDownSeconds != default(OptionalInt)) 
                        && activeDurationCoolDownSeconds.HasValue)))
            {
                s.Serialize("activeDurationCoolDownSeconds", ref activeDurationCoolDownSeconds.Value);
                activeDurationCoolDownSeconds.HasValue = true;
            }
            if ((s.HasKey("activeDurationPurchaseLimit") 
                        || ((activeDurationPurchaseLimit != default(OptionalInt)) 
                        && activeDurationPurchaseLimit.HasValue)))
            {
                s.Serialize("activeDurationPurchaseLimit", ref activeDurationPurchaseLimit.Value);
                activeDurationPurchaseLimit.HasValue = true;
            }
            if ((s.HasKey("activeDurationSeconds") 
                        || ((activeDurationSeconds != default(OptionalInt)) 
                        && activeDurationSeconds.HasValue)))
            {
                s.Serialize("activeDurationSeconds", ref activeDurationSeconds.Value);
                activeDurationSeconds.HasValue = true;
            }
            if ((s.HasKey("activePeriod") 
                        || ((activePeriod != default(OptionalPeriod)) 
                        && activePeriod.HasValue)))
            {
                s.Serialize("activePeriod", ref activePeriod.Value);
                activePeriod.HasValue = true;
            }
            if ((s.HasKey("buttonText") 
                        || ((buttonText != default(OptionalMapOfString)) 
                        && buttonText.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("buttonText", ref buttonText.Value);
                buttonText.HasValue = true;
            }
            s.SerializeDictionary<MapOfString, string>("clientData", ref clientData);
            s.SerializeArray("cohortRequirements", ref cohortRequirements);
            s.SerializeArray("entitlementRequirements", ref entitlementRequirements);
            s.SerializeArray("offerRequirements", ref offerRequirements);
            s.Serialize("offerSymbol", ref offerSymbol);
            s.SerializeArray("playerStatRequirements", ref playerStatRequirements);
            s.Serialize("price", ref price);
            if ((s.HasKey("purchaseLimit") 
                        || ((purchaseLimit != default(OptionalInt)) 
                        && purchaseLimit.HasValue)))
            {
                s.Serialize("purchaseLimit", ref purchaseLimit.Value);
                purchaseLimit.HasValue = true;
            }
            if ((s.HasKey("schedule") 
                        || ((schedule != default(OptionalSchedule)) 
                        && schedule.HasValue)))
            {
                s.Serialize("schedule", ref schedule.Value);
                schedule.HasValue = true;
            }
            if ((s.HasKey("scheduleInstancePurchaseLimit") 
                        || ((scheduleInstancePurchaseLimit != default(OptionalInt)) 
                        && scheduleInstancePurchaseLimit.HasValue)))
            {
                s.Serialize("scheduleInstancePurchaseLimit", ref scheduleInstancePurchaseLimit.Value);
                scheduleInstancePurchaseLimit.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class ResultResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class SKU : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string description;
        public string name;
        public MapOfString productIds = new MapOfString();
        public int realPrice;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("description", ref description);
            s.Serialize("name", ref name);
            s.SerializeDictionary<MapOfString, string>("productIds", ref productIds);
            s.Serialize("realPrice", ref realPrice);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetCatalogResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalCatalog catalog = new OptionalCatalog();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("catalog") 
                        || ((catalog != default(OptionalCatalog)) 
                        && catalog.HasValue)))
            {
                s.Serialize("catalog", ref catalog.Value);
                catalog.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class SKUDefinitions : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long created;
        public SKU[] definitions;
        public long version;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("created", ref created);
            s.SerializeArray("definitions", ref definitions);
            s.Serialize("version", ref version);
        }
    }
    [System.SerializableAttribute()]
    public partial class Price : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalInt amount = new OptionalInt();
        public OptionalArrayOfInt schedule = new OptionalArrayOfInt();
        public string symbol;
        public string type;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("amount") 
                        || ((amount != default(OptionalInt)) 
                        && amount.HasValue)))
            {
                s.Serialize("amount", ref amount.Value);
                amount.HasValue = true;
            }
            if ((s.HasKey("schedule") 
                        || ((schedule != default(OptionalArrayOfInt)) 
                        && schedule.HasValue)))
            {
                s.SerializeArray("schedule", ref schedule.Value);
                schedule.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
            s.Serialize("type", ref type);
        }
    }
    [System.SerializableAttribute()]
    public partial class CommerceLootRoll : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfString externalTables = new OptionalArrayOfString();
        public bool preroll;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("externalTables") 
                        || ((externalTables != default(OptionalArrayOfString)) 
                        && externalTables.HasValue)))
            {
                s.SerializeArray("externalTables", ref externalTables.Value);
                externalTables.HasValue = true;
            }
            s.Serialize("preroll", ref preroll);
        }
    }
    [System.SerializableAttribute()]
    public partial class Period : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString end = new OptionalString();
        public string start;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("end") 
                        || ((end != default(OptionalString)) 
                        && end.HasValue)))
            {
                s.Serialize("end", ref end.Value);
                end.HasValue = true;
            }
            s.Serialize("start", ref start);
        }
    }
    [System.SerializableAttribute()]
    public partial class OfferConstraint : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string constraint;
        public int value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("constraint", ref constraint);
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetSKUsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public SKUDefinitions skus = new SKUDefinitions();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("skus", ref skus);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetCatalogReq : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong version = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("version") 
                        || ((version != default(OptionalLong)) 
                        && version.HasValue)))
            {
                s.Serialize("version", ref version.Value);
                version.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class SaveCatalogRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OfferDefinition[] offerDefinitions;
        public Store[] stores;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("offerDefinitions", ref offerDefinitions);
            s.SerializeArray("stores", ref stores);
        }
    }
    [System.SerializableAttribute()]
    public partial class SaveSKUsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public SKU[] definitions;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("definitions", ref definitions);
        }
    }
    [System.SerializableAttribute()]
    public partial class OfferRequirement : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string offerSymbol;
        public OfferConstraint purchases = new OfferConstraint();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("offerSymbol", ref offerSymbol);
            s.Serialize("purchases", ref purchases);
        }
    }
    [System.SerializableAttribute()]
    public partial class CohortRequirement : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string cohort;
        public string constraint;
        public string trial;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("cohort", ref cohort);
            s.Serialize("constraint", ref constraint);
            s.Serialize("trial", ref trial);
        }
    }
    [System.SerializableAttribute()]
    public partial class Catalog : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long created;
        public OfferDefinition[] offerDefinitions;
        public Store[] stores;
        public long version;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("created", ref created);
            s.SerializeArray("offerDefinitions", ref offerDefinitions);
            s.SerializeArray("stores", ref stores);
            s.Serialize("version", ref version);
        }
    }
    [System.SerializableAttribute()]
    public partial class Store : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalInt activeListingLimit = new OptionalInt();
        public OptionalInt choose = new OptionalInt();
        public Listing[] listings;
        public OptionalInt refreshTime = new OptionalInt();
        public OptionalBool showInactiveListings = new OptionalBool();
        public string symbol;
        public OptionalString title = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("activeListingLimit") 
                        || ((activeListingLimit != default(OptionalInt)) 
                        && activeListingLimit.HasValue)))
            {
                s.Serialize("activeListingLimit", ref activeListingLimit.Value);
                activeListingLimit.HasValue = true;
            }
            if ((s.HasKey("choose") 
                        || ((choose != default(OptionalInt)) 
                        && choose.HasValue)))
            {
                s.Serialize("choose", ref choose.Value);
                choose.HasValue = true;
            }
            s.SerializeArray("listings", ref listings);
            if ((s.HasKey("refreshTime") 
                        || ((refreshTime != default(OptionalInt)) 
                        && refreshTime.HasValue)))
            {
                s.Serialize("refreshTime", ref refreshTime.Value);
                refreshTime.HasValue = true;
            }
            if ((s.HasKey("showInactiveListings") 
                        || ((showInactiveListings != default(OptionalBool)) 
                        && showInactiveListings.HasValue)))
            {
                s.Serialize("showInactiveListings", ref showInactiveListings.Value);
                showInactiveListings.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
            if ((s.HasKey("title") 
                        || ((title != default(OptionalString)) 
                        && title.HasValue)))
            {
                s.Serialize("title", ref title.Value);
                title.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ReportPurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool free = new OptionalBool();
        public string listingId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("free") 
                        || ((free != default(OptionalBool)) 
                        && free.HasValue)))
            {
                s.Serialize("free", ref free.Value);
                free.HasValue = true;
            }
            s.Serialize("listingId", ref listingId);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetActiveListingRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string listing;
        public OptionalString store = new OptionalString();
        public OptionalString time = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("listing", ref listing);
            if ((s.HasKey("store") 
                        || ((store != default(OptionalString)) 
                        && store.HasValue)))
            {
                s.Serialize("store", ref store.Value);
                store.HasValue = true;
            }
            if ((s.HasKey("time") 
                        || ((time != default(OptionalString)) 
                        && time.HasValue)))
            {
                s.Serialize("time", ref time.Value);
                time.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GetOffersReq : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString language = new OptionalString();
        public OptionalString stores = new OptionalString();
        public OptionalString time = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("language") 
                        || ((language != default(OptionalString)) 
                        && language.HasValue)))
            {
                s.Serialize("language", ref language.Value);
                language.HasValue = true;
            }
            if ((s.HasKey("stores") 
                        || ((stores != default(OptionalString)) 
                        && stores.HasValue)))
            {
                s.Serialize("stores", ref stores.Value);
                stores.HasValue = true;
            }
            if ((s.HasKey("time") 
                        || ((time != default(OptionalString)) 
                        && time.HasValue)))
            {
                s.Serialize("time", ref time.Value);
                time.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ClearStatusRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string store;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("store", ref store);
        }
    }
    [System.SerializableAttribute()]
    public partial class PlayerListingView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool active;
        public MapOfString clientData = new MapOfString();
        public ClientDataEntry[] clientDataList;
        public OptionalInt cooldown = new OptionalInt();
        public PlayerOfferView offer = new PlayerOfferView();
        public OptionalInt purchasesRemain = new OptionalInt();
        public bool queryAfterPurchase;
        public long secondsActive;
        public OptionalLong secondsRemain = new OptionalLong();
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("active", ref active);
            s.SerializeDictionary<MapOfString, string>("clientData", ref clientData);
            s.SerializeArray("clientDataList", ref clientDataList);
            if ((s.HasKey("cooldown") 
                        || ((cooldown != default(OptionalInt)) 
                        && cooldown.HasValue)))
            {
                s.Serialize("cooldown", ref cooldown.Value);
                cooldown.HasValue = true;
            }
            s.Serialize("offer", ref offer);
            if ((s.HasKey("purchasesRemain") 
                        || ((purchasesRemain != default(OptionalInt)) 
                        && purchasesRemain.HasValue)))
            {
                s.Serialize("purchasesRemain", ref purchasesRemain.Value);
                purchasesRemain.HasValue = true;
            }
            s.Serialize("queryAfterPurchase", ref queryAfterPurchase);
            s.Serialize("secondsActive", ref secondsActive);
            if ((s.HasKey("secondsRemain") 
                        || ((secondsRemain != default(OptionalLong)) 
                        && secondsRemain.HasValue)))
            {
                s.Serialize("secondsRemain", ref secondsRemain.Value);
                secondsRemain.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class StatSubscriptionNotification : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MapOfString statsAfter = new MapOfString();
        public MapOfString statsBefore = new MapOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeDictionary<MapOfString, string>("statsAfter", ref statsAfter);
            s.SerializeDictionary<MapOfString, string>("statsBefore", ref statsBefore);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetTotalCouponResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long count;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("count", ref count);
        }
    }
    [System.SerializableAttribute()]
    public partial class GiveCouponReq : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string listing;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("listing", ref listing);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetStoresReq : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString scope = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("scope") 
                        || ((scope != default(OptionalString)) 
                        && scope.HasValue)))
            {
                s.Serialize("scope", ref scope.Value);
                scope.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class PlayerStoreView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public PlayerListingView[] listings;
        public OptionalLong nextDeltaSeconds = new OptionalLong();
        public OptionalLong secondsRemain = new OptionalLong();
        public string symbol;
        public OptionalString title = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("listings", ref listings);
            if ((s.HasKey("nextDeltaSeconds") 
                        || ((nextDeltaSeconds != default(OptionalLong)) 
                        && nextDeltaSeconds.HasValue)))
            {
                s.Serialize("nextDeltaSeconds", ref nextDeltaSeconds.Value);
                nextDeltaSeconds.HasValue = true;
            }
            if ((s.HasKey("secondsRemain") 
                        || ((secondsRemain != default(OptionalLong)) 
                        && secondsRemain.HasValue)))
            {
                s.Serialize("secondsRemain", ref secondsRemain.Value);
                secondsRemain.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
            if ((s.HasKey("title") 
                        || ((title != default(OptionalString)) 
                        && title.HasValue)))
            {
                s.Serialize("title", ref title.Value);
                title.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class PurchaseRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string purchaseId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("purchaseId", ref purchaseId);
        }
    }
    [System.SerializableAttribute()]
    public partial class PlayerOfferView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString buttonText = new OptionalString();
        public int coupons;
        public string[] descriptions;
        public string[] images;
        public string[] obtain;
        public CurrencyChange[] obtainCurrency;
        public ItemCreateRequest[] obtainItems;
        public Price price = new Price();
        public string symbol;
        public string[] titles;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("buttonText") 
                        || ((buttonText != default(OptionalString)) 
                        && buttonText.HasValue)))
            {
                s.Serialize("buttonText", ref buttonText.Value);
                buttonText.HasValue = true;
            }
            s.Serialize("coupons", ref coupons);
            s.SerializeArray("descriptions", ref descriptions);
            s.SerializeArray("images", ref images);
            s.SerializeArray("obtain", ref obtain);
            s.SerializeArray("obtainCurrency", ref obtainCurrency);
            s.SerializeArray("obtainItems", ref obtainItems);
            s.Serialize("price", ref price);
            s.Serialize("symbol", ref symbol);
            s.SerializeArray("titles", ref titles);
        }
    }
    [System.SerializableAttribute()]
    public partial class ActiveListingResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public PlayerListingView listing = new PlayerListingView();
        public string storeSymbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("listing", ref listing);
            s.Serialize("storeSymbol", ref storeSymbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class UpdateListingCooldownRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public int cooldownReduction;
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("cooldownReduction", ref cooldownReduction);
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetActiveOffersResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public PlayerStoreView[] stores;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("stores", ref stores);
        }
    }
    [System.SerializableAttribute()]
    public partial class CooldownModifierRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long gamerTag;
        public UpdateListingCooldownRequest[] updateListingCooldownRequests;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("gamerTag", ref gamerTag);
            s.SerializeArray("updateListingCooldownRequests", ref updateListingCooldownRequests);
        }
    }
    [System.SerializableAttribute()]
    public partial class ClientDataEntry : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public string value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class RewardCalendarDay : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public EntitlementGenerator[] obtain;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("obtain", ref obtain);
        }
    }
    [System.SerializableAttribute()]
    public partial class CalendarView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public RewardCalendarDay[] days;
        public string id;
        public long nextClaimSeconds;
        public int nextIndex;
        public long remainingSeconds;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("days", ref days);
            s.Serialize("id", ref id);
            s.Serialize("nextClaimSeconds", ref nextClaimSeconds);
            s.Serialize("nextIndex", ref nextIndex);
            s.Serialize("remainingSeconds", ref remainingSeconds);
        }
    }
    [System.SerializableAttribute()]
    public partial class CalendarClaimRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
        }
    }
    [System.SerializableAttribute()]
    public partial class CalendarQueryResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public CalendarView[] calendars;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("calendars", ref calendars);
        }
    }
    [System.SerializableAttribute()]
    public partial class ListTagsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] tags;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("tags", ref tags);
        }
    }
    [System.SerializableAttribute()]
    public partial class WebhookComet : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString description = new OptionalString();
        public string method;
        public RouteParameters parameters = new RouteParameters();
        public ServiceRoute route = new ServiceRoute();
        public string symbol;
        public RouteVariables variables = new RouteVariables();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("description") 
                        || ((description != default(OptionalString)) 
                        && description.HasValue)))
            {
                s.Serialize("description", ref description.Value);
                description.HasValue = true;
            }
            s.Serialize("method", ref method);
            s.Serialize("parameters", ref parameters);
            s.Serialize("route", ref route);
            s.Serialize("symbol", ref symbol);
            s.Serialize("variables", ref variables);
        }
    }
    public enum WebhookServiceType
    {
        UserMicroservice,
        ObjectService,
        BasicService,
    }
    public class WebhookServiceTypeExtensions
    {
        public static string ToEnumString(WebhookServiceType val)
        {
            if ((WebhookServiceType.UserMicroservice == val))
            {
                return "UserMicroservice";
            }
            if ((WebhookServiceType.ObjectService == val))
            {
                return "ObjectService";
            }
            if ((WebhookServiceType.BasicService == val))
            {
                return "BasicService";
            }
            throw new System.ArgumentException("Unknown enum value");
        }
        public static WebhookServiceType FromEnumString(string str)
        {
            if (("UserMicroservice" == str))
            {
                return WebhookServiceType.UserMicroservice;
            }
            if (("ObjectService" == str))
            {
                return WebhookServiceType.ObjectService;
            }
            if (("BasicService" == str))
            {
                return WebhookServiceType.BasicService;
            }
            throw new System.ArgumentException("Unknown string value");
        }
    }
    [System.SerializableAttribute()]
    public partial class AnnouncementContent : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfAnnouncementAttachment attachments = new OptionalArrayOfAnnouncementAttachment();
        public string body;
        public string channel;
        public OptionalMapOfString clientData = new OptionalMapOfString();
        public OptionalString end_date = new OptionalString();
        public OptionalPlayerReward gift = new OptionalPlayerReward();
        public OptionalString start_date = new OptionalString();
        public OptionalArrayOfPlayerStatRequirement stat_requirements = new OptionalArrayOfPlayerStatRequirement();
        public string summary;
        public string symbol;
        public OptionalArrayOfString tags = new OptionalArrayOfString();
        public string title;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("attachments") 
                        || ((attachments != default(OptionalArrayOfAnnouncementAttachment)) 
                        && attachments.HasValue)))
            {
                s.SerializeArray("attachments", ref attachments.Value);
                attachments.HasValue = true;
            }
            s.Serialize("body", ref body);
            s.Serialize("channel", ref channel);
            if ((s.HasKey("clientData") 
                        || ((clientData != default(OptionalMapOfString)) 
                        && clientData.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("clientData", ref clientData.Value);
                clientData.HasValue = true;
            }
            if ((s.HasKey("end_date") 
                        || ((end_date != default(OptionalString)) 
                        && end_date.HasValue)))
            {
                s.Serialize("end_date", ref end_date.Value);
                end_date.HasValue = true;
            }
            if ((s.HasKey("gift") 
                        || ((gift != default(OptionalPlayerReward)) 
                        && gift.HasValue)))
            {
                s.Serialize("gift", ref gift.Value);
                gift.HasValue = true;
            }
            if ((s.HasKey("start_date") 
                        || ((start_date != default(OptionalString)) 
                        && start_date.HasValue)))
            {
                s.Serialize("start_date", ref start_date.Value);
                start_date.HasValue = true;
            }
            if ((s.HasKey("stat_requirements") 
                        || ((stat_requirements != default(OptionalArrayOfPlayerStatRequirement)) 
                        && stat_requirements.HasValue)))
            {
                s.SerializeArray("stat_requirements", ref stat_requirements.Value);
                stat_requirements.HasValue = true;
            }
            s.Serialize("summary", ref summary);
            s.Serialize("symbol", ref symbol);
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfString)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
            s.Serialize("title", ref title);
        }
    }
    public enum WebhookInvocationType
    {
        NonBlocking,
        Blocking,
    }
    public class WebhookInvocationTypeExtensions
    {
        public static string ToEnumString(WebhookInvocationType val)
        {
            if ((WebhookInvocationType.NonBlocking == val))
            {
                return "NonBlocking";
            }
            if ((WebhookInvocationType.Blocking == val))
            {
                return "Blocking";
            }
            throw new System.ArgumentException("Unknown enum value");
        }
        public static WebhookInvocationType FromEnumString(string str)
        {
            if (("NonBlocking" == str))
            {
                return WebhookInvocationType.NonBlocking;
            }
            if (("Blocking" == str))
            {
                return WebhookInvocationType.Blocking;
            }
            throw new System.ArgumentException("Unknown string value");
        }
    }
    [System.SerializableAttribute()]
    public partial class AnnouncementContentResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public AnnouncementContent[] content;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("content", ref content);
        }
    }
    [System.SerializableAttribute()]
    public partial class LocalizationRef : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString defaultValue = new OptionalString();
        public bool empty;
        public string localizationId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("defaultValue") 
                        || ((defaultValue != default(OptionalString)) 
                        && defaultValue.HasValue)))
            {
                s.Serialize("defaultValue", ref defaultValue.Value);
                defaultValue.HasValue = true;
            }
            s.Serialize("empty", ref empty);
            s.Serialize("localizationId", ref localizationId);
        }
    }
    [System.SerializableAttribute()]
    public partial class AnnouncementAttachment : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public int count;
        public OptionalArrayOfAttachmentProperty properties = new OptionalArrayOfAttachmentProperty();
        public string symbol;
        public OptionalString type = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("count", ref count);
            if ((s.HasKey("properties") 
                        || ((properties != default(OptionalArrayOfAttachmentProperty)) 
                        && properties.HasValue)))
            {
                s.SerializeArray("properties", ref properties.Value);
                properties.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
            if ((s.HasKey("type") 
                        || ((type != default(OptionalString)) 
                        && type.HasValue)))
            {
                s.Serialize("type", ref type.Value);
                type.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class RouteVariable : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public string typeName;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
            s.Serialize("typeName", ref typeName);
        }
    }
    [System.SerializableAttribute()]
    public partial class WebhookInvocationStrategy : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public WebhookInvocationType invocationType = new WebhookInvocationType();
        public WebhookRetryType retryType = new WebhookRetryType();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeEnum("invocationType", ref invocationType, WebhookInvocationTypeExtensions.ToEnumString, WebhookInvocationTypeExtensions.FromEnumString);
            s.SerializeEnum("retryType", ref retryType, WebhookRetryTypeExtensions.ToEnumString, WebhookRetryTypeExtensions.FromEnumString);
        }
    }
    [System.SerializableAttribute()]
    public partial class RouteParameter : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string body;
        public string name;
        public string typeName;
        public OptionalVariableReference variableRef = new OptionalVariableReference();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("body", ref body);
            s.Serialize("name", ref name);
            s.Serialize("typeName", ref typeName);
            if ((s.HasKey("variableRef") 
                        || ((variableRef != default(OptionalVariableReference)) 
                        && variableRef.HasValue)))
            {
                s.Serialize("variableRef", ref variableRef.Value);
                variableRef.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class RouteVariables : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public RouteVariable[] variables;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("variables", ref variables);
        }
    }
    [System.SerializableAttribute()]
    public partial class PlayerReward : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MapOfString addCurrencyMap = new MapOfString();
        public ItemCreateRequest[] addItemRequests;
        public OptionalArrayOfNewItemReward addItems = new OptionalArrayOfNewItemReward();
        public OptionalBool applyVipBonus = new OptionalBool();
        public OptionalArrayOfWebhookReward callWebhooks = new OptionalArrayOfWebhookReward();
        public OptionalArrayOfCurrencyChangeReward changeCurrencies = new OptionalArrayOfCurrencyChangeReward();
        public OptionalString description = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeDictionary<MapOfString, string>("addCurrencyMap", ref addCurrencyMap);
            s.SerializeArray("addItemRequests", ref addItemRequests);
            if ((s.HasKey("addItems") 
                        || ((addItems != default(OptionalArrayOfNewItemReward)) 
                        && addItems.HasValue)))
            {
                s.SerializeArray("addItems", ref addItems.Value);
                addItems.HasValue = true;
            }
            if ((s.HasKey("applyVipBonus") 
                        || ((applyVipBonus != default(OptionalBool)) 
                        && applyVipBonus.HasValue)))
            {
                s.Serialize("applyVipBonus", ref applyVipBonus.Value);
                applyVipBonus.HasValue = true;
            }
            if ((s.HasKey("callWebhooks") 
                        || ((callWebhooks != default(OptionalArrayOfWebhookReward)) 
                        && callWebhooks.HasValue)))
            {
                s.SerializeArray("callWebhooks", ref callWebhooks.Value);
                callWebhooks.HasValue = true;
            }
            if ((s.HasKey("changeCurrencies") 
                        || ((changeCurrencies != default(OptionalArrayOfCurrencyChangeReward)) 
                        && changeCurrencies.HasValue)))
            {
                s.SerializeArray("changeCurrencies", ref changeCurrencies.Value);
                changeCurrencies.HasValue = true;
            }
            if ((s.HasKey("description") 
                        || ((description != default(OptionalString)) 
                        && description.HasValue)))
            {
                s.Serialize("description", ref description.Value);
                description.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class VariableReference : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
        }
    }
    [System.SerializableAttribute()]
    public partial class AttachmentProperty : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public string value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class RouteParameters : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString objectId = new OptionalString();
        public RouteParameter[] parameters;
        public OptionalString payload = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("objectId") 
                        || ((objectId != default(OptionalString)) 
                        && objectId.HasValue)))
            {
                s.Serialize("objectId", ref objectId.Value);
                objectId.HasValue = true;
            }
            s.SerializeArray("parameters", ref parameters);
            if ((s.HasKey("payload") 
                        || ((payload != default(OptionalString)) 
                        && payload.HasValue)))
            {
                s.Serialize("payload", ref payload.Value);
                payload.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ListDefinitionsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public AnnouncementDto[] content;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("content", ref content);
        }
    }
    [System.SerializableAttribute()]
    public partial class ServiceRoute : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string endpoint;
        public string service;
        public WebhookServiceType serviceTypeStr = new WebhookServiceType();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("endpoint", ref endpoint);
            s.Serialize("service", ref service);
            s.SerializeEnum("serviceTypeStr", ref serviceTypeStr, WebhookServiceTypeExtensions.ToEnumString, WebhookServiceTypeExtensions.FromEnumString);
        }
    }
    [System.SerializableAttribute()]
    public partial class CurrencyChangeReward : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long amount;
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("amount", ref amount);
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class DeleteAnnouncementRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("symbol", ref symbol);
        }
    }
    [System.SerializableAttribute()]
    public partial class ListTagsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString tagNameFilter = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("tagNameFilter") 
                        || ((tagNameFilter != default(OptionalString)) 
                        && tagNameFilter.HasValue)))
            {
                s.Serialize("tagNameFilter", ref tagNameFilter.Value);
                tagNameFilter.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class AnnouncementDto : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfAnnouncementAttachment attachments = new OptionalArrayOfAnnouncementAttachment();
        public LocalizationRef body = new LocalizationRef();
        public string channel;
        public OptionalMapOfString clientData = new OptionalMapOfString();
        public OptionalString end_date = new OptionalString();
        public OptionalPlayerReward gift = new OptionalPlayerReward();
        public OptionalString start_date = new OptionalString();
        public OptionalArrayOfPlayerStatRequirement stat_requirements = new OptionalArrayOfPlayerStatRequirement();
        public LocalizationRef summary = new LocalizationRef();
        public string symbol;
        public OptionalArrayOfString tags = new OptionalArrayOfString();
        public LocalizationRef title = new LocalizationRef();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("attachments") 
                        || ((attachments != default(OptionalArrayOfAnnouncementAttachment)) 
                        && attachments.HasValue)))
            {
                s.SerializeArray("attachments", ref attachments.Value);
                attachments.HasValue = true;
            }
            s.Serialize("body", ref body);
            s.Serialize("channel", ref channel);
            if ((s.HasKey("clientData") 
                        || ((clientData != default(OptionalMapOfString)) 
                        && clientData.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("clientData", ref clientData.Value);
                clientData.HasValue = true;
            }
            if ((s.HasKey("end_date") 
                        || ((end_date != default(OptionalString)) 
                        && end_date.HasValue)))
            {
                s.Serialize("end_date", ref end_date.Value);
                end_date.HasValue = true;
            }
            if ((s.HasKey("gift") 
                        || ((gift != default(OptionalPlayerReward)) 
                        && gift.HasValue)))
            {
                s.Serialize("gift", ref gift.Value);
                gift.HasValue = true;
            }
            if ((s.HasKey("start_date") 
                        || ((start_date != default(OptionalString)) 
                        && start_date.HasValue)))
            {
                s.Serialize("start_date", ref start_date.Value);
                start_date.HasValue = true;
            }
            if ((s.HasKey("stat_requirements") 
                        || ((stat_requirements != default(OptionalArrayOfPlayerStatRequirement)) 
                        && stat_requirements.HasValue)))
            {
                s.SerializeArray("stat_requirements", ref stat_requirements.Value);
                stat_requirements.HasValue = true;
            }
            s.Serialize("summary", ref summary);
            s.Serialize("symbol", ref symbol);
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfString)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
            s.Serialize("title", ref title);
        }
    }
    [System.SerializableAttribute()]
    public partial class WebhookReward : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public WebhookInvocationStrategy strategy = new WebhookInvocationStrategy();
        public OptionalWebhookComet webHookComet = new OptionalWebhookComet();
        public OptionalString webhookSymbol = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("strategy", ref strategy);
            if ((s.HasKey("webHookComet") 
                        || ((webHookComet != default(OptionalWebhookComet)) 
                        && webHookComet.HasValue)))
            {
                s.Serialize("webHookComet", ref webHookComet.Value);
                webHookComet.HasValue = true;
            }
            if ((s.HasKey("webhookSymbol") 
                        || ((webhookSymbol != default(OptionalString)) 
                        && webhookSymbol.HasValue)))
            {
                s.Serialize("webhookSymbol", ref webhookSymbol.Value);
                webhookSymbol.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class NewItemReward : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalMapOfString properties = new OptionalMapOfString();
        public string symbol;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("properties") 
                        || ((properties != default(OptionalMapOfString)) 
                        && properties.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("properties", ref properties.Value);
                properties.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
        }
    }
    public enum WebhookRetryType
    {
        None,
        Once,
        ExponentialBackoff,
    }
    public class WebhookRetryTypeExtensions
    {
        public static string ToEnumString(WebhookRetryType val)
        {
            if ((WebhookRetryType.None == val))
            {
                return "None";
            }
            if ((WebhookRetryType.Once == val))
            {
                return "Once";
            }
            if ((WebhookRetryType.ExponentialBackoff == val))
            {
                return "ExponentialBackoff";
            }
            throw new System.ArgumentException("Unknown enum value");
        }
        public static WebhookRetryType FromEnumString(string str)
        {
            if (("None" == str))
            {
                return WebhookRetryType.None;
            }
            if (("Once" == str))
            {
                return WebhookRetryType.Once;
            }
            if (("ExponentialBackoff" == str))
            {
                return WebhookRetryType.ExponentialBackoff;
            }
            throw new System.ArgumentException("Unknown string value");
        }
    }
    [System.SerializableAttribute()]
    public partial class SearchAnnouncementsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString date = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("date") 
                        || ((date != default(OptionalString)) 
                        && date.HasValue)))
            {
                s.Serialize("date", ref date.Value);
                date.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class AnnouncementRawResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MapOfAnnouncementState announcements = new MapOfAnnouncementState();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeDictionary<MapOfAnnouncementState, AnnouncementState>("announcements", ref announcements);
        }
    }
    [System.SerializableAttribute()]
    public partial class AnnouncementQuery : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool include_deleted = new OptionalBool();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("include_deleted") 
                        || ((include_deleted != default(OptionalBool)) 
                        && include_deleted.HasValue)))
            {
                s.Serialize("include_deleted", ref include_deleted.Value);
                include_deleted.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class AnnouncementState : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool isClaimed;
        public bool isDeleted;
        public bool isRead;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("isClaimed", ref isClaimed);
            s.Serialize("isDeleted", ref isDeleted);
            s.Serialize("isRead", ref isRead);
        }
    }
    [System.SerializableAttribute()]
    public partial class AnnouncementRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString announcement = new OptionalString();
        public OptionalArrayOfString announcements = new OptionalArrayOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("announcement") 
                        || ((announcement != default(OptionalString)) 
                        && announcement.HasValue)))
            {
                s.Serialize("announcement", ref announcement.Value);
                announcement.HasValue = true;
            }
            if ((s.HasKey("announcements") 
                        || ((announcements != default(OptionalArrayOfString)) 
                        && announcements.HasValue)))
            {
                s.SerializeArray("announcements", ref announcements.Value);
                announcements.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class AnnouncementQueryResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public AnnouncementView[] announcements;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("announcements", ref announcements);
        }
    }
    [System.SerializableAttribute()]
    public partial class AnnouncementView : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public AnnouncementAttachment[] attachments;
        public string body;
        public string channel;
        public ClientDataEntry[] clientDataList;
        public OptionalString endDate = new OptionalString();
        public OptionalPlayerReward gift = new OptionalPlayerReward();
        public string id;
        public bool isClaimed;
        public bool isDeleted;
        public bool isRead;
        public OptionalLong secondsRemaining = new OptionalLong();
        public OptionalString startDate = new OptionalString();
        public string summary;
        public OptionalArrayOfString tags = new OptionalArrayOfString();
        public string title;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("attachments", ref attachments);
            s.Serialize("body", ref body);
            s.Serialize("channel", ref channel);
            s.SerializeArray("clientDataList", ref clientDataList);
            if ((s.HasKey("endDate") 
                        || ((endDate != default(OptionalString)) 
                        && endDate.HasValue)))
            {
                s.Serialize("endDate", ref endDate.Value);
                endDate.HasValue = true;
            }
            if ((s.HasKey("gift") 
                        || ((gift != default(OptionalPlayerReward)) 
                        && gift.HasValue)))
            {
                s.Serialize("gift", ref gift.Value);
                gift.HasValue = true;
            }
            s.Serialize("id", ref id);
            s.Serialize("isClaimed", ref isClaimed);
            s.Serialize("isDeleted", ref isDeleted);
            s.Serialize("isRead", ref isRead);
            if ((s.HasKey("secondsRemaining") 
                        || ((secondsRemaining != default(OptionalLong)) 
                        && secondsRemaining.HasValue)))
            {
                s.Serialize("secondsRemaining", ref secondsRemaining.Value);
                secondsRemaining.HasValue = true;
            }
            if ((s.HasKey("startDate") 
                        || ((startDate != default(OptionalString)) 
                        && startDate.HasValue)))
            {
                s.Serialize("startDate", ref startDate.Value);
                startDate.HasValue = true;
            }
            s.Serialize("summary", ref summary);
            if ((s.HasKey("tags") 
                        || ((tags != default(OptionalArrayOfString)) 
                        && tags.HasValue)))
            {
                s.SerializeArray("tags", ref tags.Value);
                tags.HasValue = true;
            }
            s.Serialize("title", ref title);
        }
    }
    [System.SerializableAttribute()]
    public partial class UpdateMailRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool acceptAttachments = new OptionalBool();
        public OptionalString body = new OptionalString();
        public OptionalString category = new OptionalString();
        public OptionalString expires = new OptionalString();
        public long mailId;
        public OptionalString state = new OptionalString();
        public OptionalString subject = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("acceptAttachments") 
                        || ((acceptAttachments != default(OptionalBool)) 
                        && acceptAttachments.HasValue)))
            {
                s.Serialize("acceptAttachments", ref acceptAttachments.Value);
                acceptAttachments.HasValue = true;
            }
            if ((s.HasKey("body") 
                        || ((body != default(OptionalString)) 
                        && body.HasValue)))
            {
                s.Serialize("body", ref body.Value);
                body.HasValue = true;
            }
            if ((s.HasKey("category") 
                        || ((category != default(OptionalString)) 
                        && category.HasValue)))
            {
                s.Serialize("category", ref category.Value);
                category.HasValue = true;
            }
            if ((s.HasKey("expires") 
                        || ((expires != default(OptionalString)) 
                        && expires.HasValue)))
            {
                s.Serialize("expires", ref expires.Value);
                expires.HasValue = true;
            }
            s.Serialize("mailId", ref mailId);
            if ((s.HasKey("state") 
                        || ((state != default(OptionalString)) 
                        && state.HasValue)))
            {
                s.Serialize("state", ref state.Value);
                state.HasValue = true;
            }
            if ((s.HasKey("subject") 
                        || ((subject != default(OptionalString)) 
                        && subject.HasValue)))
            {
                s.Serialize("subject", ref subject.Value);
                subject.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GetTemplateRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long gamerTag;
        public string templateName;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("gamerTag", ref gamerTag);
            s.Serialize("templateName", ref templateName);
        }
    }
    [System.SerializableAttribute()]
    public partial class AttachmentRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string action;
        public OptionalInt quantity = new OptionalInt();
        public OptionalString specialization = new OptionalString();
        public string symbol;
        public OptionalLong target = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("action", ref action);
            if ((s.HasKey("quantity") 
                        || ((quantity != default(OptionalInt)) 
                        && quantity.HasValue)))
            {
                s.Serialize("quantity", ref quantity.Value);
                quantity.HasValue = true;
            }
            if ((s.HasKey("specialization") 
                        || ((specialization != default(OptionalString)) 
                        && specialization.HasValue)))
            {
                s.Serialize("specialization", ref specialization.Value);
                specialization.HasValue = true;
            }
            s.Serialize("symbol", ref symbol);
            if ((s.HasKey("target") 
                        || ((target != default(OptionalLong)) 
                        && target.HasValue)))
            {
                s.Serialize("target", ref target.Value);
                target.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class MailResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalMessage result = new OptionalMessage();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("result") 
                        || ((result != default(OptionalMessage)) 
                        && result.HasValue)))
            {
                s.Serialize("result", ref result.Value);
                result.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class MailTemplate : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string body;
        public string subject;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("body", ref body);
            s.Serialize("subject", ref subject);
        }
    }
    [System.SerializableAttribute()]
    public partial class SendMailRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfAttachmentRequest attachments = new OptionalArrayOfAttachmentRequest();
        public OptionalString body = new OptionalString();
        public OptionalLong bodyRef = new OptionalLong();
        public string category;
        public OptionalString expires = new OptionalString();
        public OptionalLong id = new OptionalLong();
        public OptionalPlayerReward playerRewards = new OptionalPlayerReward();
        public long receiverGamerTag;
        public OptionalMailRewards rewards = new OptionalMailRewards();
        public long senderGamerTag;
        public OptionalString subject = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("attachments") 
                        || ((attachments != default(OptionalArrayOfAttachmentRequest)) 
                        && attachments.HasValue)))
            {
                s.SerializeArray("attachments", ref attachments.Value);
                attachments.HasValue = true;
            }
            if ((s.HasKey("body") 
                        || ((body != default(OptionalString)) 
                        && body.HasValue)))
            {
                s.Serialize("body", ref body.Value);
                body.HasValue = true;
            }
            if ((s.HasKey("bodyRef") 
                        || ((bodyRef != default(OptionalLong)) 
                        && bodyRef.HasValue)))
            {
                s.Serialize("bodyRef", ref bodyRef.Value);
                bodyRef.HasValue = true;
            }
            s.Serialize("category", ref category);
            if ((s.HasKey("expires") 
                        || ((expires != default(OptionalString)) 
                        && expires.HasValue)))
            {
                s.Serialize("expires", ref expires.Value);
                expires.HasValue = true;
            }
            if ((s.HasKey("id") 
                        || ((id != default(OptionalLong)) 
                        && id.HasValue)))
            {
                s.Serialize("id", ref id.Value);
                id.HasValue = true;
            }
            if ((s.HasKey("playerRewards") 
                        || ((playerRewards != default(OptionalPlayerReward)) 
                        && playerRewards.HasValue)))
            {
                s.Serialize("playerRewards", ref playerRewards.Value);
                playerRewards.HasValue = true;
            }
            s.Serialize("receiverGamerTag", ref receiverGamerTag);
            if ((s.HasKey("rewards") 
                        || ((rewards != default(OptionalMailRewards)) 
                        && rewards.HasValue)))
            {
                s.Serialize("rewards", ref rewards.Value);
                rewards.HasValue = true;
            }
            s.Serialize("senderGamerTag", ref senderGamerTag);
            if ((s.HasKey("subject") 
                        || ((subject != default(OptionalString)) 
                        && subject.HasValue)))
            {
                s.Serialize("subject", ref subject.Value);
                subject.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Attachment : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long id;
        public string state;
        public OptionalLong target = new OptionalLong();
        public EntitlementGenerator wrapped = new EntitlementGenerator();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            s.Serialize("state", ref state);
            if ((s.HasKey("target") 
                        || ((target != default(OptionalLong)) 
                        && target.HasValue)))
            {
                s.Serialize("target", ref target.Value);
                target.HasValue = true;
            }
            s.Serialize("wrapped", ref wrapped);
        }
    }
    [System.SerializableAttribute()]
    public partial class AcceptMultipleAttachments : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long[] mailIds;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("mailIds", ref mailIds);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetMailDetailsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long mid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("mid", ref mid);
        }
    }
    [System.SerializableAttribute()]
    public partial class Message : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Attachment[] attachments;
        public OptionalString body = new OptionalString();
        public OptionalLong bodyRef = new OptionalLong();
        public string category;
        public OptionalLong claimedTimeMs = new OptionalLong();
        public OptionalInt expires = new OptionalInt();
        public long id;
        public OptionalPlayerReward playerRewards = new OptionalPlayerReward();
        public long receiverGamerTag;
        public OptionalMailRewards rewards = new OptionalMailRewards();
        public long senderGamerTag;
        public long sent;
        public string state;
        public OptionalString subject = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("attachments", ref attachments);
            if ((s.HasKey("body") 
                        || ((body != default(OptionalString)) 
                        && body.HasValue)))
            {
                s.Serialize("body", ref body.Value);
                body.HasValue = true;
            }
            if ((s.HasKey("bodyRef") 
                        || ((bodyRef != default(OptionalLong)) 
                        && bodyRef.HasValue)))
            {
                s.Serialize("bodyRef", ref bodyRef.Value);
                bodyRef.HasValue = true;
            }
            s.Serialize("category", ref category);
            if ((s.HasKey("claimedTimeMs") 
                        || ((claimedTimeMs != default(OptionalLong)) 
                        && claimedTimeMs.HasValue)))
            {
                s.Serialize("claimedTimeMs", ref claimedTimeMs.Value);
                claimedTimeMs.HasValue = true;
            }
            if ((s.HasKey("expires") 
                        || ((expires != default(OptionalInt)) 
                        && expires.HasValue)))
            {
                s.Serialize("expires", ref expires.Value);
                expires.HasValue = true;
            }
            s.Serialize("id", ref id);
            if ((s.HasKey("playerRewards") 
                        || ((playerRewards != default(OptionalPlayerReward)) 
                        && playerRewards.HasValue)))
            {
                s.Serialize("playerRewards", ref playerRewards.Value);
                playerRewards.HasValue = true;
            }
            s.Serialize("receiverGamerTag", ref receiverGamerTag);
            if ((s.HasKey("rewards") 
                        || ((rewards != default(OptionalMailRewards)) 
                        && rewards.HasValue)))
            {
                s.Serialize("rewards", ref rewards.Value);
                rewards.HasValue = true;
            }
            s.Serialize("senderGamerTag", ref senderGamerTag);
            s.Serialize("sent", ref sent);
            s.Serialize("state", ref state);
            if ((s.HasKey("subject") 
                        || ((subject != default(OptionalString)) 
                        && subject.HasValue)))
            {
                s.Serialize("subject", ref subject.Value);
                subject.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class MailSuccessResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class BulkSendMailRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public SendMailRequest[] sendMailRequests;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("sendMailRequests", ref sendMailRequests);
        }
    }
    [System.SerializableAttribute()]
    public partial class MailRewards : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalBool applyVipBonus = new OptionalBool();
        public CurrencyChange[] currencies;
        public ItemCreateRequest[] items;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("applyVipBonus") 
                        || ((applyVipBonus != default(OptionalBool)) 
                        && applyVipBonus.HasValue)))
            {
                s.Serialize("applyVipBonus", ref applyVipBonus.Value);
                applyVipBonus.HasValue = true;
            }
            s.SerializeArray("currencies", ref currencies);
            s.SerializeArray("items", ref items);
        }
    }
    [System.SerializableAttribute()]
    public partial class MailSearchClause : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfString categories = new OptionalArrayOfString();
        public OptionalLong forSender = new OptionalLong();
        public OptionalInt limit = new OptionalInt();
        public string name;
        public bool onlyCount;
        public OptionalLong start = new OptionalLong();
        public OptionalArrayOfString states = new OptionalArrayOfString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("categories") 
                        || ((categories != default(OptionalArrayOfString)) 
                        && categories.HasValue)))
            {
                s.SerializeArray("categories", ref categories.Value);
                categories.HasValue = true;
            }
            if ((s.HasKey("forSender") 
                        || ((forSender != default(OptionalLong)) 
                        && forSender.HasValue)))
            {
                s.Serialize("forSender", ref forSender.Value);
                forSender.HasValue = true;
            }
            if ((s.HasKey("limit") 
                        || ((limit != default(OptionalInt)) 
                        && limit.HasValue)))
            {
                s.Serialize("limit", ref limit.Value);
                limit.HasValue = true;
            }
            s.Serialize("name", ref name);
            s.Serialize("onlyCount", ref onlyCount);
            if ((s.HasKey("start") 
                        || ((start != default(OptionalLong)) 
                        && start.HasValue)))
            {
                s.Serialize("start", ref start.Value);
                start.HasValue = true;
            }
            if ((s.HasKey("states") 
                        || ((states != default(OptionalArrayOfString)) 
                        && states.HasValue)))
            {
                s.SerializeArray("states", ref states.Value);
                states.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class MailSearchRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MailSearchClause[] clauses;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("clauses", ref clauses);
        }
    }
    [System.SerializableAttribute()]
    public partial class MailSearchResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MailSearchResponseClause[] results;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("results", ref results);
        }
    }
    [System.SerializableAttribute()]
    public partial class SendMailObjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfAttachmentRequest attachments = new OptionalArrayOfAttachmentRequest();
        public OptionalString body = new OptionalString();
        public OptionalLong bodyRef = new OptionalLong();
        public string category;
        public OptionalString expires = new OptionalString();
        public OptionalLong id = new OptionalLong();
        public OptionalPlayerReward playerRewards = new OptionalPlayerReward();
        public OptionalMailRewards rewards = new OptionalMailRewards();
        public long senderGamerTag;
        public OptionalString subject = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("attachments") 
                        || ((attachments != default(OptionalArrayOfAttachmentRequest)) 
                        && attachments.HasValue)))
            {
                s.SerializeArray("attachments", ref attachments.Value);
                attachments.HasValue = true;
            }
            if ((s.HasKey("body") 
                        || ((body != default(OptionalString)) 
                        && body.HasValue)))
            {
                s.Serialize("body", ref body.Value);
                body.HasValue = true;
            }
            if ((s.HasKey("bodyRef") 
                        || ((bodyRef != default(OptionalLong)) 
                        && bodyRef.HasValue)))
            {
                s.Serialize("bodyRef", ref bodyRef.Value);
                bodyRef.HasValue = true;
            }
            s.Serialize("category", ref category);
            if ((s.HasKey("expires") 
                        || ((expires != default(OptionalString)) 
                        && expires.HasValue)))
            {
                s.Serialize("expires", ref expires.Value);
                expires.HasValue = true;
            }
            if ((s.HasKey("id") 
                        || ((id != default(OptionalLong)) 
                        && id.HasValue)))
            {
                s.Serialize("id", ref id.Value);
                id.HasValue = true;
            }
            if ((s.HasKey("playerRewards") 
                        || ((playerRewards != default(OptionalPlayerReward)) 
                        && playerRewards.HasValue)))
            {
                s.Serialize("playerRewards", ref playerRewards.Value);
                playerRewards.HasValue = true;
            }
            if ((s.HasKey("rewards") 
                        || ((rewards != default(OptionalMailRewards)) 
                        && rewards.HasValue)))
            {
                s.Serialize("rewards", ref rewards.Value);
                rewards.HasValue = true;
            }
            s.Serialize("senderGamerTag", ref senderGamerTag);
            if ((s.HasKey("subject") 
                        || ((subject != default(OptionalString)) 
                        && subject.HasValue)))
            {
                s.Serialize("subject", ref subject.Value);
                subject.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class SendMailResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong mailId = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("mailId") 
                        || ((mailId != default(OptionalLong)) 
                        && mailId.HasValue)))
            {
                s.Serialize("mailId", ref mailId.Value);
                mailId.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class MyMailUpdate : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long id;
        public UpdateMailRequest update = new UpdateMailRequest();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
            s.Serialize("update", ref update);
        }
    }
    [System.SerializableAttribute()]
    public partial class MailQueryResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long unreadCount;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("unreadCount", ref unreadCount);
        }
    }
    [System.SerializableAttribute()]
    public partial class BulkUpdateMailObjectRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public MyMailUpdate[] updateMailRequests;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("updateMailRequests", ref updateMailRequests);
        }
    }
    [System.SerializableAttribute()]
    public partial class ListMailCategoriesResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string[] result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class MailSearchResponseClause : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalArrayOfMessage content = new OptionalArrayOfMessage();
        public long count;
        public string name;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("content") 
                        || ((content != default(OptionalArrayOfMessage)) 
                        && content.HasValue)))
            {
                s.SerializeArray("content", ref content.Value);
                content.HasValue = true;
            }
            s.Serialize("count", ref count);
            s.Serialize("name", ref name);
        }
    }
    [System.SerializableAttribute()]
    public partial class SessionHistoryRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long dbid;
        public OptionalInt month = new OptionalInt();
        public OptionalInt year = new OptionalInt();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("dbid", ref dbid);
            if ((s.HasKey("month") 
                        || ((month != default(OptionalInt)) 
                        && month.HasValue)))
            {
                s.Serialize("month", ref month.Value);
                month.HasValue = true;
            }
            if ((s.HasKey("year") 
                        || ((year != default(OptionalInt)) 
                        && year.HasValue)))
            {
                s.Serialize("year", ref year.Value);
                year.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class SessionHeartbeat : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long gt;
        public OptionalLong heartbeat = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("gt", ref gt);
            if ((s.HasKey("heartbeat") 
                        || ((heartbeat != default(OptionalLong)) 
                        && heartbeat.HasValue)))
            {
                s.Serialize("heartbeat", ref heartbeat.Value);
                heartbeat.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Era : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public int value;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("value", ref value);
        }
    }
    [System.SerializableAttribute()]
    public partial class OnlineStatusResponses : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public PlayerOnlineStatusResponse[] players;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("players", ref players);
        }
    }
    [System.SerializableAttribute()]
    public partial class SessionHistoryResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public LocalDate date = new LocalDate();
        public int daysPlayed;
        public OptionalString installDate = new OptionalString();
        public string[] payments;
        public string[] sessions;
        public PaymentTotal[] totalPaid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("date", ref date);
            s.Serialize("daysPlayed", ref daysPlayed);
            if ((s.HasKey("installDate") 
                        || ((installDate != default(OptionalString)) 
                        && installDate.HasValue)))
            {
                s.Serialize("installDate", ref installDate.Value);
                installDate.HasValue = true;
            }
            s.SerializeArray("payments", ref payments);
            s.SerializeArray("sessions", ref sessions);
            s.SerializeArray("totalPaid", ref totalPaid);
        }
    }
    [System.SerializableAttribute()]
    public partial class LocalDate : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public IsoChronology chronology = new IsoChronology();
        public int dayOfMonth;
        public LocalDate_dayOfWeek dayOfWeek;
        public int dayOfYear;
        public Era era = new Era();
        public bool leapYear;
        public LocalDate_month month;
        public int monthValue;
        public int year;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("chronology", ref chronology);
            s.Serialize("dayOfMonth", ref dayOfMonth);
            s.SerializeEnum("dayOfWeek", ref dayOfWeek, LocalDate_dayOfWeekExtensions.ToEnumString, LocalDate_dayOfWeekExtensions.FromEnumString);
            s.Serialize("dayOfYear", ref dayOfYear);
            s.Serialize("era", ref era);
            s.Serialize("leapYear", ref leapYear);
            s.SerializeEnum("month", ref month, LocalDate_monthExtensions.ToEnumString, LocalDate_monthExtensions.FromEnumString);
            s.Serialize("monthValue", ref monthValue);
            s.Serialize("year", ref year);
        }
        public enum LocalDate_dayOfWeek
        {
            SATURDAY,
            MONDAY,
            THURSDAY,
            TUESDAY,
            FRIDAY,
            WEDNESDAY,
            SUNDAY,
        }
        public class LocalDate_dayOfWeekExtensions
        {
            public static string ToEnumString(LocalDate_dayOfWeek val)
            {
                if ((LocalDate_dayOfWeek.SATURDAY == val))
                {
                    return "SATURDAY";
                }
                if ((LocalDate_dayOfWeek.MONDAY == val))
                {
                    return "MONDAY";
                }
                if ((LocalDate_dayOfWeek.THURSDAY == val))
                {
                    return "THURSDAY";
                }
                if ((LocalDate_dayOfWeek.TUESDAY == val))
                {
                    return "TUESDAY";
                }
                if ((LocalDate_dayOfWeek.FRIDAY == val))
                {
                    return "FRIDAY";
                }
                if ((LocalDate_dayOfWeek.WEDNESDAY == val))
                {
                    return "WEDNESDAY";
                }
                if ((LocalDate_dayOfWeek.SUNDAY == val))
                {
                    return "SUNDAY";
                }
                throw new System.ArgumentException("Unknown enum value");
            }
            public static LocalDate_dayOfWeek FromEnumString(string str)
            {
                if (("SATURDAY" == str))
                {
                    return LocalDate_dayOfWeek.SATURDAY;
                }
                if (("MONDAY" == str))
                {
                    return LocalDate_dayOfWeek.MONDAY;
                }
                if (("THURSDAY" == str))
                {
                    return LocalDate_dayOfWeek.THURSDAY;
                }
                if (("TUESDAY" == str))
                {
                    return LocalDate_dayOfWeek.TUESDAY;
                }
                if (("FRIDAY" == str))
                {
                    return LocalDate_dayOfWeek.FRIDAY;
                }
                if (("WEDNESDAY" == str))
                {
                    return LocalDate_dayOfWeek.WEDNESDAY;
                }
                if (("SUNDAY" == str))
                {
                    return LocalDate_dayOfWeek.SUNDAY;
                }
                throw new System.ArgumentException("Unknown string value");
            }
        }
        public enum LocalDate_month
        {
            DECEMBER,
            APRIL,
            JULY,
            SEPTEMBER,
            JUNE,
            FEBRUARY,
            OCTOBER,
            AUGUST,
            NOVEMBER,
            MARCH,
            MAY,
            JANUARY,
        }
        public class LocalDate_monthExtensions
        {
            public static string ToEnumString(LocalDate_month val)
            {
                if ((LocalDate_month.DECEMBER == val))
                {
                    return "DECEMBER";
                }
                if ((LocalDate_month.APRIL == val))
                {
                    return "APRIL";
                }
                if ((LocalDate_month.JULY == val))
                {
                    return "JULY";
                }
                if ((LocalDate_month.SEPTEMBER == val))
                {
                    return "SEPTEMBER";
                }
                if ((LocalDate_month.JUNE == val))
                {
                    return "JUNE";
                }
                if ((LocalDate_month.FEBRUARY == val))
                {
                    return "FEBRUARY";
                }
                if ((LocalDate_month.OCTOBER == val))
                {
                    return "OCTOBER";
                }
                if ((LocalDate_month.AUGUST == val))
                {
                    return "AUGUST";
                }
                if ((LocalDate_month.NOVEMBER == val))
                {
                    return "NOVEMBER";
                }
                if ((LocalDate_month.MARCH == val))
                {
                    return "MARCH";
                }
                if ((LocalDate_month.MAY == val))
                {
                    return "MAY";
                }
                if ((LocalDate_month.JANUARY == val))
                {
                    return "JANUARY";
                }
                throw new System.ArgumentException("Unknown enum value");
            }
            public static LocalDate_month FromEnumString(string str)
            {
                if (("DECEMBER" == str))
                {
                    return LocalDate_month.DECEMBER;
                }
                if (("APRIL" == str))
                {
                    return LocalDate_month.APRIL;
                }
                if (("JULY" == str))
                {
                    return LocalDate_month.JULY;
                }
                if (("SEPTEMBER" == str))
                {
                    return LocalDate_month.SEPTEMBER;
                }
                if (("JUNE" == str))
                {
                    return LocalDate_month.JUNE;
                }
                if (("FEBRUARY" == str))
                {
                    return LocalDate_month.FEBRUARY;
                }
                if (("OCTOBER" == str))
                {
                    return LocalDate_month.OCTOBER;
                }
                if (("AUGUST" == str))
                {
                    return LocalDate_month.AUGUST;
                }
                if (("NOVEMBER" == str))
                {
                    return LocalDate_month.NOVEMBER;
                }
                if (("MARCH" == str))
                {
                    return LocalDate_month.MARCH;
                }
                if (("MAY" == str))
                {
                    return LocalDate_month.MAY;
                }
                if (("JANUARY" == str))
                {
                    return LocalDate_month.JANUARY;
                }
                throw new System.ArgumentException("Unknown string value");
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class StartSessionRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalMapOfString customParams = new OptionalMapOfString();
        public OptionalString device = new OptionalString();
        public OptionalMapOfString deviceParams = new OptionalMapOfString();
        public OptionalLong gamer = new OptionalLong();
        public OptionalSessionLanguageContext language = new OptionalSessionLanguageContext();
        public OptionalString locale = new OptionalString();
        public OptionalString platform = new OptionalString();
        public OptionalString shard = new OptionalString();
        public OptionalString source = new OptionalString();
        public OptionalLong time = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("customParams") 
                        || ((customParams != default(OptionalMapOfString)) 
                        && customParams.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("customParams", ref customParams.Value);
                customParams.HasValue = true;
            }
            if ((s.HasKey("device") 
                        || ((device != default(OptionalString)) 
                        && device.HasValue)))
            {
                s.Serialize("device", ref device.Value);
                device.HasValue = true;
            }
            if ((s.HasKey("deviceParams") 
                        || ((deviceParams != default(OptionalMapOfString)) 
                        && deviceParams.HasValue)))
            {
                s.SerializeDictionary<MapOfString, string>("deviceParams", ref deviceParams.Value);
                deviceParams.HasValue = true;
            }
            if ((s.HasKey("gamer") 
                        || ((gamer != default(OptionalLong)) 
                        && gamer.HasValue)))
            {
                s.Serialize("gamer", ref gamer.Value);
                gamer.HasValue = true;
            }
            if ((s.HasKey("language") 
                        || ((language != default(OptionalSessionLanguageContext)) 
                        && language.HasValue)))
            {
                s.Serialize("language", ref language.Value);
                language.HasValue = true;
            }
            if ((s.HasKey("locale") 
                        || ((locale != default(OptionalString)) 
                        && locale.HasValue)))
            {
                s.Serialize("locale", ref locale.Value);
                locale.HasValue = true;
            }
            if ((s.HasKey("platform") 
                        || ((platform != default(OptionalString)) 
                        && platform.HasValue)))
            {
                s.Serialize("platform", ref platform.Value);
                platform.HasValue = true;
            }
            if ((s.HasKey("shard") 
                        || ((shard != default(OptionalString)) 
                        && shard.HasValue)))
            {
                s.Serialize("shard", ref shard.Value);
                shard.HasValue = true;
            }
            if ((s.HasKey("source") 
                        || ((source != default(OptionalString)) 
                        && source.HasValue)))
            {
                s.Serialize("source", ref source.Value);
                source.HasValue = true;
            }
            if ((s.HasKey("time") 
                        || ((time != default(OptionalLong)) 
                        && time.HasValue)))
            {
                s.Serialize("time", ref time.Value);
                time.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class CohortEntry : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string cohort;
        public string trial;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("cohort", ref cohort);
            s.Serialize("trial", ref trial);
        }
    }
    [System.SerializableAttribute()]
    public partial class OnlineStatusRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long intervalSecs;
        public string playerIds;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("intervalSecs", ref intervalSecs);
            s.Serialize("playerIds", ref playerIds);
        }
    }
    [System.SerializableAttribute()]
    public partial class SessionClientHistoryRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalInt month = new OptionalInt();
        public OptionalInt year = new OptionalInt();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("month") 
                        || ((month != default(OptionalInt)) 
                        && month.HasValue)))
            {
                s.Serialize("month", ref month.Value);
                month.HasValue = true;
            }
            if ((s.HasKey("year") 
                        || ((year != default(OptionalInt)) 
                        && year.HasValue)))
            {
                s.Serialize("year", ref year.Value);
                year.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class PlayerOnlineStatusResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long lastSeen;
        public bool online;
        public long playerId;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("lastSeen", ref lastSeen);
            s.Serialize("online", ref online);
            s.Serialize("playerId", ref playerId);
        }
    }
    [System.SerializableAttribute()]
    public partial class GamerTag : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong added = new OptionalLong();
        public OptionalString alias = new OptionalString();
        public string platform;
        public long tag;
        public OptionalArrayOfCohortEntry trials = new OptionalArrayOfCohortEntry();
        public OptionalSessionUser user = new OptionalSessionUser();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("added") 
                        || ((added != default(OptionalLong)) 
                        && added.HasValue)))
            {
                s.Serialize("added", ref added.Value);
                added.HasValue = true;
            }
            if ((s.HasKey("alias") 
                        || ((alias != default(OptionalString)) 
                        && alias.HasValue)))
            {
                s.Serialize("alias", ref alias.Value);
                alias.HasValue = true;
            }
            s.Serialize("platform", ref platform);
            s.Serialize("tag", ref tag);
            if ((s.HasKey("trials") 
                        || ((trials != default(OptionalArrayOfCohortEntry)) 
                        && trials.HasValue)))
            {
                s.SerializeArray("trials", ref trials.Value);
                trials.HasValue = true;
            }
            if ((s.HasKey("user") 
                        || ((user != default(OptionalSessionUser)) 
                        && user.HasValue)))
            {
                s.Serialize("user", ref user.Value);
                user.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class SessionUser : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString cid = new OptionalString();
        public string email;
        public string firstName;
        public long gamerTag;
        public OptionalLong heartbeat = new OptionalLong();
        public long id;
        public string lang;
        public string lastName;
        public string name;
        public OptionalString password = new OptionalString();
        public string username;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("cid") 
                        || ((cid != default(OptionalString)) 
                        && cid.HasValue)))
            {
                s.Serialize("cid", ref cid.Value);
                cid.HasValue = true;
            }
            s.Serialize("email", ref email);
            s.Serialize("firstName", ref firstName);
            s.Serialize("gamerTag", ref gamerTag);
            if ((s.HasKey("heartbeat") 
                        || ((heartbeat != default(OptionalLong)) 
                        && heartbeat.HasValue)))
            {
                s.Serialize("heartbeat", ref heartbeat.Value);
                heartbeat.HasValue = true;
            }
            s.Serialize("id", ref id);
            s.Serialize("lang", ref lang);
            s.Serialize("lastName", ref lastName);
            s.Serialize("name", ref name);
            if ((s.HasKey("password") 
                        || ((password != default(OptionalString)) 
                        && password.HasValue)))
            {
                s.Serialize("password", ref password.Value);
                password.HasValue = true;
            }
            s.Serialize("username", ref username);
        }
    }
    [System.SerializableAttribute()]
    public partial class SessionLanguageContext : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string code;
        public string ctx;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("code", ref code);
            s.Serialize("ctx", ref ctx);
        }
    }
    [System.SerializableAttribute()]
    public partial class IsoChronology : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string calendarType;
        public string id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("calendarType", ref calendarType);
            s.Serialize("id", ref id);
        }
    }
    [System.SerializableAttribute()]
    public partial class SessionClientHistoryResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public LocalDate date = new LocalDate();
        public int daysPlayed;
        public OptionalString installDate = new OptionalString();
        public string[] sessions;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("date", ref date);
            s.Serialize("daysPlayed", ref daysPlayed);
            if ((s.HasKey("installDate") 
                        || ((installDate != default(OptionalString)) 
                        && installDate.HasValue)))
            {
                s.Serialize("installDate", ref installDate.Value);
                installDate.HasValue = true;
            }
            s.SerializeArray("sessions", ref sessions);
        }
    }
    [System.SerializableAttribute()]
    public partial class PaymentTotal : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString currencyCode = new OptionalString();
        public long totalRevenue;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("currencyCode") 
                        || ((currencyCode != default(OptionalString)) 
                        && currencyCode.HasValue)))
            {
                s.Serialize("currencyCode", ref currencyCode.Value);
                currencyCode.HasValue = true;
            }
            s.Serialize("totalRevenue", ref totalRevenue);
        }
    }
    [System.SerializableAttribute()]
    public partial class StartSessionResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalGamerTag gamer = new OptionalGamerTag();
        public string result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("gamer") 
                        || ((gamer != default(OptionalGamerTag)) 
                        && gamer.HasValue)))
            {
                s.Serialize("gamer", ref gamer.Value);
                gamer.HasValue = true;
            }
            s.Serialize("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class ScheduleTrialRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public long time;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
            s.Serialize("time", ref time);
        }
    }
    [System.SerializableAttribute()]
    public partial class Trial : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong activated = new OptionalLong();
        public bool active;
        public long assigned;
        public Cohort[] cohorts;
        public OptionalLong created = new OptionalLong();
        public string ctype;
        public OptionalArrayOfCustomCohortRule customRules = new OptionalArrayOfCustomCohortRule();
        public string name;
        public OptionalLong scheduleStart = new OptionalLong();
        public string strategy;
        public string ttype;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("activated") 
                        || ((activated != default(OptionalLong)) 
                        && activated.HasValue)))
            {
                s.Serialize("activated", ref activated.Value);
                activated.HasValue = true;
            }
            s.Serialize("active", ref active);
            s.Serialize("assigned", ref assigned);
            s.SerializeArray("cohorts", ref cohorts);
            if ((s.HasKey("created") 
                        || ((created != default(OptionalLong)) 
                        && created.HasValue)))
            {
                s.Serialize("created", ref created.Value);
                created.HasValue = true;
            }
            s.Serialize("ctype", ref ctype);
            if ((s.HasKey("customRules") 
                        || ((customRules != default(OptionalArrayOfCustomCohortRule)) 
                        && customRules.HasValue)))
            {
                s.SerializeArray("customRules", ref customRules.Value);
                customRules.HasValue = true;
            }
            s.Serialize("name", ref name);
            if ((s.HasKey("scheduleStart") 
                        || ((scheduleStart != default(OptionalLong)) 
                        && scheduleStart.HasValue)))
            {
                s.Serialize("scheduleStart", ref scheduleStart.Value);
                scheduleStart.HasValue = true;
            }
            s.Serialize("strategy", ref strategy);
            s.Serialize("ttype", ref ttype);
        }
    }
    [System.SerializableAttribute()]
    public partial class CustomCohortRule : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString access = new OptionalString();
        public string customAttr;
        public OptionalArrayOfCustomCohortRule customItems = new OptionalArrayOfCustomCohortRule();
        public string customOp;
        public string[] customVal;
        public OptionalString domain = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("access") 
                        || ((access != default(OptionalString)) 
                        && access.HasValue)))
            {
                s.Serialize("access", ref access.Value);
                access.HasValue = true;
            }
            s.Serialize("customAttr", ref customAttr);
            if ((s.HasKey("customItems") 
                        || ((customItems != default(OptionalArrayOfCustomCohortRule)) 
                        && customItems.HasValue)))
            {
                s.SerializeArray("customItems", ref customItems.Value);
                customItems.HasValue = true;
            }
            s.Serialize("customOp", ref customOp);
            s.SerializeArray("customVal", ref customVal);
            if ((s.HasKey("domain") 
                        || ((domain != default(OptionalString)) 
                        && domain.HasValue)))
            {
                s.Serialize("domain", ref domain.Value);
                domain.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class Cohort : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long assigned;
        public OptionalArrayOfCloudStorage cloudData = new OptionalArrayOfCloudStorage();
        public OptionalArrayOfCustomCohortRule customRule = new OptionalArrayOfCustomCohortRule();
        public string name;
        public OptionalInt pct = new OptionalInt();
        public OptionalLong populationCap = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("assigned", ref assigned);
            if ((s.HasKey("cloudData") 
                        || ((cloudData != default(OptionalArrayOfCloudStorage)) 
                        && cloudData.HasValue)))
            {
                s.SerializeArray("cloudData", ref cloudData.Value);
                cloudData.HasValue = true;
            }
            if ((s.HasKey("customRule") 
                        || ((customRule != default(OptionalArrayOfCustomCohortRule)) 
                        && customRule.HasValue)))
            {
                s.SerializeArray("customRule", ref customRule.Value);
                customRule.HasValue = true;
            }
            s.Serialize("name", ref name);
            if ((s.HasKey("pct") 
                        || ((pct != default(OptionalInt)) 
                        && pct.HasValue)))
            {
                s.Serialize("pct", ref pct.Value);
                pct.HasValue = true;
            }
            if ((s.HasKey("populationCap") 
                        || ((populationCap != default(OptionalLong)) 
                        && populationCap.HasValue)))
            {
                s.Serialize("populationCap", ref populationCap.Value);
                populationCap.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class DeleteTrialDataRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
        }
    }
    [System.SerializableAttribute()]
    public partial class CloudDataStatus : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool ejected;
        public bool forSending;
        public bool processing;
        public bool sent;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("ejected", ref ejected);
            s.Serialize("forSending", ref forSending);
            s.Serialize("processing", ref processing);
            s.Serialize("sent", ref sent);
        }
    }
    [System.SerializableAttribute()]
    public partial class SaveGameDataResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string result;
        public long sid;
        public long version;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("result", ref result);
            s.Serialize("sid", ref sid);
            s.Serialize("version", ref version);
        }
    }
    [System.SerializableAttribute()]
    public partial class PauseTrialRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
        }
    }
    [System.SerializableAttribute()]
    public partial class StartTrialRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
        }
    }
    [System.SerializableAttribute()]
    public partial class CloudStorage : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalLong added = new OptionalLong();
        public OptionalString data = new OptionalString();
        public bool ejected;
        public OptionalLong expiration = new OptionalLong();
        public OptionalLong gt = new OptionalLong();
        public OptionalString jobId = new OptionalString();
        public OptionalString reference = new OptionalString();
        public OptionalLong retrieved = new OptionalLong();
        public bool sent;
        public long sid;
        public CloudDataStatus status = new CloudDataStatus();
        public int stype;
        public OptionalString uniqueIdentifier = new OptionalString();
        public OptionalLong updated = new OptionalLong();
        public OptionalLong version = new OptionalLong();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("added") 
                        || ((added != default(OptionalLong)) 
                        && added.HasValue)))
            {
                s.Serialize("added", ref added.Value);
                added.HasValue = true;
            }
            if ((s.HasKey("data") 
                        || ((data != default(OptionalString)) 
                        && data.HasValue)))
            {
                s.Serialize("data", ref data.Value);
                data.HasValue = true;
            }
            s.Serialize("ejected", ref ejected);
            if ((s.HasKey("expiration") 
                        || ((expiration != default(OptionalLong)) 
                        && expiration.HasValue)))
            {
                s.Serialize("expiration", ref expiration.Value);
                expiration.HasValue = true;
            }
            if ((s.HasKey("gt") 
                        || ((gt != default(OptionalLong)) 
                        && gt.HasValue)))
            {
                s.Serialize("gt", ref gt.Value);
                gt.HasValue = true;
            }
            if ((s.HasKey("jobId") 
                        || ((jobId != default(OptionalString)) 
                        && jobId.HasValue)))
            {
                s.Serialize("jobId", ref jobId.Value);
                jobId.HasValue = true;
            }
            if ((s.HasKey("reference") 
                        || ((reference != default(OptionalString)) 
                        && reference.HasValue)))
            {
                s.Serialize("reference", ref reference.Value);
                reference.HasValue = true;
            }
            if ((s.HasKey("retrieved") 
                        || ((retrieved != default(OptionalLong)) 
                        && retrieved.HasValue)))
            {
                s.Serialize("retrieved", ref retrieved.Value);
                retrieved.HasValue = true;
            }
            s.Serialize("sent", ref sent);
            s.Serialize("sid", ref sid);
            s.Serialize("status", ref status);
            s.Serialize("stype", ref stype);
            if ((s.HasKey("uniqueIdentifier") 
                        || ((uniqueIdentifier != default(OptionalString)) 
                        && uniqueIdentifier.HasValue)))
            {
                s.Serialize("uniqueIdentifier", ref uniqueIdentifier.Value);
                uniqueIdentifier.HasValue = true;
            }
            if ((s.HasKey("updated") 
                        || ((updated != default(OptionalLong)) 
                        && updated.HasValue)))
            {
                s.Serialize("updated", ref updated.Value);
                updated.HasValue = true;
            }
            if ((s.HasKey("version") 
                        || ((version != default(OptionalLong)) 
                        && version.HasValue)))
            {
                s.Serialize("version", ref version.Value);
                version.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class ListTrialsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public Trial[] result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetPlayerTrialsResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public CloudStorage[] cohortData;
        public CohortEntry[] trials;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("cohortData", ref cohortData);
            s.SerializeArray("trials", ref trials);
        }
    }
    [System.SerializableAttribute()]
    public partial class GetS3DataResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public int[] data;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.SerializeArray("data", ref data);
        }
    }
    [System.SerializableAttribute()]
    public partial class CreateTrialRestRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string cohortType;
        public string cohorts;
        public OptionalArrayOfTrialCustomRule customRules = new OptionalArrayOfTrialCustomRule();
        public string name;
        public string strat;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("cohortType", ref cohortType);
            s.Serialize("cohorts", ref cohorts);
            if ((s.HasKey("customRules") 
                        || ((customRules != default(OptionalArrayOfTrialCustomRule)) 
                        && customRules.HasValue)))
            {
                s.SerializeArray("customRules", ref customRules.Value);
                customRules.HasValue = true;
            }
            s.Serialize("name", ref name);
            s.Serialize("strat", ref strat);
        }
    }
    [System.SerializableAttribute()]
    public partial class UploadTrialDataRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string cohortName;
        public string dataName;
        public string filePayloadBase64;
        public string trialName;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("cohortName", ref cohortName);
            s.Serialize("dataName", ref dataName);
            s.Serialize("filePayloadBase64", ref filePayloadBase64);
            s.Serialize("trialName", ref trialName);
        }
    }
    [System.SerializableAttribute()]
    public partial class TrialCustomRule : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public OptionalString access = new OptionalString();
        public string customAttr;
        public OptionalArrayOfTrialCustomRule customItems = new OptionalArrayOfTrialCustomRule();
        public string customOp;
        public string[] customVal;
        public OptionalString domain = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            if ((s.HasKey("access") 
                        || ((access != default(OptionalString)) 
                        && access.HasValue)))
            {
                s.Serialize("access", ref access.Value);
                access.HasValue = true;
            }
            s.Serialize("customAttr", ref customAttr);
            if ((s.HasKey("customItems") 
                        || ((customItems != default(OptionalArrayOfTrialCustomRule)) 
                        && customItems.HasValue)))
            {
                s.SerializeArray("customItems", ref customItems.Value);
                customItems.HasValue = true;
            }
            s.Serialize("customOp", ref customOp);
            s.SerializeArray("customVal", ref customVal);
            if ((s.HasKey("domain") 
                        || ((domain != default(OptionalString)) 
                        && domain.HasValue)))
            {
                s.Serialize("domain", ref domain.Value);
                domain.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GetS3DataRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long id;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("id", ref id);
        }
    }
    [System.SerializableAttribute()]
    public partial class DeleteTrialRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public string name;
        public OptionalString trialType = new OptionalString();
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("name", ref name);
            if ((s.HasKey("trialType") 
                        || ((trialType != default(OptionalString)) 
                        && trialType.HasValue)))
            {
                s.Serialize("trialType", ref trialType.Value);
                trialType.HasValue = true;
            }
        }
    }
    [System.SerializableAttribute()]
    public partial class GetPlayerTrialsRequest : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public long dbid;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("dbid", ref dbid);
        }
    }
    [System.SerializableAttribute()]
    public partial class TrialSuccessResponse : Beamable.Serialization.JsonSerializable.ISerializable
    {
        public bool result;
        public virtual void Serialize(Beamable.Serialization.JsonSerializable.IStreamSerializer s)
        {
            s.Serialize("result", ref result);
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfLobby : Beamable.Common.Content.OptionalArray<Lobby>
    {
        public OptionalArrayOfLobby()
        {
        }
        public OptionalArrayOfLobby(Lobby[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalLobbyRestriction : Beamable.Common.Content.Optional<LobbyRestriction>
    {
        public OptionalLobbyRestriction()
        {
        }
        public OptionalLobbyRestriction(LobbyRestriction value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalMatchType : Beamable.Common.Content.Optional<MatchType>
    {
        public OptionalMatchType()
        {
        }
        public OptionalMatchType(MatchType value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalUpdateData : Beamable.Common.Content.Optional<UpdateData>
    {
        public OptionalUpdateData()
        {
        }
        public OptionalUpdateData(UpdateData value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfTag : Beamable.Common.Content.OptionalArray<Tag>
    {
        public OptionalArrayOfTag()
        {
        }
        public OptionalArrayOfTag(Tag[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfLobbyPlayer : Beamable.Common.Content.OptionalArray<LobbyPlayer>
    {
        public OptionalArrayOfLobbyPlayer()
        {
        }
        public OptionalArrayOfLobbyPlayer(LobbyPlayer[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfTeamContentProto : Beamable.Common.Content.OptionalArray<TeamContentProto>
    {
        public OptionalArrayOfTeamContentProto()
        {
        }
        public OptionalArrayOfTeamContentProto(TeamContentProto[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfOnlineStatus : Beamable.Common.Content.OptionalArray<OnlineStatus>
    {
        public OptionalArrayOfOnlineStatus()
        {
        }
        public OptionalArrayOfOnlineStatus(OnlineStatus[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalPresenceStatus : Beamable.Common.Content.Optional<PresenceStatus>
    {
        public OptionalPresenceStatus()
        {
        }
        public OptionalPresenceStatus(PresenceStatus value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalJobRetryPolicy : Beamable.Common.Content.Optional<JobRetryPolicy>
    {
        public OptionalJobRetryPolicy()
        {
        }
        public OptionalJobRetryPolicy(JobRetryPolicy value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalJobState : Beamable.Common.Content.Optional<JobState>
    {
        public OptionalJobState()
        {
        }
        public OptionalJobState(JobState value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfStringStringKeyValuePair : Beamable.Common.Content.OptionalArray<StringStringKeyValuePair>
    {
        public OptionalArrayOfStringStringKeyValuePair()
        {
        }
        public OptionalArrayOfStringStringKeyValuePair(StringStringKeyValuePair[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfTeam : Beamable.Common.Content.OptionalArray<Team>
    {
        public OptionalArrayOfTeam()
        {
        }
        public OptionalArrayOfTeam(Team[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfTicket : Beamable.Common.Content.OptionalArray<Ticket>
    {
        public OptionalArrayOfTicket()
        {
        }
        public OptionalArrayOfTicket(Ticket[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfPartyInvitation : Beamable.Common.Content.OptionalArray<PartyInvitation>
    {
        public OptionalArrayOfPartyInvitation()
        {
        }
        public OptionalArrayOfPartyInvitation(PartyInvitation[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfMapOfContentMeta : Beamable.Common.Content.Optional<ArrayOfMapOfContentMeta>
    {
    }
    [System.SerializableAttribute()]
    public class MapOfContentMeta : Beamable.Common.Content.SerializableDictionaryStringToSomething<ContentMeta>
    {
    }
    [System.SerializableAttribute()]
    public class ArrayOfMapOfContentMeta : System.Collections.Generic.List<Beamable.Common.Content.SerializableDictionaryStringToSomething<ContentMeta>[]>
    {
    }
    [System.SerializableAttribute()]
    public class MapOfArrayOfLocalizedValue : Beamable.Common.Content.SerializableDictionaryStringToSomething<LocalizedValue[]>
    {
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfServiceStorageStatus : Beamable.Common.Content.OptionalArray<ServiceStorageStatus>
    {
        public OptionalArrayOfServiceStorageStatus()
        {
        }
        public OptionalArrayOfServiceStorageStatus(ServiceStorageStatus[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfDatabaseMeasurement : Beamable.Common.Content.OptionalArray<DatabaseMeasurement>
    {
        public OptionalArrayOfDatabaseMeasurement()
        {
        }
        public OptionalArrayOfDatabaseMeasurement(DatabaseMeasurement[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfServiceDependencyReference : Beamable.Common.Content.OptionalArray<ServiceDependencyReference>
    {
        public OptionalArrayOfServiceDependencyReference()
        {
        }
        public OptionalArrayOfServiceDependencyReference(ServiceDependencyReference[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalBeamoBasicManifestChecksum : Beamable.Common.Content.Optional<BeamoBasicManifestChecksum>
    {
        public OptionalBeamoBasicManifestChecksum()
        {
        }
        public OptionalBeamoBasicManifestChecksum(BeamoBasicManifestChecksum value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfServiceComponent : Beamable.Common.Content.OptionalArray<ServiceComponent>
    {
        public OptionalArrayOfServiceComponent()
        {
        }
        public OptionalArrayOfServiceComponent(ServiceComponent[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfServiceStorageReference : Beamable.Common.Content.OptionalArray<ServiceStorageReference>
    {
        public OptionalArrayOfServiceStorageReference()
        {
        }
        public OptionalArrayOfServiceStorageReference(ServiceStorageReference[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfEventInventoryRewardItem : Beamable.Common.Content.OptionalArray<EventInventoryRewardItem>
    {
        public OptionalArrayOfEventInventoryRewardItem()
        {
        }
        public OptionalArrayOfEventInventoryRewardItem(EventInventoryRewardItem[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfItemCreateRequest : Beamable.Common.Content.OptionalArray<ItemCreateRequest>
    {
        public OptionalArrayOfItemCreateRequest()
        {
        }
        public OptionalArrayOfItemCreateRequest(ItemCreateRequest[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfEventRewardObtain : Beamable.Common.Content.OptionalArray<EventRewardObtain>
    {
        public OptionalArrayOfEventRewardObtain()
        {
        }
        public OptionalArrayOfEventRewardObtain(EventRewardObtain[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfEventInventoryRewardCurrency : Beamable.Common.Content.OptionalArray<EventInventoryRewardCurrency>
    {
        public OptionalArrayOfEventInventoryRewardCurrency()
        {
        }
        public OptionalArrayOfEventInventoryRewardCurrency(EventInventoryRewardCurrency[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalEventPlayerPhaseView : Beamable.Common.Content.Optional<EventPlayerPhaseView>
    {
        public OptionalEventPlayerPhaseView()
        {
        }
        public OptionalEventPlayerPhaseView(EventPlayerPhaseView value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfEventRule : Beamable.Common.Content.OptionalArray<EventRule>
    {
        public OptionalArrayOfEventRule()
        {
        }
        public OptionalArrayOfEventRule(EventRule[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalEventPlayerGroupState : Beamable.Common.Content.Optional<EventPlayerGroupState>
    {
        public OptionalEventPlayerGroupState()
        {
        }
        public OptionalEventPlayerGroupState(EventPlayerGroupState value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfInFlightMessage : Beamable.Common.Content.OptionalArray<InFlightMessage>
    {
        public OptionalArrayOfInFlightMessage()
        {
        }
        public OptionalArrayOfInFlightMessage(InFlightMessage[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalLeaderboardCohortSettings : Beamable.Common.Content.Optional<LeaderboardCohortSettings>
    {
        public OptionalLeaderboardCohortSettings()
        {
        }
        public OptionalLeaderboardCohortSettings(LeaderboardCohortSettings value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfEventPhaseTime : Beamable.Common.Content.OptionalArray<EventPhaseTime>
    {
        public OptionalArrayOfEventPhaseTime()
        {
        }
        public OptionalArrayOfEventPhaseTime(EventPhaseTime[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfPlayerStatRequirement : Beamable.Common.Content.OptionalArray<PlayerStatRequirement>
    {
        public OptionalArrayOfPlayerStatRequirement()
        {
        }
        public OptionalArrayOfPlayerStatRequirement(PlayerStatRequirement[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalEventGroupRewards : Beamable.Common.Content.Optional<EventGroupRewards>
    {
        public OptionalEventGroupRewards()
        {
        }
        public OptionalEventGroupRewards(EventGroupRewards value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalClientPermission : Beamable.Common.Content.Optional<ClientPermission>
    {
        public OptionalClientPermission()
        {
        }
        public OptionalClientPermission(ClientPermission value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfEventRewardContent : Beamable.Common.Content.OptionalArray<EventRewardContent>
    {
        public OptionalArrayOfEventRewardContent()
        {
        }
        public OptionalArrayOfEventRewardContent(EventRewardContent[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalEventPhaseRuntime : Beamable.Common.Content.Optional<EventPhaseRuntime>
    {
        public OptionalEventPhaseRuntime()
        {
        }
        public OptionalEventPhaseRuntime(EventPhaseRuntime value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalSchedule : Beamable.Common.Content.Optional<Schedule>
    {
        public OptionalSchedule()
        {
        }
        public OptionalSchedule(Schedule value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfScheduleDefinition : Beamable.Common.Content.OptionalArray<ScheduleDefinition>
    {
        public OptionalArrayOfScheduleDefinition()
        {
        }
        public OptionalArrayOfScheduleDefinition(ScheduleDefinition[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfGroupRole : Beamable.Common.Content.OptionalArray<GroupRole>
    {
        public OptionalArrayOfGroupRole()
        {
        }
        public OptionalArrayOfGroupRole(GroupRole[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfDonationRequest : Beamable.Common.Content.OptionalArray<DonationRequest>
    {
        public OptionalArrayOfDonationRequest()
        {
        }
        public OptionalArrayOfDonationRequest(DonationRequest[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalMapOfDonationRequest : Beamable.Common.Content.Optional<MapOfDonationRequest>
    {
    }
    [System.SerializableAttribute()]
    public class MapOfDonationRequest : Beamable.Common.Content.SerializableDictionaryStringToSomething<DonationRequest>
    {
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfGroupUserMember : Beamable.Common.Content.OptionalArray<GroupUserMember>
    {
        public OptionalArrayOfGroupUserMember()
        {
        }
        public OptionalArrayOfGroupUserMember(GroupUserMember[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfCurrencyProperty : Beamable.Common.Content.OptionalArray<CurrencyProperty>
    {
        public OptionalArrayOfCurrencyProperty()
        {
        }
        public OptionalArrayOfCurrencyProperty(CurrencyProperty[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalMapOfArrayOfCurrencyProperty : Beamable.Common.Content.Optional<MapOfArrayOfCurrencyProperty>
    {
    }
    [System.SerializableAttribute()]
    public class MapOfArrayOfCurrencyProperty : Beamable.Common.Content.SerializableDictionaryStringToSomething<CurrencyProperty[]>
    {
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfGroupScoreBinding : Beamable.Common.Content.OptionalArray<GroupScoreBinding>
    {
        public OptionalArrayOfGroupScoreBinding()
        {
        }
        public OptionalArrayOfGroupScoreBinding(GroupScoreBinding[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArchetypeProxy : Beamable.Common.Content.Optional<ArchetypeProxy>
    {
        public OptionalArchetypeProxy()
        {
        }
        public OptionalArchetypeProxy(ArchetypeProxy value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfItemUpdateRequest : Beamable.Common.Content.OptionalArray<ItemUpdateRequest>
    {
        public OptionalArrayOfItemUpdateRequest()
        {
        }
        public OptionalArrayOfItemUpdateRequest(ItemUpdateRequest[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfItemDeleteRequest : Beamable.Common.Content.OptionalArray<ItemDeleteRequest>
    {
        public OptionalArrayOfItemDeleteRequest()
        {
        }
        public OptionalArrayOfItemDeleteRequest(ItemDeleteRequest[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfRankEntryStat : Beamable.Common.Content.OptionalArray<RankEntryStat>
    {
        public OptionalArrayOfRankEntryStat()
        {
        }
        public OptionalArrayOfRankEntryStat(RankEntryStat[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalRankEntry : Beamable.Common.Content.Optional<RankEntry>
    {
        public OptionalRankEntry()
        {
        }
        public OptionalRankEntry(RankEntry value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalMetadataView : Beamable.Common.Content.Optional<MetadataView>
    {
        public OptionalMetadataView()
        {
        }
        public OptionalMetadataView(MetadataView value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalOrderRules : Beamable.Common.Content.Optional<OrderRules>
    {
        public OptionalOrderRules()
        {
        }
        public OptionalOrderRules(OrderRules value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfRoleMapping : Beamable.Common.Content.OptionalArray<RoleMapping>
    {
        public OptionalArrayOfRoleMapping()
        {
        }
        public OptionalArrayOfRoleMapping(RoleMapping[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfExternalIdentity : Beamable.Common.Content.OptionalArray<ExternalIdentity>
    {
        public OptionalArrayOfExternalIdentity()
        {
        }
        public OptionalArrayOfExternalIdentity(ExternalIdentity[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfCurrencyChange : Beamable.Common.Content.OptionalArray<CurrencyChange>
    {
        public OptionalArrayOfCurrencyChange()
        {
        }
        public OptionalArrayOfCurrencyChange(CurrencyChange[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalEntitlementClaimWindow : Beamable.Common.Content.Optional<EntitlementClaimWindow>
    {
        public OptionalEntitlementClaimWindow()
        {
        }
        public OptionalEntitlementClaimWindow(EntitlementClaimWindow value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalGamerTagAssociation : Beamable.Common.Content.Optional<GamerTagAssociation>
    {
        public OptionalGamerTagAssociation()
        {
        }
        public OptionalGamerTagAssociation(GamerTagAssociation value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalChallengeSolution : Beamable.Common.Content.Optional<ChallengeSolution>
    {
        public OptionalChallengeSolution()
        {
        }
        public OptionalChallengeSolution(ChallengeSolution value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfStatStringListEntry : Beamable.Common.Content.OptionalArray<StatStringListEntry>
    {
        public OptionalArrayOfStatStringListEntry()
        {
        }
        public OptionalArrayOfStatStringListEntry(StatStringListEntry[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalTournamentEntry : Beamable.Common.Content.Optional<TournamentEntry>
    {
        public OptionalTournamentEntry()
        {
        }
        public OptionalTournamentEntry(TournamentEntry value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfCompletedStatus : Beamable.Common.Content.OptionalArray<CompletedStatus>
    {
        public OptionalArrayOfCompletedStatus()
        {
        }
        public OptionalArrayOfCompletedStatus(CompletedStatus[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalTournamentGroupEntry : Beamable.Common.Content.Optional<TournamentGroupEntry>
    {
        public OptionalTournamentGroupEntry()
        {
        }
        public OptionalTournamentGroupEntry(TournamentGroupEntry value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalContextInfo : Beamable.Common.Content.Optional<ContextInfo>
    {
        public OptionalContextInfo()
        {
        }
        public OptionalContextInfo(ContextInfo value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfObjectRequest : Beamable.Common.Content.OptionalArray<ObjectRequest>
    {
        public OptionalArrayOfObjectRequest()
        {
        }
        public OptionalArrayOfObjectRequest(ObjectRequest[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfMetadataPair : Beamable.Common.Content.OptionalArray<MetadataPair>
    {
        public OptionalArrayOfMetadataPair()
        {
        }
        public OptionalArrayOfMetadataPair(MetadataPair[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalSendNotification : Beamable.Common.Content.Optional<SendNotification>
    {
        public OptionalSendNotification()
        {
        }
        public OptionalSendNotification(SendNotification value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalContentLimits : Beamable.Common.Content.Optional<ContentLimits>
    {
        public OptionalContentLimits()
        {
        }
        public OptionalContentLimits(ContentLimits value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalServiceLimits : Beamable.Common.Content.Optional<ServiceLimits>
    {
        public OptionalServiceLimits()
        {
        }
        public OptionalServiceLimits(ServiceLimits value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalGatewayLimits : Beamable.Common.Content.Optional<GatewayLimits>
    {
        public OptionalGatewayLimits()
        {
        }
        public OptionalGatewayLimits(GatewayLimits value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalBeamoLimits : Beamable.Common.Content.Optional<BeamoLimits>
    {
        public OptionalBeamoLimits()
        {
        }
        public OptionalBeamoLimits(BeamoLimits value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfRedisShard : Beamable.Common.Content.OptionalArray<RedisShard>
    {
        public OptionalArrayOfRedisShard()
        {
        }
        public OptionalArrayOfRedisShard(RedisShard[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalCommerceLootRoll : Beamable.Common.Content.Optional<CommerceLootRoll>
    {
        public OptionalCommerceLootRoll()
        {
        }
        public OptionalCommerceLootRoll(CommerceLootRoll value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalPeriod : Beamable.Common.Content.Optional<Period>
    {
        public OptionalPeriod()
        {
        }
        public OptionalPeriod(Period value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalCatalog : Beamable.Common.Content.Optional<Catalog>
    {
        public OptionalCatalog()
        {
        }
        public OptionalCatalog(Catalog value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalWebhookComet : Beamable.Common.Content.Optional<WebhookComet>
    {
        public OptionalWebhookComet()
        {
        }
        public OptionalWebhookComet(WebhookComet value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfAnnouncementAttachment : Beamable.Common.Content.OptionalArray<AnnouncementAttachment>
    {
        public OptionalArrayOfAnnouncementAttachment()
        {
        }
        public OptionalArrayOfAnnouncementAttachment(AnnouncementAttachment[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalPlayerReward : Beamable.Common.Content.Optional<PlayerReward>
    {
        public OptionalPlayerReward()
        {
        }
        public OptionalPlayerReward(PlayerReward value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalVariableReference : Beamable.Common.Content.Optional<VariableReference>
    {
        public OptionalVariableReference()
        {
        }
        public OptionalVariableReference(VariableReference value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfAttachmentProperty : Beamable.Common.Content.OptionalArray<AttachmentProperty>
    {
        public OptionalArrayOfAttachmentProperty()
        {
        }
        public OptionalArrayOfAttachmentProperty(AttachmentProperty[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfCurrencyChangeReward : Beamable.Common.Content.OptionalArray<CurrencyChangeReward>
    {
        public OptionalArrayOfCurrencyChangeReward()
        {
        }
        public OptionalArrayOfCurrencyChangeReward(CurrencyChangeReward[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfWebhookReward : Beamable.Common.Content.OptionalArray<WebhookReward>
    {
        public OptionalArrayOfWebhookReward()
        {
        }
        public OptionalArrayOfWebhookReward(WebhookReward[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfNewItemReward : Beamable.Common.Content.OptionalArray<NewItemReward>
    {
        public OptionalArrayOfNewItemReward()
        {
        }
        public OptionalArrayOfNewItemReward(NewItemReward[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class MapOfAnnouncementState : Beamable.Common.Content.SerializableDictionaryStringToSomething<AnnouncementState>
    {
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfAttachmentRequest : Beamable.Common.Content.OptionalArray<AttachmentRequest>
    {
        public OptionalArrayOfAttachmentRequest()
        {
        }
        public OptionalArrayOfAttachmentRequest(AttachmentRequest[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalMessage : Beamable.Common.Content.Optional<Message>
    {
        public OptionalMessage()
        {
        }
        public OptionalMessage(Message value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfMessage : Beamable.Common.Content.OptionalArray<Message>
    {
        public OptionalArrayOfMessage()
        {
        }
        public OptionalArrayOfMessage(Message[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalMailRewards : Beamable.Common.Content.Optional<MailRewards>
    {
        public OptionalMailRewards()
        {
        }
        public OptionalMailRewards(MailRewards value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfCohortEntry : Beamable.Common.Content.OptionalArray<CohortEntry>
    {
        public OptionalArrayOfCohortEntry()
        {
        }
        public OptionalArrayOfCohortEntry(CohortEntry[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalGamerTag : Beamable.Common.Content.Optional<GamerTag>
    {
        public OptionalGamerTag()
        {
        }
        public OptionalGamerTag(GamerTag value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalSessionUser : Beamable.Common.Content.Optional<SessionUser>
    {
        public OptionalSessionUser()
        {
        }
        public OptionalSessionUser(SessionUser value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalSessionLanguageContext : Beamable.Common.Content.Optional<SessionLanguageContext>
    {
        public OptionalSessionLanguageContext()
        {
        }
        public OptionalSessionLanguageContext(SessionLanguageContext value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfCustomCohortRule : Beamable.Common.Content.OptionalArray<CustomCohortRule>
    {
        public OptionalArrayOfCustomCohortRule()
        {
        }
        public OptionalArrayOfCustomCohortRule(CustomCohortRule[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfCloudStorage : Beamable.Common.Content.OptionalArray<CloudStorage>
    {
        public OptionalArrayOfCloudStorage()
        {
        }
        public OptionalArrayOfCloudStorage(CloudStorage[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
    [System.SerializableAttribute()]
    public class OptionalArrayOfTrialCustomRule : Beamable.Common.Content.OptionalArray<TrialCustomRule>
    {
        public OptionalArrayOfTrialCustomRule()
        {
        }
        public OptionalArrayOfTrialCustomRule(TrialCustomRule[] value)
        {
            HasValue = true;
            Value = value;
        }
    }
}
