
namespace Beamable.Api.Autogenerated.Tournaments
{
	using Beamable.Api.Autogenerated.Models;
	using Beamable.Common;
	using Beamable.Common.Content;
	using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
	using Method = Beamable.Common.Api.Method;

	public partial interface ITournamentsApi
	{
		Promise<GetStatusForGroupsResponse> PostSearchGroups(GetStatusForGroupsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
		Promise<TournamentQueryResponse> Get([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> isRunning, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> contentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> cycle, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
		Promise<PlayerStatus> Post(JoinRequest gsReq);
		Promise<GetGroupStatusResponse> GetMeGroup([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> contentId);
		Promise<RewardsResponse> GetRewards([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> contentId);
		Promise<RewardsResponse> PostRewards(RewardsRequest gsReq);
		Promise<GetStandingsResponse> GetGlobal(string tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> max, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> focus, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> cycle, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> from);
		Promise<GetStandingsResponse> GetStandingsGroup(string tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> max, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> focus, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> cycle, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> from);
		Promise<GetStandingsResponse> GetStandings(string tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> max, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> focus, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> cycle, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> from);
		Promise<AdminGetPlayerStatusResponse> GetAdminPlayer(long playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> contentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> hasUnclaimedRewards);
		Promise<AdminPlayerStatus> PutAdminPlayer(UpdatePlayerStatusRequest gsReq);
		Promise<GetPlayerStatusResponse> GetMe([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> contentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> hasUnclaimedRewards);
		Promise<GetChampionsResponse> GetChampions(string tournamentId, int cycles);
		Promise<EmptyResponse> PostScore(ScoreRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
		Promise<GetGroupsResponse> GetGroups(string tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> max, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> focus, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> cycle, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> from);
	}
	public partial class TournamentsApi : ITournamentsApi
	{
		public virtual Promise<GetStatusForGroupsResponse> PostSearchGroups(GetStatusForGroupsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/basic/tournaments/search/groups";
			// make the request and return the result
			return _requester.Request<GetStatusForGroupsResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, Beamable.Serialization.JsonSerializable.FromJson<GetStatusForGroupsResponse>);
		}
		public virtual Promise<TournamentQueryResponse> Get([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> isRunning, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> contentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> cycle, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/basic/tournaments/";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			if (((isRunning != default(OptionalBool))
						&& isRunning.HasValue))
			{
				gsQueries.Add(string.Concat("isRunning=", isRunning.ToString()));
			}
			if (((contentId != default(OptionalString))
						&& contentId.HasValue))
			{
				gsQueries.Add(string.Concat("contentId=", contentId.ToString()));
			}
			if (((cycle != default(OptionalInt))
						&& cycle.HasValue))
			{
				gsQueries.Add(string.Concat("cycle=", cycle.ToString()));
			}
			gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
			gsUrl = string.Concat(gsUrl, gsQuery);
			// make the request and return the result
			return _requester.Request<TournamentQueryResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, Beamable.Serialization.JsonSerializable.FromJson<TournamentQueryResponse>);
		}
		public virtual Promise<PlayerStatus> Post(JoinRequest gsReq)
		{
			string gsUrl = "/basic/tournaments/";
			// make the request and return the result
			return _requester.Request<PlayerStatus>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, Beamable.Serialization.JsonSerializable.FromJson<PlayerStatus>);
		}
		public virtual Promise<GetGroupStatusResponse> GetMeGroup([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> contentId)
		{
			string gsUrl = "/basic/tournaments/me/group";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			if (((contentId != default(OptionalString))
						&& contentId.HasValue))
			{
				gsQueries.Add(string.Concat("contentId=", contentId.ToString()));
			}
			gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
			gsUrl = string.Concat(gsUrl, gsQuery);
			// make the request and return the result
			return _requester.Request<GetGroupStatusResponse>(Method.GET, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<GetGroupStatusResponse>);
		}
		public virtual Promise<RewardsResponse> GetRewards([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> contentId)
		{
			string gsUrl = "/basic/tournaments/rewards";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			if (((tournamentId != default(OptionalString))
						&& tournamentId.HasValue))
			{
				gsQueries.Add(string.Concat("tournamentId=", tournamentId.ToString()));
			}
			if (((contentId != default(OptionalString))
						&& contentId.HasValue))
			{
				gsQueries.Add(string.Concat("contentId=", contentId.ToString()));
			}
			gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
			gsUrl = string.Concat(gsUrl, gsQuery);
			// make the request and return the result
			return _requester.Request<RewardsResponse>(Method.GET, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<RewardsResponse>);
		}
		public virtual Promise<RewardsResponse> PostRewards(RewardsRequest gsReq)
		{
			string gsUrl = "/basic/tournaments/rewards";
			// make the request and return the result
			return _requester.Request<RewardsResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, Beamable.Serialization.JsonSerializable.FromJson<RewardsResponse>);
		}
		public virtual Promise<GetStandingsResponse> GetGlobal(string tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> max, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> focus, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> cycle, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> from)
		{
			string gsUrl = "/basic/tournaments/global";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			gsQueries.Add(string.Concat("tournamentId=", tournamentId.ToString()));
			if (((max != default(OptionalInt))
						&& max.HasValue))
			{
				gsQueries.Add(string.Concat("max=", max.ToString()));
			}
			if (((focus != default(OptionalLong))
						&& focus.HasValue))
			{
				gsQueries.Add(string.Concat("focus=", focus.ToString()));
			}
			if (((cycle != default(OptionalInt))
						&& cycle.HasValue))
			{
				gsQueries.Add(string.Concat("cycle=", cycle.ToString()));
			}
			if (((from != default(OptionalInt))
						&& from.HasValue))
			{
				gsQueries.Add(string.Concat("from=", from.ToString()));
			}
			gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
			gsUrl = string.Concat(gsUrl, gsQuery);
			// make the request and return the result
			return _requester.Request<GetStandingsResponse>(Method.GET, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<GetStandingsResponse>);
		}
		public virtual Promise<GetStandingsResponse> GetStandingsGroup(string tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> max, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> focus, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> cycle, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> from)
		{
			string gsUrl = "/basic/tournaments/standings/group";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			gsQueries.Add(string.Concat("tournamentId=", tournamentId.ToString()));
			if (((max != default(OptionalInt))
						&& max.HasValue))
			{
				gsQueries.Add(string.Concat("max=", max.ToString()));
			}
			if (((focus != default(OptionalLong))
						&& focus.HasValue))
			{
				gsQueries.Add(string.Concat("focus=", focus.ToString()));
			}
			if (((cycle != default(OptionalInt))
						&& cycle.HasValue))
			{
				gsQueries.Add(string.Concat("cycle=", cycle.ToString()));
			}
			if (((from != default(OptionalInt))
						&& from.HasValue))
			{
				gsQueries.Add(string.Concat("from=", from.ToString()));
			}
			gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
			gsUrl = string.Concat(gsUrl, gsQuery);
			// make the request and return the result
			return _requester.Request<GetStandingsResponse>(Method.GET, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<GetStandingsResponse>);
		}
		public virtual Promise<GetStandingsResponse> GetStandings(string tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> max, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> focus, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> cycle, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> from)
		{
			string gsUrl = "/basic/tournaments/standings";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			gsQueries.Add(string.Concat("tournamentId=", tournamentId.ToString()));
			if (((max != default(OptionalInt))
						&& max.HasValue))
			{
				gsQueries.Add(string.Concat("max=", max.ToString()));
			}
			if (((focus != default(OptionalLong))
						&& focus.HasValue))
			{
				gsQueries.Add(string.Concat("focus=", focus.ToString()));
			}
			if (((cycle != default(OptionalInt))
						&& cycle.HasValue))
			{
				gsQueries.Add(string.Concat("cycle=", cycle.ToString()));
			}
			if (((from != default(OptionalInt))
						&& from.HasValue))
			{
				gsQueries.Add(string.Concat("from=", from.ToString()));
			}
			gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
			gsUrl = string.Concat(gsUrl, gsQuery);
			// make the request and return the result
			return _requester.Request<GetStandingsResponse>(Method.GET, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<GetStandingsResponse>);
		}
		public virtual Promise<AdminGetPlayerStatusResponse> GetAdminPlayer(long playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> contentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> hasUnclaimedRewards)
		{
			string gsUrl = "/basic/tournaments/admin/player";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			gsQueries.Add(string.Concat("playerId=", playerId.ToString()));
			if (((tournamentId != default(OptionalString))
						&& tournamentId.HasValue))
			{
				gsQueries.Add(string.Concat("tournamentId=", tournamentId.ToString()));
			}
			if (((contentId != default(OptionalString))
						&& contentId.HasValue))
			{
				gsQueries.Add(string.Concat("contentId=", contentId.ToString()));
			}
			if (((hasUnclaimedRewards != default(OptionalBool))
						&& hasUnclaimedRewards.HasValue))
			{
				gsQueries.Add(string.Concat("hasUnclaimedRewards=", hasUnclaimedRewards.ToString()));
			}
			gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
			gsUrl = string.Concat(gsUrl, gsQuery);
			// make the request and return the result
			return _requester.Request<AdminGetPlayerStatusResponse>(Method.GET, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<AdminGetPlayerStatusResponse>);
		}
		public virtual Promise<AdminPlayerStatus> PutAdminPlayer(UpdatePlayerStatusRequest gsReq)
		{
			string gsUrl = "/basic/tournaments/admin/player";
			// make the request and return the result
			return _requester.Request<AdminPlayerStatus>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), true, Beamable.Serialization.JsonSerializable.FromJson<AdminPlayerStatus>);
		}
		public virtual Promise<GetPlayerStatusResponse> GetMe([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> contentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> hasUnclaimedRewards)
		{
			string gsUrl = "/basic/tournaments/me";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			if (((tournamentId != default(OptionalString))
						&& tournamentId.HasValue))
			{
				gsQueries.Add(string.Concat("tournamentId=", tournamentId.ToString()));
			}
			if (((contentId != default(OptionalString))
						&& contentId.HasValue))
			{
				gsQueries.Add(string.Concat("contentId=", contentId.ToString()));
			}
			if (((hasUnclaimedRewards != default(OptionalBool))
						&& hasUnclaimedRewards.HasValue))
			{
				gsQueries.Add(string.Concat("hasUnclaimedRewards=", hasUnclaimedRewards.ToString()));
			}
			gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
			gsUrl = string.Concat(gsUrl, gsQuery);
			// make the request and return the result
			return _requester.Request<GetPlayerStatusResponse>(Method.GET, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<GetPlayerStatusResponse>);
		}
		public virtual Promise<GetChampionsResponse> GetChampions(string tournamentId, int cycles)
		{
			string gsUrl = "/basic/tournaments/champions";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			gsQueries.Add(string.Concat("tournamentId=", tournamentId.ToString()));
			gsQueries.Add(string.Concat("cycles=", cycles.ToString()));
			gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
			gsUrl = string.Concat(gsUrl, gsQuery);
			// make the request and return the result
			return _requester.Request<GetChampionsResponse>(Method.GET, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<GetChampionsResponse>);
		}
		public virtual Promise<EmptyResponse> PostScore(ScoreRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/basic/tournaments/score";
			// make the request and return the result
			return _requester.Request<EmptyResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, Beamable.Serialization.JsonSerializable.FromJson<EmptyResponse>);
		}
		public virtual Promise<GetGroupsResponse> GetGroups(string tournamentId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> max, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> focus, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> cycle, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> from)
		{
			string gsUrl = "/basic/tournaments/groups";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			gsQueries.Add(string.Concat("tournamentId=", tournamentId.ToString()));
			if (((max != default(OptionalInt))
						&& max.HasValue))
			{
				gsQueries.Add(string.Concat("max=", max.ToString()));
			}
			if (((focus != default(OptionalLong))
						&& focus.HasValue))
			{
				gsQueries.Add(string.Concat("focus=", focus.ToString()));
			}
			if (((cycle != default(OptionalInt))
						&& cycle.HasValue))
			{
				gsQueries.Add(string.Concat("cycle=", cycle.ToString()));
			}
			if (((from != default(OptionalInt))
						&& from.HasValue))
			{
				gsQueries.Add(string.Concat("from=", from.ToString()));
			}
			gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
			gsUrl = string.Concat(gsUrl, gsQuery);
			// make the request and return the result
			return _requester.Request<GetGroupsResponse>(Method.GET, gsUrl, default(object), true, Beamable.Serialization.JsonSerializable.FromJson<GetGroupsResponse>);
		}
	}
}
