// This file generated by a copy-operation from another project. 
// Edits to this file will be overwritten by the build process. 


namespace Beamable.Api.Autogenerated.Leaderboards
{
	using Beamable.Api.Autogenerated.Models;
	using Beamable.Common;
	using Beamable.Common.Content;
	using Beamable.Common.Dependencies;
	using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
	using Method = Beamable.Common.Api.Method;

	public partial interface ILeaderboardsApi
	{
		/// <param name="includePartitions"></param>
		/// <param name="limit"></param>
		/// <param name="prefix"></param>
		/// <param name="skip"></param>
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="LeaderboardListResponse"/></returns>
		Promise<LeaderboardListResponse> GetList([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> includePartitions, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> prefix, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> skip, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
		/// <param name="dbid"></param>
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="ListLeaderBoardViewResponse"/></returns>
		Promise<ListLeaderBoardViewResponse> GetPlayer(long dbid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
		/// <param name="boardId"></param>
		/// <param name="joinBoard"></param>
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="LeaderboardAssignmentInfo"/></returns>
		Promise<LeaderboardAssignmentInfo> GetAssignment(string boardId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> joinBoard, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="LeaderboardUidResponse"/></returns>
		Promise<LeaderboardUidResponse> GetUid([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
	}
	public partial class LeaderboardsApi : ILeaderboardsApi
	{
		/// <param name="includePartitions"></param>
		/// <param name="limit"></param>
		/// <param name="prefix"></param>
		/// <param name="skip"></param>
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="LeaderboardListResponse"/></returns>
		public virtual Promise<LeaderboardListResponse> GetList([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> includePartitions, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> prefix, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> skip, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/basic/leaderboards/list";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			if (((skip != default(OptionalInt))
						&& skip.HasValue))
			{
				gsQueries.Add(string.Concat("skip=", skip.Value.ToString()));
			}
			if (((limit != default(OptionalInt))
						&& limit.HasValue))
			{
				gsQueries.Add(string.Concat("limit=", limit.Value.ToString()));
			}
			if (((prefix != default(OptionalString))
						&& prefix.HasValue))
			{
				gsQueries.Add(string.Concat("prefix=", prefix.Value.ToString()));
			}
			if (((includePartitions != default(OptionalBool))
						&& includePartitions.HasValue))
			{
				gsQueries.Add(string.Concat("includePartitions=", includePartitions.Value.ToString()));
			}
			if ((gsQueries.Count > 0))
			{
				gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
				gsUrl = string.Concat(gsUrl, gsQuery);
			}
			// make the request and return the result
			return _requester.Request<LeaderboardListResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<LeaderboardListResponse>);
		}
		/// <param name="dbid"></param>
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="ListLeaderBoardViewResponse"/></returns>
		public virtual Promise<ListLeaderBoardViewResponse> GetPlayer(long dbid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/basic/leaderboards/player";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			gsQueries.Add(string.Concat("dbid=", _requester.EscapeURL(dbid.ToString())));
			if ((gsQueries.Count > 0))
			{
				gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
				gsUrl = string.Concat(gsUrl, gsQuery);
			}
			// make the request and return the result
			return _requester.Request<ListLeaderBoardViewResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ListLeaderBoardViewResponse>);
		}
		/// <param name="boardId"></param>
		/// <param name="joinBoard"></param>
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="LeaderboardAssignmentInfo"/></returns>
		public virtual Promise<LeaderboardAssignmentInfo> GetAssignment(string boardId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)][System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> joinBoard, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/basic/leaderboards/assignment";
			string gsQuery = "?";
			System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
			gsQueries.Add(string.Concat("boardId=", _requester.EscapeURL(boardId.ToString())));
			if (((joinBoard != default(OptionalBool))
						&& joinBoard.HasValue))
			{
				gsQueries.Add(string.Concat("joinBoard=", joinBoard.Value.ToString()));
			}
			if ((gsQueries.Count > 0))
			{
				gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
				gsUrl = string.Concat(gsUrl, gsQuery);
			}
			// make the request and return the result
			return _requester.Request<LeaderboardAssignmentInfo>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<LeaderboardAssignmentInfo>);
		}
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="LeaderboardUidResponse"/></returns>
		public virtual Promise<LeaderboardUidResponse> GetUid([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/basic/leaderboards/uid";
			// make the request and return the result
			return _requester.Request<LeaderboardUidResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<LeaderboardUidResponse>);
		}
	}
}
