
namespace Beamable.Api.Autogenerated.Leaderboards
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface ILeaderboardsApi
    {
        /// <param name="limit"></param>
        /// <param name="prefix"></param>
        /// <param name="skip"></param>
        /// <returns>A promise containing the <see cref="LeaderboardListResponse"/></returns>
        Promise<LeaderboardListResponse> GetList([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> prefix, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> skip);
        /// <param name="dbid"></param>
        /// <returns>A promise containing the <see cref="ListLeaderBoardViewResponse"/></returns>
        Promise<ListLeaderBoardViewResponse> GetPlayer(long dbid);
        /// <param name="boardId"></param>
        /// <param name="joinBoard"></param>
        /// <returns>A promise containing the <see cref="LeaderboardAssignmentInfo"/></returns>
        Promise<LeaderboardAssignmentInfo> GetAssignment(string boardId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> joinBoard);
        /// <returns>A promise containing the <see cref="LeaderboardUidResponse"/></returns>
        Promise<LeaderboardUidResponse> GetUid();
    }
    public partial class LeaderboardsApi : ILeaderboardsApi
    {
        /// <param name="limit"></param>
        /// <param name="prefix"></param>
        /// <param name="skip"></param>
        /// <returns>A promise containing the <see cref="LeaderboardListResponse"/></returns>
        public virtual Promise<LeaderboardListResponse> GetList([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> prefix, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> skip)
        {
            string gsUrl = "/basic/leaderboards/list";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((skip != default(OptionalInt)) 
                        && skip.HasValue))
            {
                gsQueries.Add(string.Concat("skip=", skip.Value.ToString()));
            }
            if (((limit != default(OptionalInt)) 
                        && limit.HasValue))
            {
                gsQueries.Add(string.Concat("limit=", limit.Value.ToString()));
            }
            if (((prefix != default(OptionalString)) 
                        && prefix.HasValue))
            {
                gsQueries.Add(string.Concat("prefix=", prefix.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<LeaderboardListResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<LeaderboardListResponse>);
        }
        /// <param name="dbid"></param>
        /// <returns>A promise containing the <see cref="ListLeaderBoardViewResponse"/></returns>
        public virtual Promise<ListLeaderBoardViewResponse> GetPlayer(long dbid)
        {
            string gsUrl = "/basic/leaderboards/player";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            gsQueries.Add(string.Concat("dbid=", _requester.EscapeURL(dbid.ToString())));
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ListLeaderBoardViewResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<ListLeaderBoardViewResponse>);
        }
        /// <param name="boardId"></param>
        /// <param name="joinBoard"></param>
        /// <returns>A promise containing the <see cref="LeaderboardAssignmentInfo"/></returns>
        public virtual Promise<LeaderboardAssignmentInfo> GetAssignment(string boardId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> joinBoard)
        {
            string gsUrl = "/basic/leaderboards/assignment";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            gsQueries.Add(string.Concat("boardId=", _requester.EscapeURL(boardId.ToString())));
            if (((joinBoard != default(OptionalBool)) 
                        && joinBoard.HasValue))
            {
                gsQueries.Add(string.Concat("joinBoard=", joinBoard.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<LeaderboardAssignmentInfo>(Method.GET, gsUrl, default(object), true, this.Serialize<LeaderboardAssignmentInfo>);
        }
        /// <returns>A promise containing the <see cref="LeaderboardUidResponse"/></returns>
        public virtual Promise<LeaderboardUidResponse> GetUid()
        {
            string gsUrl = "/basic/leaderboards/uid";
            // make the request and return the result
            return _requester.Request<LeaderboardUidResponse>(Method.GET, gsUrl, default(object), true, this.Serialize<LeaderboardUidResponse>);
        }
    }
}
