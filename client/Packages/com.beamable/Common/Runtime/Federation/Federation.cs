// This file generated by a copy-operation from another project. 
// Edits to this file will be overwritten by the build process. 

using Beamable.Api.Autogenerated.Models;
using Beamable.Common.Api.Auth;
using Beamable.Common.BeamCli;
using Beamable.Common.Dependencies;
using BeamableReflection;
using System;
using System.Collections.Generic;
using ItemProperty = Beamable.Common.Api.Inventory.ItemProperty;

namespace Beamable.Common
{
	/// <summary>
	/// All of our federations must inherit from this interface and have a type argument constrained to <see cref="IFederationId"/>.
	/// For example, ISomeFederation[T] : IFederation where T : IFederationId
	/// </summary>
	public interface IFederation
	{
	}

	/// <summary>
	/// Uniquely identifies a federation implementation.
	/// This enables different implementations of the same federation to be active at the same time.
	///
	/// For example, <see cref="IFederatedLogin{T}"/> is used to implement external auth. A game might want different implementations for `epic`, `steam`, or some other third-party account holder.  
	/// </summary>
	[Preserve]
	public interface IFederationId
	{
		/// <summary>
		/// This should be a constant string: UniqueName => "my_federation_id".
		/// </summary>
		string UniqueName { get; }
	}

	/// <summary>
	/// Old version of <see cref="IFederationId"/>. To be deleted at next major release.
	/// </summary>
	[Preserve, Obsolete("Please use IFederationId instead.")]
	public interface IThirdPartyCloudIdentity : IFederationId
	{
		// No longer used internally!!!
	}

	/// <summary>
	/// In various locations in code, we need a data structure to define all federations that exist for a particular <see cref="IFederationId"/>.
	/// This structure holds that data.
	/// </summary>
	[Serializable, CliContractType]
	public struct FederationInstance
	{
		/// <summary>
		/// The federation id for this federation instance.
		/// </summary>
		public string FederationId;

		/// <summary>
		/// The list of interface names of <see cref="IFederation"/> sub-interfaces.
		/// </summary>
		public string[] FederationTypes;
	}

	public interface IHaveServiceName
	{
		string ServiceName { get; }
	}

	public interface ISupportsFederatedLogin<T> : IHaveServiceName where T : IFederationId, new()
	{
		IDependencyProvider Provider { get; }
	}

	public interface ISupportsFederatedInventory<T> : ISupportsFederatedLogin<T>
		where T : IFederationId, new()
	{
	}
}
