using Beamable.Api.Autogenerated.Mailbox;
using Beamable.Common;
using Beamable.Common.Dependencies;
using Beamable.ConsoleCommands;
using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Scripting;

namespace Beamable.Config
{
	[BeamableConsoleCommandProvider]
	public class ConfigConsoleCommands
	{
		private readonly IDependencyProvider _provider;
		public BeamableConsole Console => _provider.GetService<BeamableConsole>();

		[Preserve]
		public ConfigConsoleCommands(IDependencyProvider provider)
		{
			_provider = provider;
		}

		[BeamableConsoleCommand(nameof(Config), "Manipulate config values.", "CONFIG [list | get <name> ]")]
		private string Config(params string[] args)
		{
			if (args.Length < 1)
			{
				return Console.Help(nameof(Config));
			}
			
			var config = _provider.GetService<IRuntimeConfigProvider>();


			string command = args[0];
			if (command == "list")
			{
				string retVal = "Config Variables:";
				retVal += "\n   cid = " + config.Cid;
				retVal += "\n   pid = " + config.Pid;

				return retVal;
			}
			else if (command == "get")
			{
				if (args.Length < 2)
				{
					return Console.Help(nameof(Config));
				}

				string name = args[1];
				switch (name.ToLowerInvariant())
				{
					case "cid": return "cid = " + config.Cid;
					case "pid": return "pid = " + config.Cid;
					default:
						return "Invalid config variable: " + name;
				}
			}
			else
			{
				string retVal = "Unrecognized Config Command: " + command;
				retVal += "\n\n";
				retVal += Console.Help(nameof(Config));
				return retVal;
			}
		}
	}
}
