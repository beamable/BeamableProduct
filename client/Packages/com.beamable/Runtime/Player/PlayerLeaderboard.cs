using Beamable.Api.Autogenerated.Leaderboards;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Dependencies;
using Beamable.Common.Player;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Beamable.Player
{
	[Serializable]
	public class PlayerLeaderboard : AbsObservableReadonlyList<PlayerLeaderboardEntry>
	{
		private readonly ILeaderboardsApi _api;
		private readonly IUserContext _userContext;
		public string id;

		public LeaderBoardViewResponse view;
		public LeaderboardAssignmentInfo info;

		public PlayerLeaderboard(ILeaderboardsApi api, IUserContext userContext)
		{
			_api = api;
			_userContext = userContext;
		}

		protected override async Promise PerformRefresh()
		{
			view = await _api.ObjectGetView(id);
			// info = await _api.ObjectGetAssignment(id);
		}

		public async Promise SetScore(double score)
		{
			info = await _api.GetAssignment(id, true);

			await _api.ObjectPutEntry(info.leaderboardId, new LeaderboardAddRequest {id = _userContext.UserId, score = score});
		}
	}

	[Serializable]
	public class PlayerLeaderboardEntry
	{
		public long playerId;
	}

	[Serializable]
	public class PlayerLeaderboards : //AbsObservableReadonlyList<PlayerLeaderboard>,  
		IStorageHandler<PlayerLeaderboards>, IServiceStorable
	{
		private readonly IDependencyProvider _provider;
		private StorageHandle<PlayerLeaderboards> _handle;

		public List<PlayerLeaderboard> boards = new List<PlayerLeaderboard>();
		
		public PlayerLeaderboards(IDependencyProvider provider)
		{
			_provider = provider;
		}
		
		public void ReceiveStorageHandle(StorageHandle<PlayerLeaderboards> handle)
		{
			_handle = handle;
		}

		public void OnBeforeSaveState()
		{
		}

		public void OnAfterLoadState()
		{
		}

		public PlayerLeaderboard GetBoard(string boardId)
		{
			var board = DependencyBuilder.Instantiate<PlayerLeaderboard>(_provider);
			board.id = boardId;
			boards.Add(board);
			return board;
		}

		// public async Promise Test()
		// {
		// 	
		// 	//var data = await _api.GetPlayer(_userContext.UserId);
		// 	
		// }

		// protected override async Promise PerformRefresh()
		// {
		// 	var res = await _api.GetList();
		// 	boards = res.nameList;
		// }
	}
}
