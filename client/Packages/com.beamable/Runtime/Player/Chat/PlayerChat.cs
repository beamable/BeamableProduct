using Beamable.Api.Autogenerated.Chatv2;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Api.Notifications;
using Beamable.Common.Dependencies;
using Beamable.Serialization;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using CreateRoomRequest = Beamable.Api.Autogenerated.Models.CreateRoomRequest;
using Message = Beamable.Experimental.Api.Chat.Message;
using RoomInfo = Beamable.Api.Autogenerated.Models.RoomInfo;

namespace Beamable.Player
{
	[Serializable]
	public class PlayerChat
	{
		public Action<Message> OnMessageReceived;
		public Action<RoomInfo> OnRoomCreated;
		
		private const string ChatEvent = "CHAT.RECEIVED";
		private const string RefreshEvent = "chatV2.refresh";
		
		public List<Message> messages;
		public List<RoomInfo> rooms;
		
		private IDependencyProvider _provider;
		private IChatv2Api _api;
		private IUserContext _userContext;
		private Promise<GetRoomsResponse> _pendingRefresh;
		private Dictionary<RoomInfo, Action<RoomInfo>> OnRoomUpdatedByInfo;

		private INotificationService NotificationService => _provider.GetService<INotificationService>();

		public bool IsLoading
		{
			get;
			private set;
		}

		public PlayerChat(IDependencyProvider provider)
		{
			_provider = provider;
			messages = new List<Message>();
			rooms = new List<RoomInfo>();
			OnRoomUpdatedByInfo = new Dictionary<RoomInfo, Action<RoomInfo>>();
			NotificationService.Subscribe(ChatEvent, OnChatEvent);
			NotificationService.Subscribe(RefreshEvent, OnChatRefresh);
			Hydrate(provider);
		}

		void Hydrate(IDependencyProvider provider)
		{
			_provider = provider;
			_api = provider.GetService<IChatv2Api>();
			_userContext = provider.GetService<IUserContext>();

			//TODO implement the list of messages
			messages.Clear();
		}

		public Promise<CreateRoomResponse> CreateRoom(string roomName, long[] allPlayers, Action<RoomInfo> updateCallback = null)
		{
			CreateRoomRequest request = new CreateRoomRequest
			{
				roomName = roomName, keepSubscribed = true, players = allPlayers
			};

			return _api.ObjectPostRooms(_userContext.UserId, request).Then(response =>
			{
				
				OnRoomUpdatedByInfo[response.room] = updateCallback;
				rooms.Add(response.room);
				OnRoomCreated?.Invoke(response.room);
				updateCallback?.Invoke(response.room);
			});
		}

		public Promise<SendMessageResponse> SendMessage(RoomInfo roomInfo, string message)
		{
			var messageRequest = new SendMessageRequest();
			messageRequest.content = message;
			messageRequest.roomId = roomInfo.id;

			return _api.ObjectPostMessages(_userContext.UserId, messageRequest);
		}

		public async Promise Refresh()
		{
			if (IsLoading)
			{
				await _pendingRefresh;
			}

			IsLoading = true;

			try
			{
				_pendingRefresh = _api.ObjectGetRooms(_userContext.UserId).Then(response =>
				{
					rooms.Clear();
					foreach (var roomInfo in response.rooms)
					{
						rooms.Add(roomInfo);
						if (OnRoomUpdatedByInfo.TryGetValue(roomInfo, out var callback))
						{
							callback?.Invoke(roomInfo);
						}
					}
				});
				await _pendingRefresh;
			}
			finally
			{
				_pendingRefresh = null;
				IsLoading = false;
			}
		}

		public async Task<RoomInfo> JoinRoom(string roomName)
		{
			var roomsResponse = await _api.ObjectGetRooms(_userContext.UserId);
			
			foreach (var room in roomsResponse.rooms)
			{
				if (room.name.Equals(roomName))
				{
					return room;
				}
			}

			return null;
		}

		public void Unsubscribe()
		{
			NotificationService.Unsubscribe(ChatEvent, OnChatEvent);
			NotificationService.Unsubscribe(RefreshEvent, OnChatRefresh);
		}
		
		private void OnChatRefresh(object payload)
		{
			var data = payload as IDictionary<string, object>;
		}
		
		private void OnChatEvent(object payload)
		{
			var message = ToMessage(payload);

			foreach (var room in rooms)
			{
				if (room.id == message.roomId)
				{
					messages.Add(message);
					OnMessageReceived?.Invoke(message);
					return;
				}
			}
		}

		private Message ToMessage(object payload)
		{
			var result = new Message();
			var data = payload as IDictionary<string, object>;
			JsonSerializable.Deserialize(result, data, JsonSerializable.ListMode.kReplace);

			return result;
		}
	}
}
