using Beamable.Api.Autogenerated.Chatv2;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common.Api;
using Beamable.Common.Api.Notifications;
using Beamable.Common.Dependencies;
using Beamable.Serialization;
using System;
using System.Collections.Generic;
using UnityEngine;
using CreateRoomRequest = Beamable.Api.Autogenerated.Models.CreateRoomRequest;
using Message = Beamable.Experimental.Api.Chat.Message;
using RoomInfo = Beamable.Api.Autogenerated.Models.RoomInfo;

namespace Beamable.Player
{
	[Serializable]
	public class PlayerChat
	{
		public Action<Message> OnMessageReceived;
		
		private const string ChatEvent = "CHAT.RECEIVED";
		
		public List<Message> messages;
		
		private IDependencyProvider _provider;
		private IChatv2Api _api;
		private IUserContext _userContext;
		private Dictionary<RoomInfo, Action<RoomInfo>> OnRoomUpdatedByInfo;
		
		
		private INotificationService NotificationService => _provider.GetService<INotificationService>();

		public PlayerChat(IDependencyProvider provider)
		{
			_provider = provider;
			messages = new List<Message>();
			Hydrate(provider);
		}
		
		void Hydrate(IDependencyProvider provider)
		{
			_provider = provider;
			_api = provider.GetService<IChatv2Api>();
			_userContext = provider.GetService<IUserContext>();

			//TODO implement the list of messages
			messages.Clear();
		}

		public void CreateRoom(long playerId, string roomName, long[] allPlayers, Action<RoomInfo> updateCallback)
		{
			CreateRoomRequest request = new CreateRoomRequest
			{
				roomName = roomName, keepSubscribed = true, players = allPlayers
			};

			_api.ObjectPostRooms(playerId, request).Then(response =>
			{
				NotificationService.Subscribe(ChatEvent, OnChatEvent);
				OnRoomUpdatedByInfo[response.room] = updateCallback;
				updateCallback?.Invoke(response.room);
			});
		}

		public void SendMessage(long playerId, SendMessageRequest messageRequest)
		{
			_api.ObjectPostMessages(playerId, messageRequest).Then(response =>
			{
				//See if there is anything to be done here
			});
		}

		public void Refresh(long playerId)
		{
			_api.ObjectGetRooms(playerId).Then(response =>
			{
				foreach (var roomInfo in response.rooms)
				{
					if (OnRoomUpdatedByInfo.TryGetValue(roomInfo, out var callback))
					{
						callback?.Invoke(roomInfo);
					}
				}
			});
		}

		public void Unsubscribe()
		{
			NotificationService.Unsubscribe(ChatEvent, OnChatEvent);
		}
		
		private void OnChatEvent(object payload)
		{
			var message = ToMessage(payload);

			foreach (var pair in OnRoomUpdatedByInfo)
			{
				if (pair.Key.id == message.roomId)
				{
					messages.Add(message);
					OnMessageReceived?.Invoke(message);
					return;
				}
			}
		}

		private Message ToMessage(object payload)
		{
			var result = new Message();
			var data = payload as IDictionary<string, object>;
			JsonSerializable.Deserialize(result, data, JsonSerializable.ListMode.kReplace);

			return result;
		}
	}
}
