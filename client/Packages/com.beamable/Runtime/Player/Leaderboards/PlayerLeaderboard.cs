using Beamable.Api;
using Beamable.Api.Autogenerated.Groups;
using Beamable.Api.Autogenerated.GroupUsers;
using Beamable.Api.Autogenerated.Leaderboards;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Content;
using Beamable.Common.Dependencies;
using Beamable.Common.Player;
using Beamable.Coroutines;
using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.Serialization;

namespace Beamable.Player
{
	
	public interface IPlayerLeaderboardFriend
	{
		void SetSize(long boardSize);
		void SetCurrentScore(RankEntry entry);
		void SetCurrentFriendScore(RankEntry entry);
		Promise<LeaderboardAssignmentInfo> GetAssignment(bool joinBoard);
	}
	
	[Serializable]
	public class PlayerLeaderboard : IPlayerLeaderboardFriend
	{
		private readonly ILeaderboardsApi _api;
		private readonly IUserContext _userContext;
		private readonly CoroutineService _coroutineService;
		private readonly IGroupsApi _groupApi;
		private readonly IGroupUsersApi _groupUserApi;
		private Promise<LeaderboardAssignmentInfo> _assignment;
		
		public string boardId;
		public long boardSize;

		public OptionalPlayerLeaderboardScore myScore = new OptionalPlayerLeaderboardScore(); 
		public OptionalPlayerLeaderboardScore myFriendScore = new OptionalPlayerLeaderboardScore(); 

		
		[SerializeField]
		private PlayerTopScoresList _topScores;
		[SerializeField]
		private PlayerNearbyScoresList _nearbyScores;
		[SerializeField]
		private PlayerFriendScoresList _friendScores;
		[SerializeField]
		private PlayerGroupScoresList _groupScores;

		public PlayerTopScoresList TopScores
		{
			get
			{
				if (_topScores == null)
				{
					_topScores = new PlayerTopScoresList(this, _api, _userContext, _coroutineService);
					var _ = _topScores.Refresh();
				}

				return _topScores;
			}
		}

		public PlayerNearbyScoresList NearbyScores
		{
			get
			{
				if (_nearbyScores == null)
				{
					_nearbyScores = new PlayerNearbyScoresList(this, _api, _userContext, _coroutineService);
					var _ = _nearbyScores.Refresh();
				}

				return _nearbyScores;
			}
		}
		
		public PlayerFriendScoresList FriendScores
		{
			get
			{
				if (_friendScores == null)
				{
					_friendScores = new PlayerFriendScoresList(this, _api, _userContext, _coroutineService);
					var _ = _friendScores.Refresh();
				}

				return _friendScores;
			}
		}
		
		public PlayerGroupScoresList GroupScores
		{
			get
			{
				if (_groupScores == null)
				{
					_groupScores = new PlayerGroupScoresList(this, _api, _userContext, _coroutineService, _groupApi, _groupUserApi);
					var _ = _groupScores.Refresh();
				}

				return _groupScores;
			}
		}

		public PlayerLeaderboard(ILeaderboardsApi api, IUserContext userContext, CoroutineService coroutineService,IGroupsApi groupApi, IGroupUsersApi groupUserApi)
		{
			_api = api;
			_userContext = userContext;
			_coroutineService = coroutineService;
			_groupApi = groupApi;
			_groupUserApi = groupUserApi;
		}

		private Promise<LeaderboardAssignmentInfo> RefreshAssignment(bool joinBoard=false)
		{
			_assignment = _api.GetAssignment(boardId, joinBoard)
			                  .Recover(ex =>
			                  {
				                  if (ex is PlatformRequesterException err && err.Error.status == 404)
				                  {
					                  return new LeaderboardAssignmentInfo
					                  {
						                  leaderboardId = boardId, playerId = _userContext.UserId
					                  };
				                  }
				                  throw ex;
			                  });
			return _assignment;
		}

		Promise<LeaderboardAssignmentInfo> IPlayerLeaderboardFriend.GetAssignment(bool joinBoard)
		{
			return GetLocalAssignment(joinBoard);
		}

		async Promise<LeaderboardAssignmentInfo> GetLocalAssignment(bool joinBoard)
		{
			if (_assignment == null)
			{
				var assignment = await RefreshAssignment(joinBoard);
				return assignment;
			}
			else
			{
				return await _assignment;
			}
		}

		private async Promise GetCurrentScore()
		{
			var info = await GetLocalAssignment(false);
			var response = await _api.ObjectGetView(info.leaderboardId, max: 0, outlier: _userContext.UserId);
			boardSize = response.lb.boardSize;
			
			// response.lb.
		}
		
		public async Promise SetScore(double score, Dictionary<string, string> stats=null, bool includeStandardStats=true)
		{
			var info = await GetLocalAssignment(true);

			var request = new LeaderboardAddRequest {id = _userContext.UserId, score = score,};
			MapOfString statMap = null;
			if (includeStandardStats)
			{
				statMap = new MapOfString()
				{
					["alias"] = "test",
					["avatar"] = "3"
				};
				request.stats.Set(statMap);
			}

			if (stats != null)
			{
				if (statMap == null)
				{
					statMap = new MapOfString();
					request.stats.Set(statMap);
				}

				foreach (var kvp in stats)
				{
					statMap[kvp.Key] = kvp.Value;
				}
			}
			
			await _api.ObjectPutEntry(info.leaderboardId, request);
			
			// assume it was a success?
		}

		public Promise IncrementScore(double change, Dictionary<string, string> stats = null)
		{
			throw new NotImplementedException();
		}
		
		public Promise IncrementScore(double change, double minScore, double maxScore, Dictionary<string, string> stats = null)
		{
			throw new NotImplementedException();
		}

		void IPlayerLeaderboardFriend.SetSize(long size)
		{
			this.boardSize = size;
		}

		void IPlayerLeaderboardFriend.SetCurrentScore(RankEntry entry)
		{
			if (!myScore.HasValue)
			{
				myScore.Set(new PlayerLeaderboardScore(entry));
			}
			else
			{
				myScore.Value.rank = entry.rank;
				myScore.Value.score = entry.score;
				myScore.Value.stats = entry.stats;
			}
		}

		void IPlayerLeaderboardFriend.SetCurrentFriendScore(RankEntry entry)
		{
			if (!myFriendScore.HasValue)
			{
				myFriendScore.Set(new PlayerLeaderboardScore(entry));
			}
			else
			{
				myFriendScore.Value.rank = entry.rank;
				myFriendScore.Value.score = entry.score;
				myFriendScore.Value.stats = entry.stats;
			}
		}

	}

	[Serializable]
	public class OptionalPlayerLeaderboardScore : Optional<PlayerLeaderboardScore>
	{
		public OptionalPlayerLeaderboardScore(PlayerLeaderboardScore score)
		{
			Value = score;
			HasValue = true;
		}
		public OptionalPlayerLeaderboardScore()
		{
			
		}
	}

	[Serializable]
	public class PlayerLeaderboardScore 
#if UNITY_EDITOR
		: ISerializationCallbackReceiver
#endif
	{
		
#if UNITY_EDITOR
		[SerializeField]
		[HideInInspector]
		private string displayName;
#endif
		
		public long playerId;
		public long rank;
		public double score;
		public OptionalArrayOfRankEntryStat stats;

		public PlayerLeaderboardScore()
		{
			
		}

		public PlayerLeaderboardScore(RankEntry entry)
		{
			playerId = entry.gt;
			score = entry.score;
			rank = entry.rank;
			stats = entry.stats;

		}
#if UNITY_EDITOR
		public void OnBeforeSerialize()
		{
			displayName = $"{rank} - {playerId}";
		}
		public void OnAfterDeserialize()
		{
		}
#endif
	}

	[Serializable]
	public class LeaderboardDictionary : SerializableDictionaryStringToSomething<PlayerLeaderboard>
	{
		
	}
	
}
