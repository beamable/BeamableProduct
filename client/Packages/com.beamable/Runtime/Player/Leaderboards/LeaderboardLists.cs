using Beamable.Api.Autogenerated.Leaderboards;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Player;
using Beamable.Coroutines;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Beamable.Player
{

	[Serializable]
	public abstract class PlayerScoreList : 
		AbsObservableReadonlyList<PlayerLeaderboardScore>
	{
		protected readonly IPlayerLeaderboardFriend _board;
		protected readonly ILeaderboardsApi _api;
		protected readonly IUserContext _ctx;
		protected readonly CoroutineService _coroutineService;

		[SerializeField]
		protected int _size = 10;
		public int Size => _size;

		protected PlayerScoreList(IPlayerLeaderboardFriend board, 
		                          ILeaderboardsApi api, 
		                          IUserContext ctx,
		                          CoroutineService coroutineService)
		{
			_board = board;
			_api = api;
			_ctx = ctx;
			_coroutineService = coroutineService;
		}
		

		protected override async Promise PerformRefresh()
		{
			var info = await _board.GetAssignment(false);
			var p = new Promise();
			_coroutineService.StartNew("leaderboard-get-data", Routine());

			IEnumerator Routine()
			{
				yield return null; // delay 1 frame to allow for request configuration.
				var response = CreateRequest(info);
				response.Then(Apply).Merge(p);
			}
			await p;
		}

		protected abstract Promise<LeaderBoardViewResponse> CreateRequest(LeaderboardAssignmentInfo info);

		protected void Apply(LeaderBoardViewResponse result)
		{
			_board.SetSize(result.lb.boardSize);

			if (result.lb.rankgt.HasValue)
			{
				_board.SetCurrentScore(result.lb.rankgt);
			}
			
			var dict = new Dictionary<long, PlayerLeaderboardScore>();
			foreach (var curr in this)
			{
				dict[curr.playerId] = curr;
			}

			var next = new List<PlayerLeaderboardScore>();

			foreach (var rank in result.lb.rankings)
			{
				if (dict.TryGetValue(rank.gt, out var existing))
				{
					existing.score = rank.score;
					existing.rank = rank.rank;
					existing.stats = rank.stats;
					next.Add(existing);
				}
				else
				{
					var newScore = new PlayerLeaderboardScore(rank);
					next.Add(newScore);
				}
			}
			
			
			
			SetData(next);
		}
	}

	
}
