using Beamable.Api.Autogenerated.Leaderboards;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Content;
using Beamable.Common.Dependencies;
using Beamable.Coroutines;
using System;

namespace Beamable.Player
{
	
	[Serializable]
	public class PlayerFocusScoresListDictionary 
		: SerializableDictionaryStringToSomething<PlayerFocusScoresList>
	{
		
	}
	
	[Serializable]
	public class PlayerFocusScoresList : PlayerScoreList
	{
		/// <summary>
		/// The playerId that the leaderboard view is centered around. 
		/// </summary>
		public long playerId = -1;
		
		public PlayerFocusScoresList(IPlayerLeaderboardFriend board, IDependencyProvider provider)
			: base(board, provider)
		{
			
		}

		protected override void OnHydrate()
		{
			if (playerId == -1)
			{
				playerId = _ctx.UserId;
			}
		}

		protected override Promise<LeaderBoardViewResponse> CreateRequest(LeaderboardAssignmentInfo info)
		{
			return _api.ObjectGetView(info.leaderboardId, focus: playerId, max: viewSize, outlier: _ctx.UserId);
		}

		public PlayerFocusScoresList LoadCount(int totalSize)
		{
			_viewSize = totalSize;
			var _ = Refresh();
			return this;
		}

		public new async Promise<PlayerFocusScoresList> Refresh()
		{
			await base.Refresh();
			return this;
		}
	}


}
