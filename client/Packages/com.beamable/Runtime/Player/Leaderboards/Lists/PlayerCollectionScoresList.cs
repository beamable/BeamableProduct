using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Content;
using Beamable.Common.Dependencies;
using Beamable.Common.Pooling;
using System;
using System.Collections.Generic;

namespace Beamable.Player
{
	[Serializable]
	public class PlayerCollectionScoresListDictionary
		: SerializableDictionaryStringToSomething<PlayerCollectionScoresList>
	{

	}


	[Serializable]
	public class PlayerCollectionScoresList : PlayerScoreList
	{
		private const string ID_SPLITTER = ",";

		/// <summary>
		/// The set of playerIds represented in this leaderboard view.
		/// </summary>
		public long[] playerIds = new long[] { };

		public PlayerCollectionScoresList(IPlayerLeaderboardFriend board, IDependencyProvider provider) : base(board, provider) { }

		protected override async Promise<LeaderBoardViewResponse> CreateRequest(LeaderboardAssignmentInfo info)
		{
			using var sb = StringBuilderPool.StaticPool.Spawn();
			foreach (var playerId in playerIds)
			{
				sb.Builder.Append(playerId);
				sb.Builder.Append(ID_SPLITTER);
			}

			var idList = sb.Builder.ToString();
			_viewSize = playerIds.Length;
			var view = await _api.ObjectGetRanks(idList, info.leaderboardId);
			return view;
		}

		public new async Promise<PlayerCollectionScoresList> Refresh()
		{
			await base.Refresh();
			return this;
		}
	}
}
