using Beamable.Api.Autogenerated.Leaderboards;
using Beamable.Api.Autogenerated.Leaderboards.Extensions;
using Beamable.Api.Autogenerated.Models;
using Beamable.Api.Caches;
using Beamable.Api.Stats;
using Beamable.Common;
using Beamable.Common.Api;
using Beamable.Common.Api.Stats;
using Beamable.Common.Content;
using Beamable.Common.Dependencies;
using System.Collections.Generic;
using UnityEngine;

namespace Samples.LightBeamSamples.Leaderboards
{
	public class FakeLeaderboardApi : LeaderboardsDecoratorApi
	{
		public FakeLeaderboardApi(ILeaderboardsApi api) : base(api)
		{
			
		}

		public override async Promise<LeaderBoardViewResponse> ObjectGetView(string objectId,
		                                                               Optional<long> focus = null,
		                                                               Optional<bool> friends = null,
		                                                               Optional<int> from = null,
		                                                               Optional<bool> guild = null,
		                                                               Optional<int> max = null,
		                                                               Optional<long> outlier = null,
		                                                               bool includeAuthHeader = true)
		{
			var realData = await base.ObjectGetView(objectId, focus, friends, from, guild, max, outlier, includeAuthHeader);
			
			// add random stuff.
			if ((max?.HasValue ?? false) && realData.lb.rankings.Length < max)
			{
				PopulateFakeRankings(max.Value, ref realData.lb.rankings);
			}

			return realData;
		}

		static void PopulateFakeRankings(int count, ref RankEntry[] entries)
		{
			var old = entries;
			var size = entries.Length;
			var requiredAdditions = count - size;
			entries = new RankEntry[count];
			for (var i = 0; i < size; i++)
			{
				entries[i] = old[i];
			}

			for (var i = size; i < count; i++)
			{
				entries[i] = new RankEntry
				{
					gt = (long)(Random.value * long.MaxValue), 
					rank = i, 
				};
				entries[i].score.Set((double)Random.value * 1000);
			}
		}
	}

	public class FakeStatsService : UnityStatsApiDecorator
	{
		public FakeStatsService(IResolvableStatsApi api) : base(api)
		{
			
		}

		public override async Promise<Dictionary<long, Dictionary<string, string>>> Resolve(string prefix, List<long> gamerTags)
		{
			var res = await base.Resolve(prefix, gamerTags);

			return res;
		}
	}
}
