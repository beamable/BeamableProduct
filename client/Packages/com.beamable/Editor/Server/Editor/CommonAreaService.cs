using Beamable.Common;
using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEditorInternal;

namespace Beamable.Server.Editor
{
	public class CommonAreaService
	{
		private MicroserviceConfiguration _config;

		public CommonAreaService(MicroserviceConfiguration config)
		{
			_config = config;
		}

		public void EnsureAreas(out AssemblyDefinitionAsset commonAssemblyAsset)
		{
			AssetDatabase.StartAssetEditing();
			try
			{
				commonAssemblyAsset = CreateCommonArea();
				CreateAutoGeneratedServicesArea();
			}
			finally
			{
				AssetDatabase.StopAssetEditing();
			}
		}

		public string GetCommonPath()
		{
			return Path.Combine("Assets/Beamable/Common");
		}

		public string GetAutoGeneratedPath()
		{
			return Path.Combine(Constants.Features.Services.AUTOGENERATED_CLIENT_PATH);
		}

		public string GetAutoGeneratedAsmDefPath()
		{
			return Path.Combine(GetAutoGeneratedPath(), $"{GetAutoGeneratedAsmDefName()}.asmdef");
		}

		public string GetAutoGeneratedSourceStartPath()
		{
			return Path.Combine(GetAutoGeneratedPath(), $"AutoGenMicroserviceClientSample.cs");
		}

		public static string GetAutoGeneratedAsmDefName() => "Unity.Beamable.Customer.MicroserviceClients";

		public static string GetCommonAsmDefName() => "Unity.Beamable.Customer.Common";

		public string GetCommonAsmDefPath()
		{
			return Path.Combine(GetCommonPath(), $"{GetCommonAsmDefName()}.asmdef");
		}

		public string GetCommonSourceStartPath()
		{
			return Path.Combine(GetCommonPath(), $"Sample.cs");
		}

		/// <summary>
		/// The Common Area is an assembly definition that can be referenced from Unity, and from a C#MS.
		/// This method will generate the folder, asmdef, and automatically have all existing C#MS's reference the common asmdef.
		/// <para> However, if <see cref="MicroserviceConfiguration.AutoBuildCommonAssembly"/> is false, this method will not do anything. </para>
		/// </summary>
		public AssemblyDefinitionAsset CreateCommonArea()
		{
			if (!_config.AutoBuildCommonAssembly) return null;

			AssetDatabase.StartAssetEditing();
			AssemblyDefinitionAsset asset = null;
			try
			{
				Directory.CreateDirectory(GetCommonPath());

				var asmPath = GetCommonAsmDefPath();
				asset = AssetDatabase.LoadAssetAtPath<AssemblyDefinitionAsset>(asmPath);
				if (asset == null)
				{
					AssemblyDefinitionHelper.CreateAssetDefinitionAssetOnDisk(asmPath, new AssemblyDefinitionInfo
					{
						Name = GetCommonAsmDefName(),
						References = new[]
						{
							"Unity.Beamable.Runtime.Common",
							"Unity.Beamable.Server.Runtime.Common",
							"Unity.Beamable.Server.Runtime.Mocks",
							"Beamable.SmallerJSON",
						},
						AutoReferenced = true
					});

					// make sure there is at least 1 script in that folder. Otherwise; we'll get a warning from Unity saying it won't compile it.
					var originalText = File.ReadAllText(Path.Combine("Packages/com.beamable/Template", "SharedSample.cs"));
					WriteIfDifferent(GetCommonSourceStartPath(), originalText);
				}
			}
			finally
			{
				AssetDatabase.StopAssetEditing();
			}
			
			if (asset == null)
			{
				asset = AssetDatabase.LoadAssetAtPath<AssemblyDefinitionAsset>(GetCommonAsmDefPath());
			}

			return asset;
		}

		/// <summary>
		/// The Common Area is an assembly definition that can be referenced from Unity, and from a C#MS.
		/// This method will generate the folder, asmdef, and automatically have all existing C#MS's reference the common asmdef.
		/// <para> However, if <see cref="MicroserviceConfiguration.AutoBuildCommonAssembly"/> is false, this method will not do anything. </para>
		/// </summary>
		public void CreateAutoGeneratedServicesArea()
		{
			if (!_config) return;

			AssetDatabase.StartAssetEditing();
			try
			{
				if (!Directory.Exists(GetAutoGeneratedPath()))
					Directory.CreateDirectory(GetAutoGeneratedPath());

				var asmPath = GetAutoGeneratedAsmDefPath();
				var asset = AssetDatabase.LoadAssetAtPath<AssemblyDefinitionAsset>(asmPath);
				if (asset == null)
				{
					AssemblyDefinitionHelper.CreateAssetDefinitionAssetOnDisk(asmPath, new AssemblyDefinitionInfo
					{
						Name = GetAutoGeneratedAsmDefName(),
						References = new[]
						{
							"Beamable.Platform",
							"Unity.Beamable",
							"Unity.Beamable.Runtime.Common",
							"Unity.Beamable.Server.Runtime",
							"Unity.Beamable.Server.Runtime.Common",
							"Unity.Beamable.Customer.Common",
						},
						AutoReferenced = true,
					});

					// make sure there is at least 1 script in that folder. Otherwise; we'll get a warning from Unity saying it won't compile it.
					var originalText = File.ReadAllText(Path.Combine("Packages/com.beamable/Template", "AutoGenMicroserviceClientSample.cs"));
					WriteIfDifferent(GetAutoGeneratedSourceStartPath(), originalText);
				}
			}
			finally
			{
				AssetDatabase.StopAssetEditing();
			}
		}

		
		void WriteIfDifferent(string filePath, string text)
		{
			var originalText = "";
			if (File.Exists(filePath))
			{
				originalText = File.ReadAllText(filePath);
			}

			if (originalText == text)
				return;
			
			File.WriteAllText(filePath, text);
		}
	}
}
