//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beamable.Server.Clients
{
    using System;
    using Beamable.Platform.SDK;
    using Beamable.Server;
    
    
    /// <summary> A generated client for <see cref="Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchPreparationService"/> </summary
    public sealed class MatchPreparationServiceClient : MicroserviceClient
    {
        
        public MatchPreparationServiceClient(BeamContext context = null) : 
                base(context)
        {
        }
        
        /// <summary>
        /// Call the AcceptMatch method on the MatchPreparationService microservice
        /// <see cref="Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchPreparationService.AcceptMatch"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchAcceptance> AcceptMatch(string matchId)
        {
            string serialized_matchId = this.SerializeArgument<string>(matchId);
            string[] serializedFields = new string[] {
                    serialized_matchId};
            return this.Request<Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchAcceptance>("MatchPreparationService", "AcceptMatch", serializedFields);
        }
        
        /// <summary>
        /// Call the DeclineMatch method on the MatchPreparationService microservice
        /// <see cref="Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchPreparationService.DeclineMatch"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchAcceptance> DeclineMatch(string matchId)
        {
            string serialized_matchId = this.SerializeArgument<string>(matchId);
            string[] serializedFields = new string[] {
                    serialized_matchId};
            return this.Request<Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchAcceptance>("MatchPreparationService", "DeclineMatch", serializedFields);
        }
        
        /// <summary>
        /// Call the OnMatchMade method on the MatchPreparationService microservice
        /// <see cref="Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchPreparationService.OnMatchMade"/>
        /// </summary>
        public Beamable.Common.Promise<System.Threading.Tasks.Task> OnMatchMade(string matchId, string gameTypeId, long[] playerIds)
        {
            string serialized_matchId = this.SerializeArgument<string>(matchId);
            string serialized_gameTypeId = this.SerializeArgument<string>(gameTypeId);
            string serialized_playerIds = this.SerializeArgument<long[]>(playerIds);
            string[] serializedFields = new string[] {
                    serialized_matchId,
                    serialized_gameTypeId,
                    serialized_playerIds};
            return this.Request<System.Threading.Tasks.Task>("MatchPreparationService", "OnMatchMade", serializedFields);
        }
        
        /// <summary>
        /// Call the BanCharacter method on the MatchPreparationService microservice
        /// <see cref="Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchPreparationService.BanCharacter"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchDraft> BanCharacter(string matchId, int characterId)
        {
            string serialized_matchId = this.SerializeArgument<string>(matchId);
            string serialized_characterId = this.SerializeArgument<int>(characterId);
            string[] serializedFields = new string[] {
                    serialized_matchId,
                    serialized_characterId};
            return this.Request<Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchDraft>("MatchPreparationService", "BanCharacter", serializedFields);
        }
        
        /// <summary>
        /// Call the SelectCharacter method on the MatchPreparationService microservice
        /// <see cref="Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchPreparationService.SelectCharacter"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchDraft> SelectCharacter(string matchId, int characterId)
        {
            string serialized_matchId = this.SerializeArgument<string>(matchId);
            string serialized_characterId = this.SerializeArgument<int>(characterId);
            string[] serializedFields = new string[] {
                    serialized_matchId,
                    serialized_characterId};
            return this.Request<Beamable.EasyFeature.GameSpecificPlayerSystemArchitecture.MatchDraft>("MatchPreparationService", "SelectCharacter", serializedFields);
        }
    }
    
    internal sealed class MicroserviceParametersMatchPreparationServiceClient
    {
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_String : MicroserviceClientDataWrapper<string>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Array_System_Int64 : MicroserviceClientDataWrapper<long[]>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Int32 : MicroserviceClientDataWrapper<int>
        {
        }
    }
    
    [BeamContextSystemAttribute()]
    internal static class ExtensionsForMatchPreparationServiceClient
    {
        
        [Beamable.Common.Dependencies.RegisterBeamableDependenciesAttribute()]
        public static void RegisterService(Beamable.Common.Dependencies.IDependencyBuilder builder)
        {
            builder.AddScoped<MatchPreparationServiceClient>();
        }
        
        public static MatchPreparationServiceClient MatchPreparationService(this Beamable.Server.MicroserviceClients clients)
        {
            return clients.GetClient<MatchPreparationServiceClient>();
        }
    }
}
