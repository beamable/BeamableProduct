//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beamable.Server.Clients
{
    using System;
    using Beamable.Platform.SDK;
    using Beamable.Server;
    
    
    /// <summary> A generated client for <see cref="Beamable.Server.CacheDependentMS"/> </summary
    public sealed class CacheDependentMSClient : MicroserviceClient, Beamable.Common.IHaveServiceName
    {
        
        public CacheDependentMSClient(BeamContext context = null) : 
                base(context)
        {
        }
        
        public string ServiceName
        {
            get
            {
                return "CacheDependentMS";
            }
        }
        
        /// <summary>
        /// Call the GetCachedView method on the CacheDependentMS microservice
        /// <see cref="Beamable.Server.CacheDependentMS.GetCachedView"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Api.Leaderboards.LeaderBoardView> GetCachedView()
        {
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            return this.Request<Beamable.Common.Api.Leaderboards.LeaderBoardView>("CacheDependentMS", "GetCachedView", serializedFields);
        }
        
        /// <summary>
        /// Call the GetCachedView2 method on the CacheDependentMS microservice
        /// <see cref="Beamable.Server.CacheDependentMS.GetCachedView2"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Api.Leaderboards.LeaderBoardView> GetCachedView2(int testParameters)
        {
            object raw_testParameters = testParameters;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("testParameters", raw_testParameters);
            return this.Request<Beamable.Common.Api.Leaderboards.LeaderBoardView>("CacheDependentMS", "GetCachedView2", serializedFields);
        }
        
        /// <summary>
        /// Call the AsyncVoidTestMethod method on the CacheDependentMS microservice
        /// <see cref="Beamable.Server.CacheDependentMS.AsyncVoidTestMethod"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Unit> AsyncVoidTestMethod(int testParameters)
        {
            object raw_testParameters = testParameters;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("testParameters", raw_testParameters);
            return this.Request<Beamable.Common.Unit>("CacheDependentMS", "AsyncVoidTestMethod", serializedFields);
        }
        
        /// <summary>
        /// Call the TestUnsupportedParameters method on the CacheDependentMS microservice
        /// <see cref="Beamable.Server.CacheDependentMS.TestUnsupportedParameters"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Unit> TestUnsupportedParameters(System.Action testAction)
        {
            object raw_testAction = testAction;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("testAction", raw_testAction);
            return this.Request<Beamable.Common.Unit>("CacheDependentMS", "TestUnsupportedParameters", serializedFields);
        }
        
        /// <summary>
        /// Call the TestUnsupportedParameters2 method on the CacheDependentMS microservice
        /// <see cref="Beamable.Server.CacheDependentMS.TestUnsupportedParameters2"/>
        /// </summary>
        public Beamable.Common.Promise<Beamable.Common.Unit> TestUnsupportedParameters2(System.Threading.Tasks.Task testTask, Beamable.Common.Promise testPromise)
        {
            object raw_testTask = testTask;
            object raw_testPromise = testPromise;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("testTask", raw_testTask);
            serializedFields.Add("testPromise", raw_testPromise);
            return this.Request<Beamable.Common.Unit>("CacheDependentMS", "TestUnsupportedParameters2", serializedFields);
        }
    }
    
    internal sealed class MicroserviceParametersCacheDependentMSClient
    {
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Int32 : MicroserviceClientDataWrapper<int>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Action : MicroserviceClientDataWrapper<System.Action>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Threading_Tasks_Task : MicroserviceClientDataWrapper<System.Threading.Tasks.Task>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterBeamable_Common_Promise : MicroserviceClientDataWrapper<Beamable.Common.Promise>
        {
        }
    }
    
    [BeamContextSystemAttribute()]
    public static class ExtensionsForCacheDependentMSClient
    {
        
        [Beamable.Common.Dependencies.RegisterBeamableDependenciesAttribute()]
        public static void RegisterService(Beamable.Common.Dependencies.IDependencyBuilder builder)
        {
            builder.AddScoped<CacheDependentMSClient>();
        }
        
        public static CacheDependentMSClient CacheDependentMS(this Beamable.Server.MicroserviceClients clients)
        {
            return clients.GetClient<CacheDependentMSClient>();
        }
    }
}
