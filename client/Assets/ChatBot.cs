using Beamable;
using Beamable.Api.Autogenerated.Models;
using Beamable.Player;
using System.Collections.Generic;
using UnityEngine;
using Message = Beamable.Experimental.Api.Chat.Message;

public enum Players
{
	player1,
	player2
}

public class ChatBot : MonoBehaviour
{
	[SerializeField] private Players player;
	[SerializeField] private GameObject panel;

	private BeamContext _context;
	private List<PlayerMessageView> _messages;
	
	//  Unity Methods  --------------------------------
    protected void Start()
    {
        Debug.Log("Start()");
		_context = BeamContext.ForPlayer(player.ToString());
        SetupBeamable();
    }
    
    //  Methods  --------------------------------------
    private async void SetupBeamable()
    {
	    await _context.OnReady;

	    Debug.Log($"beamContext.UserId = {_context.PlayerId}");
    }

    public void CreateRoom()
    {
	    var roomName = "Super Room";
	    _context.Chat.CreateRoom(_context.PlayerId, roomName, new long[] {
		    _context.PlayerId
	    }, roomInfo =>
	    {
		    _context.Chat.OnMessageReceived += OnMessageCallback;
		    UpdateRoomInfo(roomInfo);
	    });
    }

    private void UpdateRoomInfo(RoomInfo roomInfo)
    {
	    //TODO
    }

    private void OnMessageCallback(Message message)
    {
	    var allMessages = _context.Chat.messages;
	    //TODO print every message received in the unity view
    }
}
