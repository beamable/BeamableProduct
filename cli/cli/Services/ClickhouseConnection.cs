using Beamable.Api.Autogenerated.Models;
using Beamable.Common.BeamCli.Contracts;
using ClickHouse.Client.ADO;
using Dapper;

namespace cli.Services;

public static class ClickhouseConnection
{

	public static string ConnectionString(
		string host,
		int port,
		string username,
		string password)
	{
		var builder = new ClickHouseConnectionStringBuilder
		{
			Host = host,
			Port = (ushort)port,
			Username = username,
			Password = password,
			Protocol = "https"
		};

		return builder.ConnectionString;
	}

	public static async Task<List<CliOtelLogRecord>> FetchLogs(OtelAuthConfig config)
	{
		string uriString = config.endpoint;
		if (!config.endpoint.StartsWith("http://", StringComparison.OrdinalIgnoreCase) &&
		    !config.endpoint.StartsWith("https://", StringComparison.OrdinalIgnoreCase))
		{
			uriString = "http://" + config.endpoint;
		}

		var uri = new Uri(uriString);

		var host = uri.Host;
		var port = uri.Port;

		var connectionString = ConnectionString(host, port, config.username, config.password);

		var result = await ExecuteQueryWithFilters(connectionString);

		return result;
	}

	private static string CalculateQueryWithFilters()
	{
		var daysFilter = string.Format(ClickhouseQueries.WITHIN_HOURS, 8);

		var queryFinal = string.Format(ClickhouseQueries.SELECT_TEMPLATE, daysFilter, 500);

		return queryFinal;
	}

	private static async Task<List<CliOtelLogRecord>> ExecuteQueryWithFilters(string connectionString)
	{
		await using var connection = new ClickHouseConnection(connectionString);
		var allRows = await connection.QueryAsync(CalculateQueryWithFilters());

		List<CliOtelLogRecord> result = new List<CliOtelLogRecord>();

		foreach (var row in allRows)
		{
			if (row != null)
			{
				result.Add(new CliOtelLogRecord()
				{
					Timestamp = row.Timestamp.ToString(),
					LogLevel = row.SeverityText,
					Body = row.Body
				});
			}

		}

		return result;
	}
}

[Serializable]
public record ClickHouseEndpoint
{
	public string Protocol { get; init; }
	public string Host { get; init; }
	public ushort Port { get; init; }
	public Uri Uri => new($"{Protocol}://{Host}:{Port}");
}
