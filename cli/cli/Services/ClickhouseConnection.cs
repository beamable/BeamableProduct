using Beamable.Api.Autogenerated.Models;
using ClickHouse.Client.ADO;
using Dapper;
using System.Data.Common;

namespace cli.Services;

public static class ClickhouseConnection
{

	public static string ConnectionString(
		string host,
		int port,
		string username,
		string password)
	{
		var builder = new ClickHouseConnectionStringBuilder
		{
			Host = host,
			Port = (ushort)port,
			Username = username,
			Password = password,
			Protocol = "http"
		};
		return builder.ConnectionString;
	}

	public static async Task<string> FetchLogs(OtelAuthConfig config)
	{
		string uriString = config.endpoint;
		if (!config.endpoint.StartsWith("http://", StringComparison.OrdinalIgnoreCase) &&
		    !config.endpoint.StartsWith("https://", StringComparison.OrdinalIgnoreCase))
		{
			uriString = "http://" + config.endpoint;
		}

		var uri = new Uri(uriString);

		var host = uri.Host;
		var port = uri.Port;

		var connectionString = ConnectionString(host, port, config.username, config.password);

		await using var connection = new ClickHouseConnection(connectionString);
		var a = await connection.QueryAsync($"SELECT *, Cid, Pid FROM otel_logs ORDER BY otel_logs.Timestamp DESC");
		//var req = await ExecuteSqlQuery(connection, $"SELECT * FROM default.otel_logs");
		// connection.ExecuteAsync()
		// logger.LogDebug(info, "Created role: {RoleName}", role);

		return "";
	}

	public static async Task<DbDataReader?> ExecuteSqlQuery(ClickHouseConnection connection, string query)
	{
		var command = connection.CreateCommand();
		command.CommandText = query;
		Console.WriteLine($"Executing QUERY: [{command.CommandText}]");

		try
		{
			return await command.ExecuteReaderAsync();
		}
		catch (Exception e)
		{
			Console.WriteLine($"Error while executing query [{query}]. Message: [{e.Message}]. Stacktrace: [{e.StackTrace}]");
			return null;
		}
	}
}

[Serializable]
public record ClickHouseEndpoint
{
	public string Protocol { get; init; }
	public string Host { get; init; }
	public ushort Port { get; init; }
	public Uri Uri => new($"{Protocol}://{Host}:{Port}");
}
