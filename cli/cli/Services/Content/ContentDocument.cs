using Beamable.Api.Autogenerated.Models;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json;

namespace cli.Services.Content;

public class ContentDocument
{
	public string id { get; set; }
	public string version { get; set; }
	public JsonElement? properties { get; set; }

	public string CalculateChecksum()
	{
		using var sha1 = SHA1.Create();
		string json = JsonSerializer.Serialize(properties, new JsonSerializerOptions { WriteIndented = false });
		var bytes = Encoding.ASCII.GetBytes(json);
		var hash = sha1.ComputeHash(bytes);
		var checksum = BitConverter.ToString(hash).Replace("-", string.Empty).ToLowerInvariant();
		return checksum;
	}

	public static ContentDocument? AtPath(string path)
	{
		if (!File.Exists(path))
		{
			return null;
		}

		var fileContent = File.ReadAllText(path);
		var id = Path.GetFileName(path).Replace(".json", string.Empty);
		var properties = JsonSerializer.Deserialize<JsonElement>(fileContent);
		var content = new ContentDocument
		{
			id = id,
			version = string.Empty,
			properties = properties
		};
		return content;
	}
}
