using System.CommandLine;
using Beamable.Api.Autogenerated.Content;
using Beamable.Api.Autogenerated.Models;
using Beamable.Server;

namespace cli.Content;

public class ContentArchiveManifestCommandArgs : CommandArgs
{
    public string manifestId;
    public bool unarchive;
}

public class ContentArchiveManifestCommandResult
{
    
}
public class ContentArchiveManifestCommand : AtomicCommand<ContentArchiveManifestCommandArgs, ContentArchiveManifestCommandResult>
{
    public ContentArchiveManifestCommand() : base("archive-manifest", "Archive an existing content manifest")
    {
    }

    public override void Configure()
    {
        AddArgument(new Argument<string>("manifest-id", "The manifest id to archive"),
            (args, i) => args.manifestId = i);
        AddOption(new Option<bool>("--unarchive", "When true, restore an archived manifest"),
            (args, i) => args.unarchive = i);
    }

    public override async Task<ContentArchiveManifestCommandResult> GetResult(ContentArchiveManifestCommandArgs args)
    {
        var api = args.Provider.GetService<IContentApi>();

        var req = new ArchiveOrUnarchiveManifestsRequest
        {
            manifestIds = new string[] { args.manifestId }
        };
        if (args.unarchive)
        {
            await api.PostManifestsUnarchive(req);
        }
        else
        {
            await api.PostManifestsArchive(req);
        }
        
        return new ContentArchiveManifestCommandResult();
    }
}