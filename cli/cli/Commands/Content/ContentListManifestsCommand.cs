using System.CommandLine;
using Beamable.Api.Autogenerated.Content;
using Beamable.Server;

namespace cli.Content;

public class ContentListManifestsCommandArgs : CommandArgs
{
    public bool includeArchived;
}

public class ContentListManifestsCommandResults
{
    public List<string> localManifests;
    public List<string> remoteManifests;
    public List<string> archivedManifests;
}
public class ContentListManifestsCommand : AtomicCommand<ContentListManifestsCommandArgs, ContentListManifestsCommandResults>
{
    public ContentListManifestsCommand() : base("list-manifests", "List all local and remote content manifest ids")
    {
    }

    public override void Configure()
    {
        AddOption(
            new Option<bool>(new string[] { "--include-archived", "-a" },
                "Include content manifest ids that have been archive"), (args, i) => args.includeArchived = i);
    }

    public override async Task<ContentListManifestsCommandResults> GetResult(ContentListManifestsCommandArgs args)
    {
        var api = args.Provider.GetService<IContentApi>();
        var remoteManifests = await api.GetManifestChecksums();
        var contentService = args.DependencyProvider.GetService<ContentService>();
        var localManifests = contentService.GetCurrentLocalContentManifests();
        
        
        
        
        return new ContentListManifestsCommandResults
        {
            localManifests = localManifests.Where(m =>
            {
                if (args.includeArchived) return true;
                var existingRemote = remoteManifests.manifests.FirstOrDefault(r => r.id == m);
                if (existingRemote?.archived)
                {
                    // if the remote version has been archived, then don't show the manifest anymore.
                    return false;
                }

                return true;
            }).ToList(),
            remoteManifests = remoteManifests.manifests
                .Where(m => args.includeArchived || !m.archived)
                .Select(m => m.id).ToList(),
            archivedManifests = remoteManifests.manifests
                .Where(m => m.archived)
                .Select( m => m.id).ToList()
        };
    }
}