using Beamable.Api.Autogenerated.Realms;
using Beamable.Server;

namespace cli;

public class ConfigRoutesCommandArgs : CommandArgs
{
    
}

public class ConfigRoutesCommandResults
{
    public string env;
    public string microserviceUri;
    public string registryUri;
    public string apiUri;
    public string portalUri;
    public string storageBrowserUri;
    public ConfigRoutesCommandWebsocketResult socketConfig;
}

public class ConfigRoutesCommandWebsocketResult
{
    public string uri;
    public string provider;
}

public class ConfigRoutesCommand : AtomicCommand<ConfigRoutesCommandArgs, ConfigRoutesCommandResults>, ISkipManifest
{
    public ConfigRoutesCommand() : base("routes", "List the various service routes for your Beamable host")
    {
    }

    public override void Configure()
    {
    }

    public override async Task<ConfigRoutesCommandResults> GetResult(ConfigRoutesCommandArgs args)
    {
        var api = args.Provider.GetService<IRealmsApi>();
        var defaults = await api.GetClientDefaults(false);

        return new ConfigRoutesCommandResults
        {
            env = defaults.environment,
            apiUri = args.AppContext.Host,
            microserviceUri = defaults.microserviceURI,
            registryUri = defaults.microserviceEcrURI,
            portalUri = defaults.portalURI,
            storageBrowserUri = defaults.storageBrowserURI,
            socketConfig = new ConfigRoutesCommandWebsocketResult
            {
                uri = defaults.websocketConfig.uri,
                provider = defaults.websocketConfig.provider
            }
        };
    }
}