using Beamable.Api.Autogenerated.Accounts;
using Beamable.Api.Autogenerated.Auth;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using cli.TokenCommands;
using Serilog;
using System.CommandLine;
using System.CommandLine.Invocation;

namespace cli.PlayerCommands;

public class PlayerCommandArgs : CommandArgs
{
	public long playerId;
	public string token;
}

public class PlayerCommand : AtomicCommand<PlayerCommandArgs, Account>
{
	
	public static async Promise<long> ResolvePlayerId(CommandArgs args, long playerId, string token)
	{
		var hasId = playerId != 0;
		var hasToken = !string.IsNullOrEmpty(token);
		if (hasId && hasToken)
		{
			throw new CliException("Cannot specify both --player-id and --token");
		}

		if (hasId)
		{
			return playerId;
		}

		if (hasToken)
		{
			// TODO: resolve id
			var (res, _) = await GetTokenDetailsCommand.ResolveToken(args, true, token);
			return res.gamerTag;
		}

		var user = await args.AuthApi.GetUser();
		return user.id;
	}
	
	public static void AddPlayerSpecifierArgs<TArgs>(AppCommand<TArgs> command, Action<TArgs, long, string> binder)
		where TArgs : CommandArgs
	{
		var idOpt = new Option<long>("--player-id", "the playerId (gamerTag)");
		idOpt.AddAlias("-i");
		idOpt.AddAlias("-gt");

		command.AddOption(idOpt);

		var tokenOpt = new Option<string>("--token",
			"the token for a player. Cannot be specified when --player-id is set.");
		tokenOpt.AddAlias("-t");

		command.AddOption(tokenOpt, (args, ctx, token) =>
		{
			var playerId = ctx.ParseResult.GetValueForOption(idOpt);
			var hasId = playerId != 0;
			var hasToken = !string.IsNullOrEmpty(token);
			if (hasId && hasToken)
			{
				throw new CliException("Cannot specify both --player-id and --token");
			}

			binder(args, playerId, token);
		});
	}
	
	
	public PlayerCommand() : base("player", "get information about a player")
	{
	}

	public override void Configure()
	{
		AddPlayerSpecifierArgs(this, (args, id, token) =>
		{
			args.playerId = id;
			args.token = token;
		});
	}

	public override async Task<Account> GetResult(PlayerCommandArgs args)
	{
		var playerId = await ResolvePlayerId(args, args.playerId, args.token);

		var api = new AccountsApi(args.Requester);
		var account = await api.GetFind(playerId.ToString()).RecoverFrom404(_ => 
			throw new CliException("No account exists in this realm."));

		return account;
	}
}
