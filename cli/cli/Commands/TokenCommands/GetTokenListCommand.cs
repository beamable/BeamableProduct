using Beamable.Api.Autogenerated.Accounts;
using Beamable.Api.Autogenerated.Auth;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common.Content;
using Beamable.Server;
using System.CommandLine;

namespace cli.TokenCommands;

public class GetTokenListCommandArgs : CommandArgs
{
	public long playerOrAccountId;

	public int page;
	public int pageSize;

	public long cid;
	public string pid;
}

public class GetTokenListCommandOutput
{
	public int itemCount;
	public List<GetTokenListElement> items = new List<GetTokenListElement>();
}

public class GetTokenListElement
{
	public string created;
	public string device;
	public string platform;
	public string token;
}

public class GetTokenListCommand : AtomicCommand<GetTokenListCommandArgs, GetTokenListCommandOutput>, ISkipManifest
{
	public GetTokenListCommand() : base("list", "List tokens for a player or account")
	{
	}

	public override void Configure()
	{
		var idOpt = new Option<long>("--id",
			"The player or account id to fetch tokens for. When blank, the current player id will be used");
		idOpt.AddAlias("-i");
		idOpt.AddAlias("--player-id");
		idOpt.AddAlias("--account-id");
		AddOption(idOpt, (args, l) => args.playerOrAccountId = l);

		AddOption(new Option<int>("--offset", "The offset"), ((args, i) => args.page = i), new string[] { "-o" });
		AddOption(new Option<int>("--length", "The max size of the response"), ((args, i) => args.pageSize = i), new string[] { "-l" });

		AddOption(new Option<long>("--cid", "A cid"), (args, i) =>
		{
			args.cid = new Optional<long>();
			if (i != default)
			{
				args.cid = i;
			}
		}, new string[] { "-c" });
		
		
		AddOption(new Option<string>("--pid", "A pid"), (args, i) =>
		{
			args.pid = new Optional<string>();
			if (!string.IsNullOrEmpty(i))
			{
				args.pid = i;
			}
		}, new string[] { "-p" });
	}

	public override async Task<GetTokenListCommandOutput> GetResult(GetTokenListCommandArgs args)
	{
		var id = args.playerOrAccountId;
		if (id == default)
		{
			var accountApi = args.Provider.GetService<IAccountsApi>();
			var self = await accountApi.GetMe(true);
			id = self.id;
		}
		
		var api = args.Provider.GetService<IAuthApi>();

		ListTokenResponse list = await api.GetTokenList(id, args.page, args.pageSize, args.cid, args.pid);
		
		return new GetTokenListCommandOutput {
			itemCount = list.items.Length,
			items = list.items.Select(x => new GetTokenListElement
		{
			platform = x.platform,
			created = x.created,
			device = x.device,
			token = x.token
		}).ToList() };
	}
}
