using Beamable.Api.Autogenerated.Auth;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common.Content;
using Beamable.Server;
using System.CommandLine;

namespace cli.TokenCommands;

public class GetTokenForGuestCommandArgs : CommandArgs
{
	public Dictionary<string, string> initProperties = new Dictionary<string, string>();
}

public class GetTokenForGuestCommandOutput
{
	public string accessToken;
	public string challengeToken;
	public long expiresIn;
	public string refreshToken;
	public string[] scopes;
	public string tokenType;
}
public class GetTokenForGuestCommand : AtomicCommand<GetTokenForGuestCommandArgs, GetTokenForGuestCommandOutput>
{
	public GetTokenForGuestCommand() : base("new-guest", "Create a new guest token")
	{
	}

	public override void Configure()
	{
		
		var keyOption = new Option<List<string>>("--key", "The keys for initProperties. The count must match the count of the --value options");
		keyOption.AddAlias("-k");
		keyOption.AllowMultipleArgumentsPerToken = true;
		keyOption.Arity = ArgumentArity.OneOrMore;
		
		var valueOption = new Option<List<string>>("--value", "The values for the initProperties. The count must match the count of the --key options");
		valueOption.AddAlias("-v");
		valueOption.AllowMultipleArgumentsPerToken = true;
		valueOption.Arity = ArgumentArity.OneOrMore;
		
		AddOption(keyOption, (args, i) =>
		{
			// do nothing; the binding happens in the value callback
		});
		AddOption(valueOption, (args, binder, values) =>
		{
			
			var keys = binder.ParseResult.GetValueForOption(keyOption);

			if (keys.Count != values.Count)
			{
				throw new CliException("The --key count must match the --value count");
			}

			for (var i = 0; i < values.Count; i++)
			{
				args.initProperties[keys[i]] = values[i];
			}
		});

	}

	public override async Task<GetTokenForGuestCommandOutput> GetResult(GetTokenForGuestCommandArgs args)
	{
		var api = args.Provider.GetService<IAuthApi>();
		var req = new TokenRequestWrapper { grant_type = "guest" };
		if (args.initProperties?.Count > 0)
		{
			req.initProperties = new OptionalMapOfString(args.initProperties);
		}
		
		TokenResponse res = await api.PostToken(req, includeAuthHeader: false);
		return new GetTokenForGuestCommandOutput
		{
			scopes = res.scopes,
			refreshToken = res.refresh_token,
			accessToken = res.access_token,
			challengeToken = res.challenge_token,
			expiresIn = res.expires_in,
			tokenType = res.token_type
		};
	}
}
