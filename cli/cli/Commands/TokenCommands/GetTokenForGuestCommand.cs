using Beamable.Api.Autogenerated.Auth;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common.Content;
using Beamable.Server;
namespace cli.TokenCommands;

public class GetTokenForGuestCommandArgs : CommandArgs
{

}

public class GetTokenForGuestCommandOutput
{
	public string accessToken;
	public string challengeToken;
	public long expiresIn;
	public string refreshToken;
	public string[] scopes;
	public string tokenType;
}
public class GetTokenForGuestCommand : AtomicCommand<GetTokenForGuestCommandArgs, GetTokenForGuestCommandOutput>
{
	public GetTokenForGuestCommand() : base("new-guest", "Create a new guest token")
	{
	}

	public override void Configure()
	{
	}

	public override async Task<GetTokenForGuestCommandOutput> GetResult(GetTokenForGuestCommandArgs args)
	{
		var api = args.Provider.GetService<IAuthApi>();
		TokenResponse res = await api.PostToken(
			gsReq: new TokenRequestWrapper { grant_type = "guest" },
			includeAuthHeader: false);

		return new GetTokenForGuestCommandOutput
		{
			scopes = res.scopes,
			refreshToken = res.refresh_token,
			accessToken = res.access_token,
			challengeToken = res.challenge_token,
			expiresIn = res.expires_in,
			tokenType = res.token_type
		};
	}
}
