using Beamable.Api.Autogenerated.Accounts;
using Beamable.Api.Autogenerated.Realms;
using Beamable.Common.BeamCli;
using Beamable.Server;
using cli.Utils;

namespace cli;

public class RealmsListCommandArgs : CommandArgs
{
	public bool IncludeArchived;
}

[CliContractType]
public class RealmsListCommandOutput
{
	public string CustomerAlias;
	public string Cid;

	public OrgRealmData[] VisibleRealms;
}

[CliContractType]
public struct OrgRealmData
{
	public string Cid;
	public string Pid;
	public string ParentPid;

	public string ProjectName;
	
	public string RealmName;
	public string RealmSecret;

	public bool IsDev;
	public bool IsStaging;
	public bool IsProduction;
}

public class RealmListCommand : AtomicCommand<RealmsListCommandArgs, RealmsListCommandOutput>, ISkipManifest
{
	public static ConfigurableOptionFlag IncludeArchived = new ConfigurableOptionFlag("include-archived", "Includes archived realms in the list of realms returned");
	public override int Order => 200;
	public RealmListCommand() : base("realms", "Fetch the current list of realms") { }

	public override void Configure()
	{
		AddOption(IncludeArchived, (args, b) => args.IncludeArchived = b);
	}

	protected override RealmsListCommandOutput GetHelpInstance()
	{
		return new RealmsListCommandOutput
		{
			VisibleRealms = new OrgRealmData[1]
			{
				new()
				{
					Cid = "11111111111", Pid = "DE_1111111111", RealmName = "Some Realm", RealmSecret = "Some Realm Secret",
				}
			}
		};
	}

	public override async Task<RealmsListCommandOutput> GetResult(RealmsListCommandArgs args)
	{
		try
		{
			var customer = await args.Provider.GetService<IRealmsApi>().GetCustomer();
			var game = await args.Provider.GetService<IRealmsApi>().GetGame(args.AppContext.Pid);
			var orgRealmData = game.projects.Where(r => args.IncludeArchived || !r.archived).Select(r =>
			{
				var rd = new OrgRealmData();
				rd.Cid = args.AppContext.Cid;
				rd.Pid = r.pid;
				rd.RealmName = r.projectName;
				rd.RealmSecret = r.secret.GetOrElse("");
				rd.ParentPid = r.parent.GetOrElse("");

				var parentRealm = r.parent.GetOrElse("");
				rd.IsProduction = string.IsNullOrEmpty(parentRealm);
				var projectName = rd.IsProduction ? r.projectName : "";

				// We count how many parents this realm has --- 1 means its the staging realm; two means it's a dev realm.
				var parentCount = 0;
				while (!string.IsNullOrEmpty(parentRealm))
				{
					parentCount += 1;
					var p = game.projects.First(p => p.pid == parentRealm);
					parentRealm = p.parent.GetOrElse("");

					projectName = string.IsNullOrEmpty(parentRealm) ? p.projectName : "";
				}

				rd.IsStaging = parentCount == 1;
				rd.IsDev = parentCount > 1;
				rd.ProjectName = projectName;
				return rd;
			}).ToArray();

			// Get the token and fill it out args.AppContext.Token.
			return new RealmsListCommandOutput() { CustomerAlias = customer.customer.alias.GetOrElse(""), Cid = customer.customer.cid.ToString(), VisibleRealms = orgRealmData, };
		}
		catch (Exception e)
		{
			throw new CliException($"Failed to get realm data due to error: {e.Message}");
		}
	}
}
