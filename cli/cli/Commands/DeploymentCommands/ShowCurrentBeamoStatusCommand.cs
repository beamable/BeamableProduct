using Beamable.Api.Autogenerated.Beamo;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Common.Api;
using ServiceStatusModel = Beamable.Api.Autogenerated.Models.ServiceStatus;
namespace cli.DeploymentCommands;


public class ShowCurrentBeamoStatusCommandArgs : CommandArgs
{
	public bool showArchived;
}

public class ShowCurrentBeamoStatusCommandOutput
{
	public GetStatusResponse status;
}

public class ShowCurrentBeamoStatusCommand : AtomicCommand<ShowCurrentBeamoStatusCommandArgs, ShowCurrentBeamoStatusCommandOutput>
{
	public ShowCurrentBeamoStatusCommand() : base("status", "show the current deployment status")
	{
		AddAlias("ps");
	}

	public override void Configure()
	{
		DeployArgs.AddArchivedOption(this, (args, i) => args.showArchived = i);
	}

	public override async Task<ShowCurrentBeamoStatusCommandOutput> GetResult(ShowCurrentBeamoStatusCommandArgs args)
	{
		var api = args.DependencyProvider.GetService<IBeamoApi>();
		try
		{
			var currentTask = api.GetManifestCurrent(archived: false);

			Promise<GetCurrentManifestResponse> currentArchivedTask=null;
			if (args.showArchived)
			{
				currentArchivedTask = api.GetManifestCurrent(archived: true);
			}
			var status = await api.GetStatus();
			var current = await currentTask;
			if (currentArchivedTask != null)
			{
				var currentArchived = await currentArchivedTask;
				var mock = current.manifest.manifest.ToList();
				mock.AddRange(currentArchived.manifest.manifest);

				current.manifest.manifest = mock.ToArray();
			}

			var finalServices = new List<ServiceStatusModel>(status.services.Length);
			foreach (var service in status.services)
			{
				var currentService = current.manifest.manifest.FirstOrDefault(x => x.serviceName == service.serviceName);
				if (currentService == null)
					continue;
				finalServices.Add(service);
			}

			status.services = finalServices.ToArray();
			
			return new ShowCurrentBeamoStatusCommandOutput { status = status };
		}
		catch (RequesterException ex) when (ex.Status == 404)
		{
			return new ShowCurrentBeamoStatusCommandOutput { status = new GetStatusResponse
			{
				// there is nothing, but that is "correct"
				isCurrent = true
			} };
		}
	}
}
