using Beamable.Api.Autogenerated.Beamo;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common.Content;
using System.CommandLine;

namespace cli.DeploymentCommands;

public class GetDeploymentCommandArgs : CommandArgs
{
	public OptionalBool showArchived;
	public string manifestIdFilter;
	public string toFile;
}

public class GetDeploymentCommandOutput
{
	public ManifestView manifestView;
}

public class GetDeploymentCommand : AtomicCommand<GetDeploymentCommandArgs, GetDeploymentCommandOutput>
{
	public GetDeploymentCommand() : base("get", "Get a specific deployment")
	{
	}

	public override void Configure()
	{
		DeployArgs.AddArchivedOption(this, (args, i) => args.showArchived = i);
		AddOption(new Option<string>(new string[] { "--to-file", "--out", "-o" }, "A file path to save the plan"),
			(args, i) => args.toFile = i);
		AddOption(
			new Option<string>(new string[] { "--id", "-i" },
				"Find only the single manifest that matches the given id"), (args, i) => args.manifestIdFilter = i);
	}

	public override async Task<GetDeploymentCommandOutput> GetResult(GetDeploymentCommandArgs args)
	{
		var api = args.DependencyProvider.GetService<IBeamoApi>();

		var isIdFilterBlank = string.IsNullOrEmpty(args.manifestIdFilter);
		ManifestView manifest = null;
		if (isIdFilterBlank)
		{
			var manifestResponse = await api.GetManifestCurrent(args.showArchived);
			manifest = manifestResponse.manifest;
		}
		else
		{
			var manifestResponse = await api.GetManifest(args.manifestIdFilter, args.showArchived);
			manifest = manifestResponse.manifest;
		}

		await DeployArgs.MaybeSaveToFile(args.toFile, manifest);

		return new GetDeploymentCommandOutput
		{
			manifestView = manifest
		};

	}
}
