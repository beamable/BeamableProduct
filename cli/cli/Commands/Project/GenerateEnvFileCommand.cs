using Beamable.Api.Autogenerated.Realms;
using cli.Utils;
using JetBrains.Annotations;
using Microsoft.Extensions.DependencyInjection;
using System.CommandLine;
using System.Net.NetworkInformation;

namespace cli.Dotnet;

public class GenerateEnvFileCommandArgs : CommandArgs
{
	public string output;
	public bool includePrefix = true;
}

public class GenerateEnvFileCommand : AppCommand<GenerateEnvFileCommandArgs>
{
	public GenerateEnvFileCommand() : base("generate-env", "Generate an .env file at a given location for a Microservice execution")
	{
	}

	public override void Configure()
	{
		AddArgument(new Argument<string>("output", "Where to output the .env file"), (args, i) => args.output = i);
		AddOption(new Option<bool>("--include-prefix", () => true, "if true, the generated .env file will include the local machine name as prefix"), (args, i) => args.includePrefix = i);
	}

	public override async Task Handle(GenerateEnvFileCommandArgs args)
	{
		var realmsApi = args.Provider.GetService<IRealmsApi>();
		var res = await realmsApi.GetAdminCustomer();
		var proj = res.customer.projects.FirstOrDefault(p => p.name == args.AppContext.Pid);

		var secret = proj.secret;
		var cid = args.AppContext.Cid;
		var pid = args.AppContext.Pid;
		var prefix = args.includePrefix ? MachineHelper.GetUniqueDeviceId() : "";
		var host = args.AppContext.Host.Replace("http", "ws") + "/socket";

		var fileContent = @$"SECRET={secret}
HOST={host}
CID={cid}
PID={pid}
NAME_PREFIX={prefix}
BEAM_INSTANCE_COUNT=1
";

		var path = Path.Combine(args.output, ".env");
		Directory.CreateDirectory(args.output);
		File.WriteAllText(path, fileContent);
	}


}
