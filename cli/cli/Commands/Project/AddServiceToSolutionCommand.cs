using Beamable.Common.Semantics;
using Serilog;
using Spectre.Console;
using System.CommandLine;

namespace cli.Dotnet;

public class AddServiceToSolutionCommandArgs : CommandArgs
{
	public ServiceName ProjectName;
	public ServiceName SolutionName;
	public bool SkipCommon;
}

public class AddServiceToSolutionCommand : AppCommand<AddServiceToSolutionCommandArgs>
{
	private readonly AddUnityClientOutputCommand _addUnityCommand;
	private readonly AddUnrealClientOutputCommand _addUnrealCommand;

	public AddServiceToSolutionCommand(AddUnityClientOutputCommand addUnityCommand,
		AddUnrealClientOutputCommand addUnrealCommand) : base("add",
		"Add new project to an existing solution in current working directory")
	{
		_addUnityCommand = addUnityCommand;
		_addUnrealCommand = addUnrealCommand;
	}

	public override void Configure()
	{
		AddArgument(new Argument<ServiceName>("name", "Name of the new project"), (args, i) => args.ProjectName = i);
		AddArgument(new Argument<ServiceName>("solution-name", "The name of the solution of the new project"), (args, i) => args.SolutionName = i);
		AddOption(new ConfigurableOptionFlag("skip-common", "If you should create a common library"), (args, i) => args.SkipCommon = i);
	}

	public override async Task Handle(AddServiceToSolutionCommandArgs args)
	{
				string directory = args.ProjectName;
		
		// in the current directory, create a project using dotnet. 
		(string solutionPath, string projectPath) = await args.ProjectService.AddToSolution(args.SolutionName, args.ProjectName,!args.SkipCommon);

		// Find path to service folders
		var projectDirectory = Path.GetRelativePath(args.ConfigService.BaseDirectory,
			Directory.EnumerateDirectories(args.ConfigService.BaseDirectory, $"{args.ProjectName}\\services",
				SearchOption.AllDirectories).First());

		var sd = await args.BeamoLocalSystem.AddDefinition_HttpMicroservice(args.ProjectName.Value.ToLower(),
			projectPath,
			Path.Combine(args.ProjectName, "Dockerfile"),
			new string[] { },
			CancellationToken.None);

		if (!args.SkipCommon)
		{
			var commonProjectName = $"{args.ProjectName}Common";
			// var solutionPath = Path.Combine(args.ConfigService.WorkingDirectory, args.Directory);
			// var rootServicesPath = Path.Combine(solutionPath, "services");
			// var commonProjectPath = Path.Combine(rootServicesPath, commonProjectName);

			var service = args.BeamoLocalSystem.BeamoManifest.HttpMicroserviceLocalProtocols[sd.BeamoId];
			var dockerfilePath = service.RelativeDockerfilePath;
			Log.Information("Docker file path is {DockerfilePath}", dockerfilePath);
			var serviceFolder = Path.GetDirectoryName(dockerfilePath);
			Log.Information("Docker file folder is {DockerFileFolder}", serviceFolder);

			dockerfilePath = Path.Combine(service.DockerBuildContextPath, dockerfilePath);
			var dockerfileText = await File.ReadAllTextAsync(dockerfilePath);

			const string search =
				"# <BEAM-CLI-INSERT-FLAG:COPY_COMMON> do not delete this line. It is used by the beam CLI to insert custom actions";
			var replacement = @$"WORKDIR /subsrc/{commonProjectName}
COPY {commonProjectName}/. .
{search}";
			dockerfileText = dockerfileText.Replace(search, replacement);
			await File.WriteAllTextAsync(dockerfilePath, dockerfileText);
		}

		args.BeamoLocalSystem.SaveBeamoLocalManifest();
		args.BeamoLocalSystem.SaveBeamoLocalRuntime();

		// ask if we should link a Unity project
		var addUnityProject = AnsiConsole.Confirm(
			"Would you like to link a Unity project? A linked Unity project will receive autogenerated client updates.",
			true);
		if (addUnityProject)
		{
			await _addUnityCommand.Handle(new AddUnityClientOutputCommandArgs { path = ".", Provider = args.Provider });
		}

		// ask if we should link a Unreal project
		var addUnrealProject = AnsiConsole.Confirm(
			"Would you like to link an Unreal project? A linked Unreal project will receive autogenerated client updates.",
			true);
		if (addUnrealProject)
		{
			await _addUnrealCommand.Handle(
				new AddUnrealClientOutputCommandArgs() { path = ".", Provider = args.Provider });
		}
	}
}
