using Beamable.Common;
using System.CommandLine;
using System.Reflection;
using System.Runtime.Loader;

namespace cli.Dotnet;

public class ShareCodeCommandArgs : CommandArgs
{
	public string dllPath;

}
public class ShareCodeCommand : AppCommand<ShareCodeCommandArgs>
{
	public ShareCodeCommand() : base("share-code", "Given a dll, copy the dll to the associated unity projects")
	{
	}

	public override void Configure()
	{
		AddArgument(new Argument<string>("source", "The .dll filepath for the built code"), (arg, i) => arg.dllPath = i);
	}

	public override Task Handle(ShareCodeCommandArgs args)
	{
		var absolutePath = Path.GetFullPath(args.dllPath);
		var fileName = Path.GetFileName(absolutePath);

		var absoluteDir = Path.GetDirectoryName(absolutePath);

		var dlls = Directory.GetFiles(absoluteDir, "*.dll");



		// take the dll, and copy it into Unity...
		var linkedUnityProjects = args.ProjectService.GetLinkedUnityProjects();
		foreach (var unityProjectPath in linkedUnityProjects)
		{
			var unityAssetPath = Path.Combine(args.ConfigService.BaseDirectory, unityProjectPath, "Assets");
			if (!Directory.Exists(unityAssetPath))
			{
				BeamableLogger.LogError($"Could not copy shared project [{fileName}] because linked unity project because directory doesn't exist [{unityAssetPath}]");
				continue;
			}

			var outputDirectory = Path.Combine(unityAssetPath, "Beamable", "Autogenerated", "CommonDlls");
			Directory.CreateDirectory(outputDirectory);
			for (var i = 0; i < dlls.Length; i++)
			{

				var dllPath = dlls[i];
				var dllName = Path.GetFileName(dllPath);
				if (dllName.StartsWith("System")) continue;

				var outputPath = Path.GetRelativePath(absoluteDir, dllPath);
				outputPath = Path.Combine(outputDirectory, outputPath);

				File.Copy(absolutePath, outputPath, true);
			}
		}

		return Task.CompletedTask;
	}
}
