using Beamable.Common;
using cli.Services;
using CliWrap;
using Serilog;
using Spectre.Console;
using System.CommandLine;
using UnityEngine;

namespace cli.Dotnet;

public class NewSolutionCommandArgs : CommandArgs
{
	public string name;
	public string directory;
}

public class NewSolutionCommand : AppCommand<NewSolutionCommandArgs>
{
	private readonly InitCommand _initCommand;
	private readonly AddUnityClientOutputCommand _addUnityCommand;

	public NewSolutionCommand(InitCommand initCommand, AddUnityClientOutputCommand addUnityCommand) : base("new", "Start a brand new beamable solution using dotnet")
	{
		_initCommand = initCommand;
		_addUnityCommand = addUnityCommand;
	}

	public override void Configure()
	{
		AddArgument(new Argument<string>("name", "Name of the new project"), (args, i) => args.name = i);
		AddArgument(new Argument<string>("output", () => "", description: "Where the project be created"), (args, i) => args.directory = i);
	}

	public override async Task Handle(NewSolutionCommandArgs args)
	{
		// in the current directory, create a project using dotnet. 
		var path = await args.ProjectService.CreateNewSolution(args.directory, args.name, args.name);

		// initialize a beamable project in that directory...
		args.ConfigService.SetTempWorkingDir(path);
		
		
		await _initCommand.Handle(new InitCommandArgs
		{
			Provider = args.Provider,
			saveToFile = true
		});
		
		// now that a .beamable folder has been created, setup the beamo manifest
		await args.BeamoLocalSystem.AddDefinition_HttpMicroservice(args.name.ToLower(),
			"services",
			Path.Combine(args.name, "Dockerfile"),
			new string[]{},
			CancellationToken.None);
		
		args.BeamoLocalSystem.SaveBeamoLocalManifest();
		args.BeamoLocalSystem.SaveBeamoLocalRuntime();
		
		// ask if we should link a Unity project
		var addUnityProject = AnsiConsole.Confirm(
			"Would you like to link a Unity project? A linked Unity project will receive autogenerated client updates.", true);
		if (addUnityProject)
		{
			await _addUnityCommand.Handle(new AddUnityClientOutputCommandArgs { path = ".", Provider = args.Provider});
		}
		
	}
}
