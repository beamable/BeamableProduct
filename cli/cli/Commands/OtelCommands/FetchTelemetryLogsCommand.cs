using Beamable.Api.Autogenerated.Models;
using Beamable.Common.BeamCli.Contracts;
using cli.Services;
using System.CommandLine;

namespace cli.OtelCommands;

[Serializable]
public class FetchTelemetryLogsCommandArgs : CommandArgs
{
	public string ServiceName; // --service-name, does a full match with the service name
	public string LogLevel; // --log-level, does a full match with the log level
	public int LimitRows; // --limit-rows, limits the amount of rows fetched
	public string BodyMatch; // --body, string value to be matched with the log body message
	public bool FullMatch; // --full-match, partial match by default
	public string FromTime; // --from
	public bool AscendingOrder;
}

public class FetchTelemetryLogsResult
{
	public List<CliOtelLogRecord> allLogsFound;
}

public class FetchTelemetryLogsCommand : AtomicCommand<FetchTelemetryLogsCommandArgs, FetchTelemetryLogsResult>
{
	public FetchTelemetryLogsCommand() : base("logs", "Fetch logs from Clickhouse")
	{
	}

	public override void Configure()
	{
		AddOption(new Option<string>("--service-name", "Filter logs by doing a full match with the service name"),
			(args, i) => args.ServiceName = i);
		AddOption(new Option<string>("--log-level", "Filter logs by doing a full match with the Log Level. Available values are: [\"Trace\", \"Debug\", \"Information\", \"Warning\", \"Error\", \"Critical\", \"None\"]"),
			(args, i) => args.LogLevel = i);
		AddOption(new Option<int>("--limit-rows", () => 100, "Sets a max number of rows to be retrieved by this command"),
			(args, i) => args.LimitRows = i);
		AddOption(new Option<string>("--body", "Value to be matched with the log message body"),
			(args, i) => args.BodyMatch = i);
		AddOption(new Option<bool>("--full-match", "If set, this will make the body message match be a full exact match"),
			(args, i) => args.FullMatch = i);
		AddOption(new Option<string>("--from", "The amount of time to go back and retrieve logs"),
			(args, i) => args.FromTime = i);
		AddOption(new Option<bool>("--ascending", () => false,"If set, this will force the order to be ascending instead of the default descending order"),
			(args, i) => args.AscendingOrder = i);
	}

	public override async Task<FetchTelemetryLogsResult> GetResult(FetchTelemetryLogsCommandArgs args)
	{
		OtelAuthConfig res = await args.OtelApi.GetOtelAuthReaderConfig();
		var result = await ClickhouseConnection.FetchLogs(res, args);

		return new FetchTelemetryLogsResult()
		{
			allLogsFound = result
		};
	}
}
