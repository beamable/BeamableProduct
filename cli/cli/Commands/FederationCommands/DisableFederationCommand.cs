using Beamable.Api.Autogenerated.Beamo;
using Beamable.Api.Autogenerated.Models;
using System.CommandLine;

namespace cli.FederationCommands;

public class DisableFederationCommandArgs : CommandArgs
{
	public string serviceName;
	public string federationTypes;
	public string federationNamespaces;
}

public class DisableFederationCommandOutput
{
	
}

public class DisableFederationCommand : AtomicCommand<DisableFederationCommandArgs, DisableFederationCommandOutput>
{
	public DisableFederationCommand() : base("disable", "Disable an active federation without stopping a service")
	{
	}

	public override void Configure()
	{
		AddArgument(new Argument<string>("service", "The service to disable federation"),
			(args, i) => args.serviceName = i);
	}

	public override async Task<DisableFederationCommandOutput> GetResult(DisableFederationCommandArgs args)
	{
		var res = await SetEnabled(args, false);
		LogResult(res);
		return new DisableFederationCommandOutput();
	}

	public static async Task<SupportedFederationsResponse> SetEnabled(DisableFederationCommandArgs args, bool enabled)
	{
		var api = args.DependencyProvider.GetService<IBeamoApi>();
		var res = await api.PostMicroserviceFederation(new MicroserviceRegistrationsQuery
		{
			serviceName = args.serviceName,
		});

		if (res.registrations.Length == 0)
		{
			throw new CliException("no service found");
		}

		var registration = res.registrations[0];

		await api.PutMicroserviceFederationTraffic(new MicroserviceRegistrationRequest
		{
			serviceName = registration.serviceName, trafficFilterEnabled = enabled
		});
		
		res = await api.PostMicroserviceFederation(new MicroserviceRegistrationsQuery
		{
			serviceName = args.serviceName,
		});
		return res;
	}
}


public class EnableFederationCommand : AtomicCommand<DisableFederationCommandArgs, DisableFederationCommandOutput>
{
	public EnableFederationCommand() : base("enable", "Enable an active federation without stopping a service")
	{
	}

	public override void Configure()
	{
		AddArgument(new Argument<string>("service", "The service to disable federation"),
			(args, i) => args.serviceName = i);
	}

	public override async Task<DisableFederationCommandOutput> GetResult(DisableFederationCommandArgs args)
	{
		var res = await DisableFederationCommand.SetEnabled(args, true);
		LogResult(res);
		return new DisableFederationCommandOutput();
	}
}
