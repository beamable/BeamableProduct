using Beamable.Api.Autogenerated.Models;
using Beamable.Server;
using cli.Services;
using System.CommandLine;

namespace cli.FederationCommands;

public class RemoveFederationCommandArgs : CommandArgs
{
	public string BeamoId;
	public string FederationId;
	public string FederationInterface;
}

public class RemoveFederationCommandOutput
{
}

public class RemoveFederationCommand : StreamCommand<RemoveFederationCommandArgs, RemoveFederationCommandOutput>
{
	public RemoveFederationCommand() : base("remove", "Removes a federation to a particular microservice")
	{
		IsHidden = true;
	}

	public override void Configure()
	{
		var microserviceArg = new Argument<string>("microservice", "The BeamoId of the microservice to add");
		AddArgument(microserviceArg, (args, i) => args.BeamoId = i);

		var federationId = new Argument<string>("fed-id", "The federation id. Empty string will remove all federation ids. This is applied as an \"AND\" filter with the `fed-type` argument");
		AddArgument(federationId, (args, i) => args.FederationId = i);

		var federationType = new Argument<FederationType>("fed-types", "The type of federation to remove. Empty string will remove all federations. This is applied as an \"AND\" filter with the `fed-id` argument");
		AddArgument(federationType, (args, i) => args.FederationInterface = i.ToString());
	}

	public override Task Handle(RemoveFederationCommandArgs args)
	{
		throw new CliException("This command is obsolete as now federations are auto-managed by the Microservices declarations and added to the OpenApi Specs");
	}
}
