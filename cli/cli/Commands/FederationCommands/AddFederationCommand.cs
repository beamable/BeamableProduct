using Beamable.Api.Autogenerated.Models;
using Beamable.Server;
using cli.Services;
using System.CommandLine;

namespace cli.FederationCommands;

public class AddFederationCommandArgs : CommandArgs
{
	public string BeamoId;
	public string FederationId;
	public string FederationInterface;
}

public class AddFederationCommandOutput
{
}

public class AddFederationCommand : StreamCommand<AddFederationCommandArgs, AddFederationCommandOutput>
{
	public AddFederationCommand() : base("add", "Adds a federation to a particular microservice")
	{
		IsHidden = true;
	}

	public override void Configure()
	{
		var microserviceArg = new Argument<string>("microservice", "The BeamoId of the microservice to add");
		AddArgument(microserviceArg, (args, i) => args.BeamoId = i);

		var federationId = new Argument<string>("fed-id", "A federation id. This uniquely identifies your federation. Different federation interfaces can be associated with each id");
		AddArgument(federationId, (args, i) => args.FederationId = i);


		var federationType = new Argument<FederationType>("fed-type", "The type of federation to add");
		AddArgument(federationType, (args, i) => args.FederationInterface = i.ToString());
	}

	public override Task Handle(AddFederationCommandArgs args)
	{
		throw new CliException("This command is obsolete as now federations are auto-managed by the Microservices declarations and added to the OpenApi Specs");
	}
}
