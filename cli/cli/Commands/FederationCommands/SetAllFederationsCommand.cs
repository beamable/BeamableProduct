using Beamable.Api.Autogenerated.Models;
using Beamable.Server;
using cli.Services;
using System.CommandLine;

namespace cli.FederationCommands;

public class SetAllFederationsCommandArgs : CommandArgs
{
	public string BeamoId;
	public List<string> FederationIds;
	public List<string> FederationInterfaces;

	public bool clear;
}

public class SetAllFederationsCommandOutput
{

}

public class SetAllFederationsCommand
	: AtomicCommand<SetAllFederationsCommandArgs, SetAllFederationsCommandOutput>
{
	public SetAllFederationsCommand() : base("set", "Set all federations for a particular service")
	{
	}

	public override void Configure()
	{
		var microserviceArg = new Argument<string>("microservice", "The BeamoId of the microservice to add");
		AddArgument(microserviceArg, (args, i) => args.BeamoId = i);

		AddOption(new Option<bool>(new string[] { "--clear", "-c" }, "Erase all federations"),
			(args, i) => args.clear = i);

		var idsOption =
			new Option<List<string>>("--fed-id",
				"A federation id, must be in a parallel layout to the --fed-type option")
			{
				AllowMultipleArgumentsPerToken = true,
				Arity = ArgumentArity.ZeroOrMore
			};
		AddOption(idsOption,
			(args, i) =>
			{
				// empty; validation in --fed-type binding
			});

		AddOption(
			new Option<List<string>>("--fed-type", "A federation type, must be in a parallel layout to the --fed-id option")
			{
				AllowMultipleArgumentsPerToken = true,
				Arity = ArgumentArity.ZeroOrMore
			},
			(args, opts, i) =>
			{
				var ids = opts.ParseResult.GetValueForOption(idsOption);
				args.FederationIds = ids;
				args.FederationInterfaces = i;

				if (args.FederationIds.Count != args.FederationInterfaces.Count)
				{
					throw new CliException("--fed-type and --fed-id values must have the same cardinality");
				}
			});
	}

	public override async Task<SetAllFederationsCommandOutput> GetResult(SetAllFederationsCommandArgs args)
	{
		{ // validations
		  // validate that if the --clear flag was given, there are no --fed-ids given
			if (args.clear && (args.FederationIds.Count > 0 || args.FederationInterfaces.Count > 0))
			{
				throw new CliException("cannot pass both --clear flag and federations.");
			}

			if (!args.clear && (args.FederationIds.Count == 0 || args.FederationInterfaces.Count == 0))
			{
				throw new CliException("must pass federations, or pass the --clear flag to erase all");
			}
		}

		var manifest = args.BeamoLocalSystem.BeamoManifest;

		// Make sure the selected service exists.
		var selectedService = manifest.ServiceDefinitions.FirstOrDefault(sd => sd.BeamoId == args.BeamoId);
		if (selectedService == null)
		{
			var err = $"Service {args.BeamoId} was not found.";
			err += "Make sure the id of the service correctly matches an existing service.";

			var possibleServices = string.Join('\n', manifest.ServiceDefinitions.Where(sd => sd.Protocol is BeamoProtocolType.HttpMicroservice).Select(sd => sd.BeamoId));
			err += $"Here's a list of possible services:\n{possibleServices}";
			throw new CliException(err, 3, true);
		}

		// clear the configuration, because we are about to completely set it.
		selectedService.SourceGenConfig.Federations.Clear();

		if (!args.clear)
		{
			var dict = new Dictionary<string, List<FederationInstanceConfig>>();
			for (var i = 0; i < args.FederationIds.Count; i++)
			{
				var id = args.FederationIds[i];
				var type = args.FederationInterfaces[i];
				if (!dict.TryGetValue(id, out var existing))
				{
					dict[id] = existing = new List<FederationInstanceConfig>();
				}
				existing.Add(new FederationInstanceConfig
				{
					Interface = type
				});
			}

			foreach (var kvp in dict)
			{
				selectedService.SourceGenConfig.Federations.Add(kvp.Key, kvp.Value.ToArray());
			}
		}

		// Serialize the updated source gen config to disk
		await ProjectContextUtil.SerializeSourceGenConfigToDisk(args.ConfigService.BaseDirectory, selectedService);

		return new SetAllFederationsCommandOutput();
	}
}
