using Beamable.Api.Autogenerated.Models;
using Beamable.Common.Content;
using Beamable.Serialization;
using NUnit.Framework;

namespace tests.DiffTests;

public class DiffTest
{
	public class ObjectWithInts : JsonSerializable.ISerializable
	{
		public Ints numbers;
		public void Serialize(JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("nums", ref numbers);
		}
	}


	public class Ints : JsonSerializable.ISerializable
	{
		public int x;
		public int y;
		public void Serialize(JsonSerializable.IStreamSerializer s)
		{
			s.Serialize("x", ref x);
			s.Serialize("y", ref y);
		}
	}

	public class OptionalInts : JsonSerializable.ISerializable
	{
		public OptionalInt x;
		public OptionalInt y;
		public void Serialize(JsonSerializable.IStreamSerializer s)
		{
			if ((s.HasKey(nameof(x))
				 || ((x != default(OptionalInt))
					 && x.HasValue)))
			{
				s.Serialize(nameof(x), ref x.Value);
				x.HasValue = true;
			}

			if ((s.HasKey(nameof(y))
				 || ((y != default(OptionalInt))
					 && y.HasValue)))
			{
				s.Serialize(nameof(y), ref y.Value);
				y.HasValue = true;
			}
		}
	}


	[Test]
	public void Manifests()
	{
		var a = new ManifestView
		{
			manifest = new ServiceReference[]
			{
				new ServiceReference
				{
					enabled = false
				},
				new ServiceReference
				{
					serviceName = "tunafish"
				}
			}
		};
		var b = new ManifestView
		{
			manifest = new ServiceReference[]
			{
				new ServiceReference
				{
					enabled = true
				}
			}
		};

		var diff = DiffStream.FindChanges(a, b);

		// just assert doesn't explode.
	}


	[Test]
	public void Simple()
	{
		var a = new Ints { x = 1, y = 3 };
		var b = new Ints { x = 1, y = 2 };

		var diff = DiffStream.FindChanges(a, b);

		Assert.That(diff.changes.Count, Is.EqualTo(1));
		Assert.That(diff.changes[0].currentValue, Is.EqualTo("3"));
		Assert.That(diff.changes[0].nextValue, Is.EqualTo("2"));
		Assert.That(diff.changes[0].type, Is.EqualTo(DiffType.Changed));
		Assert.That(diff.changes[0].jsonPath, Is.EqualTo("y"));
	}

	[Test]
	public void SimpleNested()
	{
		var a = new ObjectWithInts() { numbers = new Ints { x = 1, y = 3 } };
		var b = new ObjectWithInts() { numbers = new Ints { x = 2, y = 3 } };

		var diff = DiffStream.FindChanges(a, b);

		Assert.That(diff.changes.Count, Is.EqualTo(1));
		Assert.That(diff.changes[0].currentValue, Is.EqualTo("1"));
		Assert.That(diff.changes[0].nextValue, Is.EqualTo("2"));
		Assert.That(diff.changes[0].type, Is.EqualTo(DiffType.Changed));
		Assert.That(diff.changes[0].jsonPath, Is.EqualTo("nums.x"));
	}


	[Test]
	public void SimpleNested_Removed()
	{
		var a = new ObjectWithInts() { numbers = new Ints { x = 1, y = 3 } };
		var b = new ObjectWithInts() { numbers = null };

		var diff = DiffStream.FindChanges(a, b);

		Assert.That(diff.changes.Count, Is.EqualTo(2));
		Assert.That(diff.changes[0].currentValue, Is.EqualTo("1"));
		Assert.That(diff.changes[0].nextValue, Is.EqualTo(null));
		Assert.That(diff.changes[0].type, Is.EqualTo(DiffType.Removed));
		Assert.That(diff.changes[0].jsonPath, Is.EqualTo("nums.x"));
		Assert.That(diff.changes[1].currentValue, Is.EqualTo("3"));
		Assert.That(diff.changes[1].nextValue, Is.EqualTo(null));
		Assert.That(diff.changes[1].type, Is.EqualTo(DiffType.Removed));
		Assert.That(diff.changes[1].jsonPath, Is.EqualTo("nums.y"));
	}

	[Test]
	public void Simple_Optional()
	{
		var a = new OptionalInts { x = 1, y = 3 };
		var b = new OptionalInts { x = 1, y = 2 };

		var diff = DiffStream.FindChanges(a, b);

		Assert.That(diff.changes.Count, Is.EqualTo(1));
		Assert.That(diff.changes[0].currentValue, Is.EqualTo("3"));
		Assert.That(diff.changes[0].nextValue, Is.EqualTo("2"));
		Assert.That(diff.changes[0].type, Is.EqualTo(DiffType.Changed));
		Assert.That(diff.changes[0].jsonPath, Is.EqualTo("y"));
	}

	[Test]
	public void Simple_Optional_RemovedValue()
	{
		var a = new OptionalInts { x = 1, y = 3 };
		var b = new OptionalInts { x = 1 };

		var diff = DiffStream.FindChanges(a, b);

		Assert.That(diff.changes.Count, Is.EqualTo(1), "there is a diff");
		Assert.That(diff.changes[0].currentValue, Is.EqualTo("3"));
		Assert.That(diff.changes[0].nextValue, Is.EqualTo(null));
		Assert.That(diff.changes[0].type, Is.EqualTo(DiffType.Removed));
		Assert.That(diff.changes[0].jsonPath, Is.EqualTo("y"));
	}


	[Test]
	public void Simple_Optional_AddedValue()
	{
		var a = new OptionalInts { x = 1 };
		var b = new OptionalInts { x = 1, y = 2 };

		var diff = DiffStream.FindChanges(a, b);

		Assert.That(diff.changes.Count, Is.EqualTo(1), "there is a diff");
		Assert.That(diff.changes[0].currentValue, Is.EqualTo(null));
		Assert.That(diff.changes[0].nextValue, Is.EqualTo("2"));
		Assert.That(diff.changes[0].type, Is.EqualTo(DiffType.Added));
		Assert.That(diff.changes[0].jsonPath, Is.EqualTo("y"));
	}
}
