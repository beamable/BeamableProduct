using Beamable.Api.Autogenerated.Accounts;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common.Api.Auth;
using Beamable.Common.Api.Realms;
using Beamable.Common.Content;
using cli.Services;
using Moq;
using Serilog.Events;
using System.Collections.Generic;
using tests.MoqExtensions;
using TokenResponse = Beamable.Common.Api.Auth.TokenResponse;

namespace tests.Examples;

public class CLITestExtensions : CLITest
{
	protected string alias = "sample-alias";
	protected string userName = "user@test.com";
	protected string password = "password";
	protected string cid = "123";
	protected string pid = "456";

	protected void SetupMocks(
		bool mockAlias = true, 
		bool mockAuth = true, 
		bool mockRealms = true, 
		bool mockBeamoManifest=true,
		bool mockAdminMe=true)
	{
		base.Setup();
		_serilogLevel.MinimumLevel = LogEventLevel.Verbose;

		if (mockBeamoManifest)
		{
			Mock<BeamoService>(mock =>
			{
				mock.Setup(x => x.GetCurrentManifest())
					.ReturnsPromise(new ServiceManifest())
					.Verifiable();
			});
		}
		
		if (mockAlias)
			Mock<IAliasService>(mock =>
			{
				mock.Setup(x => x.Resolve(alias))
					.ReturnsPromise(new AliasResolve
					{
						Alias = new OptionalString(alias),
						Cid = new OptionalString("123")
					})
					.Verifiable();
			});
		
		if (mockAdminMe)
			Mock<IAccountsApi>(mock =>
			{
				mock.Setup(x => x.GetAdminMe(true))
					.ReturnsPromise(new AccountPortalView()
					{
						email = "tuna@tuna.com",
						id = 123
					})
					.Verifiable();
			});

		if (mockAuth)
			Mock<IAuthApi>(mock =>
			{
				mock.Setup(x => x.Login(userName, password, false, false))
					.ReturnsPromise(new TokenResponse
					{
						refresh_token = "refresh",
						access_token = "access",
						token_type = "token"
					})
					.Verifiable();
			});

		if (mockRealms)
			Mock<IRealmsApi>(mock =>
			{
				mock.Setup(x => x.GetGames())
					.ReturnsPromise(new List<RealmView>
					{
						new RealmView
						{
							Cid = cid, Pid = pid, ProjectName = pid, GamePid = pid,
						}
					})
					.Verifiable();

				mock.Setup(x => x.GetRealms(It.IsAny<RealmView>()))
					.ReturnsPromise(new List<RealmView>
					{
						new RealmView { Cid = cid, Pid = pid, ProjectName = pid, GamePid = pid }
					})
					.Verifiable();
			});

	}
}
