using Beamable.Common.Api.Announcements;
using Beamable.Common.Content;
using Beamable.Common.Inventory;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Beamable.Api.Autogenerated.Models
{
	public static class LegacyConverterExtensions
	{
		public static Common.Api.Announcements.AnnouncementQueryResponse ConvertToLegacy(this AnnouncementQueryResponse response)
		{
			if (response == null)
			{
				return new Common.Api.Announcements.AnnouncementQueryResponse();
			}

			return new Common.Api.Announcements.AnnouncementQueryResponse { announcements = response.announcements.ConvertToLegacy() };
		}

		public static List<Common.Api.Announcements.AnnouncementView> ConvertToLegacy(this AnnouncementView[] announcementViews)
		{
			return announcementViews.Select(item => new Common.Api.Announcements.AnnouncementView
			{
				id = item.id,
				channel = item.channel,
				startDate = item.startDate.GetOrElse(string.Empty),
				endDate = item.endDate.GetOrElse(string.Empty),
				secondsRemaining = item.secondsRemaining.GetOrElse(0),
				title = item.title,
				summary = item.summary,
				body = item.body,
				attachments = item.attachments.ConvertToLegacy(),
				gift = item.gift.ConvertToLegacy(),
				isRead = item.isRead,
				isClaimed = item.isClaimed
			}).ToList();
		}

		public static List<Common.Announcements.AnnouncementAttachment> ConvertToLegacy(this AnnouncementAttachment[] attachments)
		{
			if (attachments == null || attachments.Length == 0)
			{
				return new List<Common.Announcements.AnnouncementAttachment>();
			}
			
			return attachments.Select(attachment => new Common.Announcements.AnnouncementAttachment
			{
				symbol = attachment.symbol, 
				count = attachment.count, 
				type = attachment.type.GetOrElse(string.Empty)
			}).ToList();
		}

		public static PlayerRewardView ConvertToLegacy(this OptionalPlayerReward optionalPlayerReward)
		{
			var converted = new PlayerRewardView();
			if (optionalPlayerReward.HasValue)
			{
				PlayerReward playerReward = optionalPlayerReward.Value;
				converted.description = playerReward.description;
				converted.applyVipBonus = playerReward.applyVipBonus;
				converted.items = playerReward.addItems.ConvertToLegacy();
				converted.currencies = playerReward.changeCurrencies.ConvertToLegacy();
			}

			return converted;
		}

		public static OptionalPlayerRewardNewItemView ConvertToLegacy(this OptionalArrayOfNewItemReward optionalItemRewards)
		{
			var converted = new OptionalPlayerRewardNewItemView();
			if (optionalItemRewards.HasValue)
			{
				converted.SetValue(new PlayerRewardListOfNewItemView
				{
					listData = optionalItemRewards.Value.Select(item => new PlayerRewardNewItemView
					{
						symbol = new ItemRef(item.symbol),
						properties = new OptionalSerializableDictionaryStringToString
						{
							HasValue = item.properties.HasValue, Value = item.properties.Value
						}
					}).ToList()
				});
			}

			return converted;
		}

		public static OptionalPlayerRewardCurrencyChangeView ConvertToLegacy(this OptionalArrayOfCurrencyChangeReward optionalCurrencyReward)
		{
			var converted = new OptionalPlayerRewardCurrencyChangeView();
			if (optionalCurrencyReward.HasValue)
			{
				converted.SetValue(new PlayerRewardListOfCurrencyChangeView
				{
					listData = optionalCurrencyReward.Value.Select(currency => new PlayerRewardCurrencyChangeView
					{
						amount = currency.amount, 
						symbol = new CurrencyRef(currency.symbol)
					}).ToList()
				});
			}

			return converted;
		}

		public static ManifestView ConvertToLegacy(this BeamoV2Manifest beamoV2Manifest)
		{
			return new ManifestView()
			{
				checksum = beamoV2Manifest.checksum.GetOrElse(""), 
				comments = beamoV2Manifest.comments,
				created = beamoV2Manifest.created.GetOrElse(0),
				createdByAccountId = beamoV2Manifest.createdByAccountId,
				id = beamoV2Manifest.id.GetOrElse(""),
				manifest = beamoV2Manifest.serviceReferences.ConvertToLegacy(),
				storageReference = new OptionalArrayOfServiceStorageReference()
				{
					HasValue = beamoV2Manifest.storageReferences.HasValue,
					Value = beamoV2Manifest.storageReferences.Value.ConvertToLegacy()
				},
			};
		}

		public static ServiceReference[] ConvertToLegacy(this OptionalArrayOfBeamoV2ServiceReference arrayBeamoV2ServiceReference)
		{
			if (!arrayBeamoV2ServiceReference.HasValue || arrayBeamoV2ServiceReference.Value.Length == 0)
			{
				return Array.Empty<ServiceReference>();
			}

			return arrayBeamoV2ServiceReference.Value.Select(ConvertToLegacy).ToArray();
		}

		public static ServiceReference ConvertToLegacy(this BeamoV2ServiceReference beamoV2ServiceReference)
		{
			return new ServiceReference()
			{
				archived = beamoV2ServiceReference.archived.GetOrElse(false),
				checksum = beamoV2ServiceReference.checksum.GetOrElse(""),
				comments = beamoV2ServiceReference.comments,
				containerHealthCheckPort =
					new OptionalLong
					{
						HasValue = beamoV2ServiceReference.containerHealthCheckPort.HasValue,
						Value = beamoV2ServiceReference.containerHealthCheckPort.GetOrElse(0)
					},
				dependencies = new OptionalArrayOfServiceDependencyReference()
				{
					HasValue = beamoV2ServiceReference.dependencies.HasValue,
					Value = beamoV2ServiceReference.dependencies.Value.ConvertToLegacy()
				},
				components = new OptionalArrayOfServiceComponent()
				{
					HasValue = beamoV2ServiceReference.components.HasValue,
					Value = beamoV2ServiceReference.components.Value.ConvertToLegacy(),
				},
				enabled = beamoV2ServiceReference.enabled,
				imageCpuArch = beamoV2ServiceReference.imageCpuArch,
				imageId = beamoV2ServiceReference.imageId.GetOrElse(""),
				serviceName = beamoV2ServiceReference.serviceName.GetOrElse(""),
				templateId = beamoV2ServiceReference.templateId.GetOrElse(""),
			};
		}

		public static ServiceDependencyReference[] ConvertToLegacy(this BeamoV2ServiceDependencyReference[] beamoV2ServiceDependencyReferences)
		{
			if (beamoV2ServiceDependencyReferences == null || beamoV2ServiceDependencyReferences.Length == 0)
			{
				return Array.Empty<ServiceDependencyReference>();
			}

			return beamoV2ServiceDependencyReferences.Select(ConvertToLegacy).ToArray();
		}

		public static ServiceDependencyReference ConvertToLegacy(this BeamoV2ServiceDependencyReference beamoV2ServiceDependencyReference)
		{
			return new ServiceDependencyReference()
			{
				id = beamoV2ServiceDependencyReference.id.GetOrElse(""), storageType = beamoV2ServiceDependencyReference.storageType.GetOrElse("")
			};
		}

		public static ServiceComponent[] ConvertToLegacy(this BeamoV2ServiceComponent[] beamoV2ServiceComponents)
		{
			return beamoV2ServiceComponents.Select(ConvertToLegacy).ToArray();
		}

		public static ServiceComponent ConvertToLegacy(this BeamoV2ServiceComponent beamoV2ServiceComponent)
		{
			return new ServiceComponent() { name = beamoV2ServiceComponent.name, };
		}

		public static ServiceStorageReference[] ConvertToLegacy(this BeamoV2ServiceStorageReference[] beamoV2ServiceStorageReferences)
		{
			if (beamoV2ServiceStorageReferences == null || beamoV2ServiceStorageReferences.Length == 0)
			{
				return Array.Empty<ServiceStorageReference>();
			}

			return beamoV2ServiceStorageReferences.Select(ConvertToLegacy).ToArray();
		}

		public static ServiceStorageReference ConvertToLegacy(this BeamoV2ServiceStorageReference beamoV2ServiceStorageReference)
		{
			return new ServiceStorageReference()
			{
				archived = beamoV2ServiceStorageReference.archived.GetOrElse(false),
				checksum = beamoV2ServiceStorageReference.checksum.GetOrElse(""),
				enabled = beamoV2ServiceStorageReference.enabled.GetOrElse(false),
				id = beamoV2ServiceStorageReference.id.GetOrElse(""),
				storageType = beamoV2ServiceStorageReference.storageType.GetOrElse(""),
				templateId = beamoV2ServiceStorageReference.templateId,
			};
		}

		public static BeamoV2ServiceReference[] ToBeamoV2(this ServiceReference[] legacyServiceReference)
		{
			return legacyServiceReference.Select(ToBeamoV2).ToArray();
		}

		public static BeamoV2ServiceReference ToBeamoV2(this ServiceReference legacyServiceReference)
		{
			return new BeamoV2ServiceReference()
			{
				archived = legacyServiceReference.archived,
				checksum = legacyServiceReference.checksum,
				comments = legacyServiceReference.comments,
				components =
					new OptionalArrayOfBeamoV2ServiceComponent
					{
						HasValue = legacyServiceReference.components.HasValue, Value = legacyServiceReference.components.Value.ToBeamoV2(),
					},
				containerHealthCheckPort =
					new OptionalInt
					{
						HasValue = legacyServiceReference.containerHealthCheckPort.HasValue,
						Value = (int)legacyServiceReference.containerHealthCheckPort.Value
					},
				dependencies =
					new OptionalArrayOfBeamoV2ServiceDependencyReference
					{
						HasValue = legacyServiceReference.dependencies.HasValue, Value = legacyServiceReference.dependencies.Value.ToBeamoV2(),
					},
				enabled = legacyServiceReference.enabled,
				imageCpuArch = legacyServiceReference.imageCpuArch,
				imageId = legacyServiceReference.imageId,
				serviceName = legacyServiceReference.serviceName,
				templateId = legacyServiceReference.templateId,
			};
		}

		public static BeamoV2ServiceComponent[] ToBeamoV2(this ServiceComponent[] legacyServiceComponents)
		{
			return legacyServiceComponents.Select(ToBeamoV2).ToArray();
		}
		
		public static BeamoV2ServiceComponent ToBeamoV2(this ServiceComponent legacyServiceComponent)
		{
			return new BeamoV2ServiceComponent() { name = legacyServiceComponent.name };
		}

		public static BeamoV2ServiceDependencyReference[] ToBeamoV2(this ServiceDependencyReference[] legacyServiceDependencyReferences)
		{
			return legacyServiceDependencyReferences.Select(ToBeamoV2).ToArray();
		}

		public static BeamoV2ServiceDependencyReference ToBeamoV2(this ServiceDependencyReference legacyServiceDependencyReference)
		{
			return new BeamoV2ServiceDependencyReference
			{
				id = legacyServiceDependencyReference.id, storageType = legacyServiceDependencyReference.storageType,
			};
		}

		public static BeamoV2ServiceStorageReference[] ToBeamoV2(this ServiceStorageReference[] legacyStorageReference)
		{
			return legacyStorageReference.Select(ToBeamoV2).ToArray();
		}

		public static BeamoV2ServiceStorageReference ToBeamoV2(this ServiceStorageReference legacyStorageReference)
		{
			return new BeamoV2ServiceStorageReference()
			{
				archived = legacyStorageReference.archived,
				checksum = legacyStorageReference.checksum,
				enabled = legacyStorageReference.enabled,
				id = legacyStorageReference.id,
				storageType = legacyStorageReference.storageType,
				templateId = legacyStorageReference.templateId,
			};
		}
		
	}
}
