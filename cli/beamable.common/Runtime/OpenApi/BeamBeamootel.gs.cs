
namespace Beamable.Api.Autogenerated.Beamootel
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IBeamBeamootelApi
    {
        /// <summary>
        /// GET call to `/api/beamo/otel/auth/reader/config` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="OtelAuthConfig"/></returns>
        Promise<OtelAuthConfig> GetOtelAuthReaderConfig([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/api/beamo/otel/auth/writer/config` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="OtelAuthConfig"/></returns>
        Promise<OtelAuthConfig> GetOtelAuthWriterConfig([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
    }
    public partial class BeamBeamootelApi : IBeamBeamootelApi
    {
        /// <summary>
        /// GET call to `/api/beamo/otel/auth/reader/config` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="OtelAuthConfig"/></returns>
        public virtual Promise<OtelAuthConfig> GetOtelAuthReaderConfig([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/otel/auth/reader/config";
            // make the request and return the result
            return _requester.Request<OtelAuthConfig>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<OtelAuthConfig>);
        }
        /// <summary>
        /// GET call to `/api/beamo/otel/auth/writer/config` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="OtelAuthConfig"/></returns>
        public virtual Promise<OtelAuthConfig> GetOtelAuthWriterConfig([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/beamo/otel/auth/writer/config";
            // make the request and return the result
            return _requester.Request<OtelAuthConfig>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<OtelAuthConfig>);
        }
    }
}
