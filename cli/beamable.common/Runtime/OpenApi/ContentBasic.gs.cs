
namespace Beamable.Api.Autogenerated.Content
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IContentApi
    {
        /// <summary>
        /// POST call to `/basic/content/manifests/unarchive` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ArchiveOrUnarchiveManifestsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> PostManifestsUnarchive(ArchiveOrUnarchiveManifestsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/basic/content/manifest/pull` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="PullManifestRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        Promise<ContentBasicManifest> PostManifestPull(PullManifestRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/manifest/history` endpoint.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="limit"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GetManifestHistoryResponse"/></returns>
        Promise<GetManifestHistoryResponse> GetManifestHistory([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/basic/content/binary` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="SaveBinaryRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="SaveBinaryResponse"/></returns>
        Promise<SaveBinaryResponse> PostBinary(SaveBinaryRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/basic/content/manifests/pull` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="PullAllManifestsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifestChecksums"/></returns>
        Promise<ContentBasicManifestChecksums> PostManifestsPull(PullAllManifestsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/content` endpoint.
        /// </summary>
        /// <param name="contentId"></param>
        /// <param name="version"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentOrText"/></returns>
        Promise<ContentOrText> GetContent(string contentId, string version, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/localizations` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GetLocalizationsResponse"/></returns>
        Promise<GetLocalizationsResponse> GetLocalizations([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/basic/content/localizations` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="PutLocalizationsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> PutLocalizations(PutLocalizationsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// DELETE call to `/basic/content/localizations` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="DeleteLocalizationRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> DeleteLocalizations(DeleteLocalizationRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/basic/content/text` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="SaveTextRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="SaveTextResponse"/></returns>
        Promise<SaveTextResponse> PostText(SaveTextRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/manifest/exact` endpoint.
        /// </summary>
        /// <param name="uid"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        Promise<ContentBasicManifest> GetManifestExact(string uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/manifest` endpoint.
        /// </summary>
        /// <param name="id">ID of the content manifest</param>
        /// <param name="uid">UID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        Promise<ContentBasicManifest> GetManifest([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/basic/content/manifest` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="SaveManifestRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="SaveManifestResponse"/></returns>
        Promise<SaveManifestResponse> PostManifest(SaveManifestRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/manifest/diffs` endpoint.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="manifestId"></param>
        /// <param name="offset"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GetManifestDiffsResponse"/></returns>
        Promise<GetManifestDiffsResponse> GetManifestDiffs(string manifestId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> offset, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/basic/content/manifests/archive` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ArchiveOrUnarchiveManifestsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> PostManifestsArchive(ArchiveOrUnarchiveManifestsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/basic/content/` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="SaveContentRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="SaveContentResponse"/></returns>
        Promise<SaveContentResponse> Post(SaveContentRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/manifest/public` endpoint.
        /// </summary>
        /// <param name="id">ID of the content manifest</param>
        /// <param name="uid">UID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ClientManifestResponse"/></returns>
        Promise<ClientManifestResponse> GetManifestPublic([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/manifest/public/json` endpoint.
        /// </summary>
        /// <param name="id">Content ID of the content manifest</param>
        /// <param name="uid">UID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ClientManifestJsonResponse"/></returns>
        Promise<ClientManifestJsonResponse> GetManifestPublicJson([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/basic/content/manifest/repeat` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="RepeatManifestRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        Promise<CommonResponse> PutManifestRepeat(RepeatManifestRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/manifest/private/json` endpoint.
        /// </summary>
        /// <param name="id">Content ID of the content manifest</param>
        /// <param name="uid">UID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ClientManifestJsonResponse"/></returns>
        Promise<ClientManifestJsonResponse> GetManifestPrivateJson([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/manifest/private` endpoint.
        /// </summary>
        /// <param name="id">ID of the content manifest</param>
        /// <param name="uid">UID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ClientManifestResponse"/></returns>
        Promise<ClientManifestResponse> GetManifestPrivate([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/manifest/checksums` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifestChecksums"/></returns>
        Promise<ContentBasicManifestChecksums> GetManifestChecksums([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/manifest/checksum` endpoint.
        /// </summary>
        /// <param name="id">ID of the content manifest</param>
        /// <param name="uid">UID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifestChecksum"/></returns>
        Promise<ContentBasicManifestChecksum> GetManifestChecksum([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/content/manifests` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicGetManifestsResponse"/></returns>
        Promise<ContentBasicGetManifestsResponse> GetManifests([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
    }
    public partial class ContentApi : IContentApi
    {
        /// <summary>
        /// POST call to `/basic/content/manifests/unarchive` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ArchiveOrUnarchiveManifestsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> PostManifestsUnarchive(ArchiveOrUnarchiveManifestsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifests/unarchive";
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyResponse>);
        }
        /// <summary>
        /// POST call to `/basic/content/manifest/pull` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="PullManifestRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        public virtual Promise<ContentBasicManifest> PostManifestPull(PullManifestRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/pull";
            // make the request and return the result
            return _requester.Request<ContentBasicManifest>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<ContentBasicManifest>);
        }
        /// <summary>
        /// GET call to `/basic/content/manifest/history` endpoint.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="limit"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GetManifestHistoryResponse"/></returns>
        public virtual Promise<GetManifestHistoryResponse> GetManifestHistory([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/history";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((id != default(OptionalString)) 
                        && id.HasValue))
            {
                gsQueries.Add(string.Concat("id=", id.Value.ToString()));
            }
            if (((limit != default(OptionalInt)) 
                        && limit.HasValue))
            {
                gsQueries.Add(string.Concat("limit=", limit.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<GetManifestHistoryResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<GetManifestHistoryResponse>);
        }
        /// <summary>
        /// POST call to `/basic/content/binary` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="SaveBinaryRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="SaveBinaryResponse"/></returns>
        public virtual Promise<SaveBinaryResponse> PostBinary(SaveBinaryRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/binary";
            // make the request and return the result
            return _requester.Request<SaveBinaryResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<SaveBinaryResponse>);
        }
        /// <summary>
        /// POST call to `/basic/content/manifests/pull` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="PullAllManifestsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifestChecksums"/></returns>
        public virtual Promise<ContentBasicManifestChecksums> PostManifestsPull(PullAllManifestsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifests/pull";
            // make the request and return the result
            return _requester.Request<ContentBasicManifestChecksums>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<ContentBasicManifestChecksums>);
        }
        /// <summary>
        /// GET call to `/basic/content/content` endpoint.
        /// </summary>
        /// <param name="contentId"></param>
        /// <param name="version"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentOrText"/></returns>
        public virtual Promise<ContentOrText> GetContent(string contentId, string version, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/content";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            gsQueries.Add(string.Concat("contentId=", _requester.EscapeURL(contentId.ToString())));
            gsQueries.Add(string.Concat("version=", _requester.EscapeURL(version.ToString())));
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ContentOrText>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ContentOrText>);
        }
        /// <summary>
        /// GET call to `/basic/content/localizations` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GetLocalizationsResponse"/></returns>
        public virtual Promise<GetLocalizationsResponse> GetLocalizations([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/localizations";
            // make the request and return the result
            return _requester.Request<GetLocalizationsResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<GetLocalizationsResponse>);
        }
        /// <summary>
        /// PUT call to `/basic/content/localizations` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="PutLocalizationsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> PutLocalizations(PutLocalizationsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/localizations";
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<CommonResponse>);
        }
        /// <summary>
        /// DELETE call to `/basic/content/localizations` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="DeleteLocalizationRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> DeleteLocalizations(DeleteLocalizationRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/localizations";
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<CommonResponse>);
        }
        /// <summary>
        /// POST call to `/basic/content/text` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="SaveTextRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="SaveTextResponse"/></returns>
        public virtual Promise<SaveTextResponse> PostText(SaveTextRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/text";
            // make the request and return the result
            return _requester.Request<SaveTextResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<SaveTextResponse>);
        }
        /// <summary>
        /// GET call to `/basic/content/manifest/exact` endpoint.
        /// </summary>
        /// <param name="uid"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        public virtual Promise<ContentBasicManifest> GetManifestExact(string uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/exact";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            gsQueries.Add(string.Concat("uid=", _requester.EscapeURL(uid.ToString())));
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ContentBasicManifest>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ContentBasicManifest>);
        }
        /// <summary>
        /// GET call to `/basic/content/manifest` endpoint.
        /// </summary>
        /// <param name="id">ID of the content manifest</param>
        /// <param name="uid">UID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifest"/></returns>
        public virtual Promise<ContentBasicManifest> GetManifest([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((id != default(OptionalString)) 
                        && id.HasValue))
            {
                gsQueries.Add(string.Concat("id=", id.Value.ToString()));
            }
            if (((uid != default(OptionalString)) 
                        && uid.HasValue))
            {
                gsQueries.Add(string.Concat("uid=", uid.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ContentBasicManifest>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ContentBasicManifest>);
        }
        /// <summary>
        /// POST call to `/basic/content/manifest` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="SaveManifestRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="SaveManifestResponse"/></returns>
        public virtual Promise<SaveManifestResponse> PostManifest(SaveManifestRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest";
            // make the request and return the result
            return _requester.Request<SaveManifestResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<SaveManifestResponse>);
        }
        /// <summary>
        /// GET call to `/basic/content/manifest/diffs` endpoint.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="manifestId"></param>
        /// <param name="offset"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="GetManifestDiffsResponse"/></returns>
        public virtual Promise<GetManifestDiffsResponse> GetManifestDiffs(string manifestId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> offset, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/diffs";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            gsQueries.Add(string.Concat("manifestId=", _requester.EscapeURL(manifestId.ToString())));
            if (((limit != default(OptionalInt)) 
                        && limit.HasValue))
            {
                gsQueries.Add(string.Concat("limit=", limit.Value.ToString()));
            }
            if (((offset != default(OptionalInt)) 
                        && offset.HasValue))
            {
                gsQueries.Add(string.Concat("offset=", offset.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<GetManifestDiffsResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<GetManifestDiffsResponse>);
        }
        /// <summary>
        /// POST call to `/basic/content/manifests/archive` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ArchiveOrUnarchiveManifestsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> PostManifestsArchive(ArchiveOrUnarchiveManifestsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifests/archive";
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyResponse>);
        }
        /// <summary>
        /// POST call to `/basic/content/` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="SaveContentRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="SaveContentResponse"/></returns>
        public virtual Promise<SaveContentResponse> Post(SaveContentRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/";
            // make the request and return the result
            return _requester.Request<SaveContentResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<SaveContentResponse>);
        }
        /// <summary>
        /// GET call to `/basic/content/manifest/public` endpoint.
        /// </summary>
        /// <param name="id">ID of the content manifest</param>
        /// <param name="uid">UID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ClientManifestResponse"/></returns>
        public virtual Promise<ClientManifestResponse> GetManifestPublic([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/public";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((id != default(OptionalString)) 
                        && id.HasValue))
            {
                gsQueries.Add(string.Concat("id=", id.Value.ToString()));
            }
            if (((uid != default(OptionalString)) 
                        && uid.HasValue))
            {
                gsQueries.Add(string.Concat("uid=", uid.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ClientManifestResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ClientManifestResponse>);
        }
        /// <summary>
        /// GET call to `/basic/content/manifest/public/json` endpoint.
        /// </summary>
        /// <param name="id">Content ID of the content manifest</param>
        /// <param name="uid">UID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ClientManifestJsonResponse"/></returns>
        public virtual Promise<ClientManifestJsonResponse> GetManifestPublicJson([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/public/json";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((id != default(OptionalString)) 
                        && id.HasValue))
            {
                gsQueries.Add(string.Concat("id=", id.Value.ToString()));
            }
            if (((uid != default(OptionalString)) 
                        && uid.HasValue))
            {
                gsQueries.Add(string.Concat("uid=", uid.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ClientManifestJsonResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ClientManifestJsonResponse>);
        }
        /// <summary>
        /// PUT call to `/basic/content/manifest/repeat` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="RepeatManifestRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CommonResponse"/></returns>
        public virtual Promise<CommonResponse> PutManifestRepeat(RepeatManifestRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/repeat";
            // make the request and return the result
            return _requester.Request<CommonResponse>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<CommonResponse>);
        }
        /// <summary>
        /// GET call to `/basic/content/manifest/private/json` endpoint.
        /// </summary>
        /// <param name="id">Content ID of the content manifest</param>
        /// <param name="uid">UID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ClientManifestJsonResponse"/></returns>
        public virtual Promise<ClientManifestJsonResponse> GetManifestPrivateJson([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/private/json";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((id != default(OptionalString)) 
                        && id.HasValue))
            {
                gsQueries.Add(string.Concat("id=", id.Value.ToString()));
            }
            if (((uid != default(OptionalString)) 
                        && uid.HasValue))
            {
                gsQueries.Add(string.Concat("uid=", uid.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ClientManifestJsonResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ClientManifestJsonResponse>);
        }
        /// <summary>
        /// GET call to `/basic/content/manifest/private` endpoint.
        /// </summary>
        /// <param name="id">ID of the content manifest</param>
        /// <param name="uid">UID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ClientManifestResponse"/></returns>
        public virtual Promise<ClientManifestResponse> GetManifestPrivate([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/private";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((id != default(OptionalString)) 
                        && id.HasValue))
            {
                gsQueries.Add(string.Concat("id=", id.Value.ToString()));
            }
            if (((uid != default(OptionalString)) 
                        && uid.HasValue))
            {
                gsQueries.Add(string.Concat("uid=", uid.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ClientManifestResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ClientManifestResponse>);
        }
        /// <summary>
        /// GET call to `/basic/content/manifest/checksums` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifestChecksums"/></returns>
        public virtual Promise<ContentBasicManifestChecksums> GetManifestChecksums([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/checksums";
            // make the request and return the result
            return _requester.Request<ContentBasicManifestChecksums>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ContentBasicManifestChecksums>);
        }
        /// <summary>
        /// GET call to `/basic/content/manifest/checksum` endpoint.
        /// </summary>
        /// <param name="id">ID of the content manifest</param>
        /// <param name="uid">UID of the content manifest</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicManifestChecksum"/></returns>
        public virtual Promise<ContentBasicManifestChecksum> GetManifestChecksum([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> uid, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifest/checksum";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((id != default(OptionalString)) 
                        && id.HasValue))
            {
                gsQueries.Add(string.Concat("id=", id.Value.ToString()));
            }
            if (((uid != default(OptionalString)) 
                        && uid.HasValue))
            {
                gsQueries.Add(string.Concat("uid=", uid.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<ContentBasicManifestChecksum>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ContentBasicManifestChecksum>);
        }
        /// <summary>
        /// GET call to `/basic/content/manifests` endpoint.
        /// </summary>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ContentBasicGetManifestsResponse"/></returns>
        public virtual Promise<ContentBasicGetManifestsResponse> GetManifests([System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/content/manifests";
            // make the request and return the result
            return _requester.Request<ContentBasicGetManifestsResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<ContentBasicGetManifestsResponse>);
        }
    }
}
