
namespace Beamable.Api.Autogenerated.Playerlobby
{
	using Beamable.Api.Autogenerated.Models;
	using Beamable.Common;
	using Beamable.Common.Content;
	using Beamable.Common.Dependencies;
	using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
	using Method = Beamable.Common.Api.Method;

	public partial interface IBeamPlayerlobbyApi
	{
		/// <param name="playerId">Player Id</param>
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="Lobby"/></returns>
		Promise<Lobby> GetLobbies(string playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
		/// <param name="playerId">Player Id</param>
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="ApiPlayersLobbiesDeletePlayerLobbyResponse"/></returns>
		Promise<ApiPlayersLobbiesDeletePlayerLobbyResponse> DeleteLobbies(string playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
	}
	public partial class BeamPlayerlobbyApi : IBeamPlayerlobbyApi
	{
		/// <param name="playerId">Player Id</param>
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="Lobby"/></returns>
		public virtual Promise<Lobby> GetLobbies(string playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/api/players/{playerId}/lobbies";
			gsUrl = gsUrl.Replace("{playerId}", _requester.EscapeURL(playerId.ToString()));
			// make the request and return the result
			return _requester.Request<Lobby>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<Lobby>);
		}
		/// <param name="playerId">Player Id</param>
		/// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
		/// <returns>A promise containing the <see cref="ApiPlayersLobbiesDeletePlayerLobbyResponse"/></returns>
		public virtual Promise<ApiPlayersLobbiesDeletePlayerLobbyResponse> DeleteLobbies(string playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)][System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
		{
			string gsUrl = "/api/players/{playerId}/lobbies";
			gsUrl = gsUrl.Replace("{playerId}", _requester.EscapeURL(playerId.ToString()));
			// make the request and return the result
			return _requester.Request<ApiPlayersLobbiesDeletePlayerLobbyResponse>(Method.DELETE, gsUrl, default(object), includeAuthHeader, this.Serialize<ApiPlayersLobbiesDeletePlayerLobbyResponse>);
		}
	}
}
