
namespace Beamable.Api.Autogenerated.Lobby
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IBeamLobbyApi
    {
        /// <param name="Limit"></param>
        /// <param name="MatchType"></param>
        /// <param name="Skip"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="LobbyQueryResponse"/></returns>
        Promise<LobbyQueryResponse> GetApiLobbies([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> Limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> MatchType, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> Skip, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="gsReq">The <see cref="CreateLobby"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        Promise<Lobby> PostApiLobbies(CreateLobby gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="id">The lobby id.</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        Promise<Lobby> Get(System.Guid id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="id">Id of the lobby</param>
        /// <param name="gsReq">The <see cref="JoinLobby"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        Promise<Lobby> Put(System.Guid id, JoinLobby gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="id">Id of the lobby</param>
        /// <param name="gsReq">The <see cref="RemoveFromLobby"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Acknowledge"/></returns>
        Promise<Acknowledge> Delete(System.Guid id, RemoveFromLobby gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="gsReq">The <see cref="JoinLobby"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        Promise<Lobby> PutPasscode(JoinLobby gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="id">Id of the lobby</param>
        /// <param name="gsReq">The <see cref="UpdateLobby"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        Promise<Lobby> PutMetadata(System.Guid id, UpdateLobby gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="id">Id of the lobby</param>
        /// <param name="gsReq">The <see cref="AddTags"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        Promise<Lobby> PutTags(System.Guid id, AddTags gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="id">Id of the lobby</param>
        /// <param name="gsReq">The <see cref="RemoveTags"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        Promise<Lobby> DeleteTags(System.Guid id, RemoveTags gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <param name="id">Id of the lobby</param>
        /// <param name="gsReq">The <see cref="CreateFederatedGameServer"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ApiLobbiesServerPostLobbyResponse"/></returns>
        Promise<ApiLobbiesServerPostLobbyResponse> PostServer(System.Guid id, CreateFederatedGameServer gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
    }
    public partial class BeamLobbyApi : IBeamLobbyApi
    {
        /// <param name="Limit"></param>
        /// <param name="MatchType"></param>
        /// <param name="Skip"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="LobbyQueryResponse"/></returns>
        public virtual Promise<LobbyQueryResponse> GetApiLobbies([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> Limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string> MatchType, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> Skip, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/lobbies";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((Skip != default(OptionalInt)) 
                        && Skip.HasValue))
            {
                gsQueries.Add(string.Concat("Skip=", Skip.Value.ToString()));
            }
            if (((Limit != default(OptionalInt)) 
                        && Limit.HasValue))
            {
                gsQueries.Add(string.Concat("Limit=", Limit.Value.ToString()));
            }
            if (((MatchType != default(OptionalString)) 
                        && MatchType.HasValue))
            {
                gsQueries.Add(string.Concat("MatchType=", MatchType.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<LobbyQueryResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<LobbyQueryResponse>);
        }
        /// <param name="gsReq">The <see cref="CreateLobby"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        public virtual Promise<Lobby> PostApiLobbies(CreateLobby gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/lobbies";
            // make the request and return the result
            return _requester.Request<Lobby>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<Lobby>);
        }
        /// <param name="id">The lobby id.</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        public virtual Promise<Lobby> Get(System.Guid id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/lobbies/{id}";
            gsUrl = gsUrl.Replace("{id}", _requester.EscapeURL(id.ToString()));
            // make the request and return the result
            return _requester.Request<Lobby>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<Lobby>);
        }
        /// <param name="id">Id of the lobby</param>
        /// <param name="gsReq">The <see cref="JoinLobby"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        public virtual Promise<Lobby> Put(System.Guid id, JoinLobby gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/lobbies/{id}";
            gsUrl = gsUrl.Replace("{id}", _requester.EscapeURL(id.ToString()));
            // make the request and return the result
            return _requester.Request<Lobby>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<Lobby>);
        }
        /// <param name="id">Id of the lobby</param>
        /// <param name="gsReq">The <see cref="RemoveFromLobby"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Acknowledge"/></returns>
        public virtual Promise<Acknowledge> Delete(System.Guid id, RemoveFromLobby gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/lobbies/{id}";
            gsUrl = gsUrl.Replace("{id}", _requester.EscapeURL(id.ToString()));
            // make the request and return the result
            return _requester.Request<Acknowledge>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<Acknowledge>);
        }
        /// <param name="gsReq">The <see cref="JoinLobby"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        public virtual Promise<Lobby> PutPasscode(JoinLobby gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/lobbies/passcode";
            // make the request and return the result
            return _requester.Request<Lobby>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<Lobby>);
        }
        /// <param name="id">Id of the lobby</param>
        /// <param name="gsReq">The <see cref="UpdateLobby"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        public virtual Promise<Lobby> PutMetadata(System.Guid id, UpdateLobby gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/lobbies/{id}/metadata";
            gsUrl = gsUrl.Replace("{id}", _requester.EscapeURL(id.ToString()));
            // make the request and return the result
            return _requester.Request<Lobby>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<Lobby>);
        }
        /// <param name="id">Id of the lobby</param>
        /// <param name="gsReq">The <see cref="AddTags"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        public virtual Promise<Lobby> PutTags(System.Guid id, AddTags gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/lobbies/{id}/tags";
            gsUrl = gsUrl.Replace("{id}", _requester.EscapeURL(id.ToString()));
            // make the request and return the result
            return _requester.Request<Lobby>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<Lobby>);
        }
        /// <param name="id">Id of the lobby</param>
        /// <param name="gsReq">The <see cref="RemoveTags"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Lobby"/></returns>
        public virtual Promise<Lobby> DeleteTags(System.Guid id, RemoveTags gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/lobbies/{id}/tags";
            gsUrl = gsUrl.Replace("{id}", _requester.EscapeURL(id.ToString()));
            // make the request and return the result
            return _requester.Request<Lobby>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<Lobby>);
        }
        /// <param name="id">Id of the lobby</param>
        /// <param name="gsReq">The <see cref="CreateFederatedGameServer"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ApiLobbiesServerPostLobbyResponse"/></returns>
        public virtual Promise<ApiLobbiesServerPostLobbyResponse> PostServer(System.Guid id, CreateFederatedGameServer gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/lobbies/{id}/server";
            gsUrl = gsUrl.Replace("{id}", _requester.EscapeURL(id.ToString()));
            // make the request and return the result
            return _requester.Request<ApiLobbiesServerPostLobbyResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<ApiLobbiesServerPostLobbyResponse>);
        }
    }
}
