
namespace Beamable.Api.Autogenerated.Matchmaking
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface IBeamMatchmakingApi
    {
        /// <summary>
        /// Fetch a match by ID.
        /// 
        /// GET call to `/api/matchmaking/matches/{id}` endpoint.
        /// </summary>
        /// <param name="id">Match ID</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Match"/></returns>
        Promise<Match> GetMatches(System.Guid id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// Query for active tickets
        /// 
        /// GET call to `/api/matchmaking/tickets` endpoint.
        /// </summary>
        /// <param name="IncludeInactive"></param>
        /// <param name="Limit"></param>
        /// <param name="Players"></param>
        /// <param name="Skip"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="TicketQueryResponse"/></returns>
        Promise<TicketQueryResponse> GetTickets([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> IncludeInactive, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> Limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string[]> Players, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> Skip, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// Create a ticket representing 1 or more players to be matched
        ///with others.
        /// 
        /// POST call to `/api/matchmaking/tickets` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="TicketReservationRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="TicketReservationResponse"/></returns>
        Promise<TicketReservationResponse> PostTickets(TicketReservationRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// Fetch a ticket by ID.
        /// 
        /// GET call to `/api/matchmaking/tickets/{id}` endpoint.
        /// </summary>
        /// <param name="id">Ticket ID</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Ticket"/></returns>
        Promise<Ticket> GetTickets(System.Guid id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// Cancel a pending ticket. If no ticket with the id exists, this will
        ///still return a 204.
        /// 
        /// DELETE call to `/api/matchmaking/tickets/{id}` endpoint.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ApiMatchmakingTicketsDeleteTicketResponse"/></returns>
        Promise<ApiMatchmakingTicketsDeleteTicketResponse> DeleteTickets(System.Guid id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
    }
    public partial class BeamMatchmakingApi : IBeamMatchmakingApi
    {
        /// <summary>
        /// Fetch a match by ID.
        /// 
        /// GET call to `/api/matchmaking/matches/{id}` endpoint.
        /// </summary>
        /// <param name="id">Match ID</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Match"/></returns>
        public virtual Promise<Match> GetMatches(System.Guid id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/matchmaking/matches/{id}";
            gsUrl = gsUrl.Replace("{id}", _requester.EscapeURL(id.ToString()));
            // make the request and return the result
            return _requester.Request<Match>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<Match>);
        }
        /// <summary>
        /// Query for active tickets
        /// 
        /// GET call to `/api/matchmaking/tickets` endpoint.
        /// </summary>
        /// <param name="IncludeInactive"></param>
        /// <param name="Limit"></param>
        /// <param name="Players"></param>
        /// <param name="Skip"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="TicketQueryResponse"/></returns>
        public virtual Promise<TicketQueryResponse> GetTickets([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<bool> IncludeInactive, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> Limit, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<string[]> Players, [System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<int> Skip, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/matchmaking/tickets";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((Players != default(OptionalArrayOfString)) 
                        && Players.HasValue))
            {
                gsQueries.Add(string.Concat("Players=", Players.Value.ToString()));
            }
            if (((IncludeInactive != default(OptionalBool)) 
                        && IncludeInactive.HasValue))
            {
                gsQueries.Add(string.Concat("IncludeInactive=", IncludeInactive.Value.ToString()));
            }
            if (((Skip != default(OptionalInt)) 
                        && Skip.HasValue))
            {
                gsQueries.Add(string.Concat("Skip=", Skip.Value.ToString()));
            }
            if (((Limit != default(OptionalInt)) 
                        && Limit.HasValue))
            {
                gsQueries.Add(string.Concat("Limit=", Limit.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<TicketQueryResponse>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<TicketQueryResponse>);
        }
        /// <summary>
        /// Create a ticket representing 1 or more players to be matched
        ///with others.
        /// 
        /// POST call to `/api/matchmaking/tickets` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="TicketReservationRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="TicketReservationResponse"/></returns>
        public virtual Promise<TicketReservationResponse> PostTickets(TicketReservationRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/matchmaking/tickets";
            // make the request and return the result
            return _requester.Request<TicketReservationResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<TicketReservationResponse>);
        }
        /// <summary>
        /// Fetch a ticket by ID.
        /// 
        /// GET call to `/api/matchmaking/tickets/{id}` endpoint.
        /// </summary>
        /// <param name="id">Ticket ID</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="Ticket"/></returns>
        public virtual Promise<Ticket> GetTickets(System.Guid id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/matchmaking/tickets/{id}";
            gsUrl = gsUrl.Replace("{id}", _requester.EscapeURL(id.ToString()));
            // make the request and return the result
            return _requester.Request<Ticket>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<Ticket>);
        }
        /// <summary>
        /// Cancel a pending ticket. If no ticket with the id exists, this will
        ///still return a 204.
        /// 
        /// DELETE call to `/api/matchmaking/tickets/{id}` endpoint.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="ApiMatchmakingTicketsDeleteTicketResponse"/></returns>
        public virtual Promise<ApiMatchmakingTicketsDeleteTicketResponse> DeleteTickets(System.Guid id, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/api/matchmaking/tickets/{id}";
            gsUrl = gsUrl.Replace("{id}", _requester.EscapeURL(id.ToString()));
            // make the request and return the result
            return _requester.Request<ApiMatchmakingTicketsDeleteTicketResponse>(Method.DELETE, gsUrl, default(object), includeAuthHeader, this.Serialize<ApiMatchmakingTicketsDeleteTicketResponse>);
        }
    }
}
