
namespace Beamable.Api.Autogenerated.Cloudsaving
{
    using Beamable.Api.Autogenerated.Models;
    using Beamable.Common.Content;
    using Beamable.Common;
    using IBeamableRequester = Beamable.Common.Api.IBeamableRequester;
    using Method = Beamable.Common.Api.Method;
    using Beamable.Common.Dependencies;
    
    public partial interface ICloudsavingApi
    {
        /// <summary>
        /// POST call to `/basic/cloudsaving/data/replace` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ReplaceObjectsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CloudsavingBasicManifest"/></returns>
        Promise<CloudsavingBasicManifest> PostDataReplace(ReplaceObjectsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// DELETE call to `/basic/cloudsaving/data` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ObjectRequests"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        Promise<EmptyResponse> DeleteData(ObjectRequests gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/basic/cloudsaving/data/downloadURL` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ObjectRequests"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="URLSResponse"/></returns>
        Promise<URLSResponse> PostDataDownloadURL(ObjectRequests gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/basic/cloudsaving/data/downloadURLFromPortal` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ObjectRequests"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="URLSResponse"/></returns>
        Promise<URLSResponse> PostDataDownloadURLFromPortal(ObjectRequests gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/basic/cloudsaving/data/move` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="PlayerBasicCloudDataRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CloudsavingBasicManifest"/></returns>
        Promise<CloudsavingBasicManifest> PutDataMove(PlayerBasicCloudDataRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/basic/cloudsaving/data/moveFromPortal` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="PlayerBasicCloudDataRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CloudsavingBasicManifest"/></returns>
        Promise<CloudsavingBasicManifest> PutDataMoveFromPortal(PlayerBasicCloudDataRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/basic/cloudsaving/data/uploadURLFromPortal` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="UploadRequestsFromPortal"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="URLSResponse"/></returns>
        Promise<URLSResponse> PostDataUploadURLFromPortal(UploadRequestsFromPortal gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// PUT call to `/basic/cloudsaving/data/commitManifest` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="UploadRequests"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CloudsavingBasicManifest"/></returns>
        Promise<CloudsavingBasicManifest> PutDataCommitManifest(UploadRequests gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// POST call to `/basic/cloudsaving/data/uploadURL` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="UploadRequests"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="URLSResponse"/></returns>
        Promise<URLSResponse> PostDataUploadURL(UploadRequests gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
        /// <summary>
        /// GET call to `/basic/cloudsaving/` endpoint.
        /// </summary>
        /// <param name="playerId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CloudsavingBasicManifest"/></returns>
        Promise<CloudsavingBasicManifest> Get([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader);
    }
    public partial class CloudsavingApi : ICloudsavingApi
    {
        /// <summary>
        /// POST call to `/basic/cloudsaving/data/replace` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ReplaceObjectsRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CloudsavingBasicManifest"/></returns>
        public virtual Promise<CloudsavingBasicManifest> PostDataReplace(ReplaceObjectsRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/cloudsaving/data/replace";
            // make the request and return the result
            return _requester.Request<CloudsavingBasicManifest>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<CloudsavingBasicManifest>);
        }
        /// <summary>
        /// DELETE call to `/basic/cloudsaving/data` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ObjectRequests"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="EmptyResponse"/></returns>
        public virtual Promise<EmptyResponse> DeleteData(ObjectRequests gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/cloudsaving/data";
            // make the request and return the result
            return _requester.Request<EmptyResponse>(Method.DELETE, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<EmptyResponse>);
        }
        /// <summary>
        /// POST call to `/basic/cloudsaving/data/downloadURL` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ObjectRequests"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="URLSResponse"/></returns>
        public virtual Promise<URLSResponse> PostDataDownloadURL(ObjectRequests gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/cloudsaving/data/downloadURL";
            // make the request and return the result
            return _requester.Request<URLSResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<URLSResponse>);
        }
        /// <summary>
        /// POST call to `/basic/cloudsaving/data/downloadURLFromPortal` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="ObjectRequests"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="URLSResponse"/></returns>
        public virtual Promise<URLSResponse> PostDataDownloadURLFromPortal(ObjectRequests gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/cloudsaving/data/downloadURLFromPortal";
            // make the request and return the result
            return _requester.Request<URLSResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<URLSResponse>);
        }
        /// <summary>
        /// PUT call to `/basic/cloudsaving/data/move` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="PlayerBasicCloudDataRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CloudsavingBasicManifest"/></returns>
        public virtual Promise<CloudsavingBasicManifest> PutDataMove(PlayerBasicCloudDataRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/cloudsaving/data/move";
            // make the request and return the result
            return _requester.Request<CloudsavingBasicManifest>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<CloudsavingBasicManifest>);
        }
        /// <summary>
        /// PUT call to `/basic/cloudsaving/data/moveFromPortal` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="PlayerBasicCloudDataRequest"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CloudsavingBasicManifest"/></returns>
        public virtual Promise<CloudsavingBasicManifest> PutDataMoveFromPortal(PlayerBasicCloudDataRequest gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/cloudsaving/data/moveFromPortal";
            // make the request and return the result
            return _requester.Request<CloudsavingBasicManifest>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<CloudsavingBasicManifest>);
        }
        /// <summary>
        /// POST call to `/basic/cloudsaving/data/uploadURLFromPortal` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="UploadRequestsFromPortal"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="URLSResponse"/></returns>
        public virtual Promise<URLSResponse> PostDataUploadURLFromPortal(UploadRequestsFromPortal gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/cloudsaving/data/uploadURLFromPortal";
            // make the request and return the result
            return _requester.Request<URLSResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<URLSResponse>);
        }
        /// <summary>
        /// PUT call to `/basic/cloudsaving/data/commitManifest` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="UploadRequests"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CloudsavingBasicManifest"/></returns>
        public virtual Promise<CloudsavingBasicManifest> PutDataCommitManifest(UploadRequests gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/cloudsaving/data/commitManifest";
            // make the request and return the result
            return _requester.Request<CloudsavingBasicManifest>(Method.PUT, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<CloudsavingBasicManifest>);
        }
        /// <summary>
        /// POST call to `/basic/cloudsaving/data/uploadURL` endpoint.
        /// </summary>
        /// <param name="gsReq">The <see cref="UploadRequests"/> instance to use for the request</param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="URLSResponse"/></returns>
        public virtual Promise<URLSResponse> PostDataUploadURL(UploadRequests gsReq, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/cloudsaving/data/uploadURL";
            // make the request and return the result
            return _requester.Request<URLSResponse>(Method.POST, gsUrl, Beamable.Serialization.JsonSerializable.ToJson(gsReq), includeAuthHeader, this.Serialize<URLSResponse>);
        }
        /// <summary>
        /// GET call to `/basic/cloudsaving/` endpoint.
        /// </summary>
        /// <param name="playerId"></param>
        /// <param name="includeAuthHeader">By default, every request will include an authorization header so that the request acts on behalf of the current user. When the includeAuthHeader argument is false, the request will not include the authorization header for the current user.</param>
        /// <returns>A promise containing the <see cref="CloudsavingBasicManifest"/></returns>
        public virtual Promise<CloudsavingBasicManifest> Get([System.Runtime.InteropServices.DefaultParameterValueAttribute(null)] [System.Runtime.InteropServices.OptionalAttribute()] Beamable.Common.Content.Optional<long> playerId, [System.Runtime.InteropServices.DefaultParameterValueAttribute(true)] [System.Runtime.InteropServices.OptionalAttribute()] bool includeAuthHeader)
        {
            string gsUrl = "/basic/cloudsaving/";
            string gsQuery = "?";
            System.Collections.Generic.List<string> gsQueries = new System.Collections.Generic.List<string>();
            if (((playerId != default(OptionalLong)) 
                        && playerId.HasValue))
            {
                gsQueries.Add(string.Concat("playerId=", playerId.Value.ToString()));
            }
            if ((gsQueries.Count > 0))
            {
                gsQuery = string.Concat(gsQuery, string.Join("&", gsQueries));
                gsUrl = string.Concat(gsUrl, gsQuery);
            }
            // make the request and return the result
            return _requester.Request<CloudsavingBasicManifest>(Method.GET, gsUrl, default(object), includeAuthHeader, this.Serialize<CloudsavingBasicManifest>);
        }
    }
}
