using Beamable.Common.Content;
using System.Collections.Generic;

namespace Beamable.Common.Api.Announcements
{
	public abstract class AbsAnnouncementsApi : IAnnouncementsApi
	{
		protected readonly Beamable.Api.Autogenerated.Announcements.IAnnouncementsApi AnnouncementsApi;
		public IUserContext Ctx { get; }

		protected AbsAnnouncementsApi(IUserContext ctx, Beamable.Api.Autogenerated.Announcements.IAnnouncementsApi announcementsApi)
		{
			
			Ctx = ctx;
			AnnouncementsApi = announcementsApi;
		}


		public Promise<EmptyResponse> MarkRead(string id)
		{
			return MarkRead(new List<string> { id });
		}

		public virtual Promise<EmptyResponse> MarkRead(List<string> ids)
		{
			return AnnouncementsApi.ObjectPutRead(Ctx.UserId,
				new Beamable.Api.Autogenerated.Models.AnnouncementRequest() { announcements = new OptionalArrayOfString(ids) }).Map(_ => new EmptyResponse());
		}

		public Promise<EmptyResponse> MarkDeleted(string id)
		{
			return MarkDeleted(new List<string> { id });
		}

		public virtual Promise<EmptyResponse> MarkDeleted(List<string> ids)
		{
			return AnnouncementsApi.ObjectDelete(Ctx.UserId,
				new Beamable.Api.Autogenerated.Models.AnnouncementRequest() { announcements = new OptionalArrayOfString(ids) }).Map(_ => new EmptyResponse());
		}

		public Promise<EmptyResponse> Claim(string id)
		{
			return Claim(new List<string> { id });
		}

		public virtual Promise<EmptyResponse> Claim(List<string> ids)
		{
			return AnnouncementsApi
				.ObjectPostClaim(Ctx.UserId,
					new Beamable.Api.Autogenerated.Models.AnnouncementRequest { announcements = new OptionalArrayOfString(ids) })
				.Map(_ => new EmptyResponse());
		}

		public abstract Promise<AnnouncementQueryResponse> GetCurrent(string scope = "");
	}
}
