name: PR Build

on:
  pull_request:
    branches:
      - 'main'
      - 'staging'
      - 'productio*'
    paths-ignore:
      - 'rfc/**'

env:
  DOCKER_REGISTRY: ghcr.io

jobs:
  baseNuget:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    concurrency:
      group: base-microservice-nuget-${{ github.head_ref }}-${{ matrix.dotnet-version }}
      cancel-in-progress: true
    strategy:
      max-parallel: 1
      matrix:
        dotnet-version: ['9.0.x' ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Build a Nuget package
        run: dotnet pack ./microservice/microservice -c Release -o ./nuget-build -p:PackageVersion=0.0.0 /p:CombinedVersion=0.0.0
      - uses: actions/upload-artifact@v4
        with:
          name: Microservice Nuget Package
          path: ./nuget-build
          retention-days: 3
  testMicroserviceBaseImage:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    concurrency:
      group: base-image-tests-${{ github.head_ref }}-${{ matrix.dotnet-version }}
      cancel-in-progress: true
    strategy:
      max-parallel: 1
      matrix:
        dotnet-version: ['9.0.x' ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Install dependencies
        run: dotnet restore microservice/microserviceTests
      - name: Build
        run: dotnet build --configuration Release --no-restore microservice/microserviceTests
      - name: Test
        run: dotnet test --configuration Release --no-restore microservice/microserviceTests
  testCli:
    timeout-minutes: 30
    runs-on: ${{ matrix.runners }}
    concurrency:
      group: cli-pr-${{ github.sha }}-${{ matrix.dotnet-version }}-${{matrix.runners}}
      cancel-in-progress: true
    strategy:
      max-parallel: 2
      matrix:
        dotnet-version: ['9.0.x' ]
        runners: [ windows-latest, ubuntu-latest ]
    env:
      BEAM_DOCKER_WINDOWS_CONTAINERS: ${{ matrix.runners == 'windows-latest' && '1' || '0' }}
    steps:
      - name: Check Docker 
        run: docker version
      - name: Check concurrency
        run: echo 'cli-pr-${{ github.sha }}-${{ matrix.dotnet-version }}-${{matrix.runners}}'
      - uses: actions/checkout@v4
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Install local packages
        working-directory: ./
        shell: bash
        run: |
          ./setup.sh
          ./dev.sh
      - name: Check CLI
        run: |
          cat ./build-number.txt
          beam --version
      - name: Install dependencies
        run: dotnet restore cli/tests
      - name: Build
        run: dotnet build --configuration Release --no-restore cli/tests -p:BeamOverrideVersionWithLocalDev=true
      - name: Test
        run: dotnet test --configuration Release --no-build cli/tests -p:BeamOverrideVersionWithLocalDev=true
  testAllModes:
    timeout-minutes: 30
    name: Tests ${{ matrix.unityVersion }} ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    concurrency:
      group: unity-tests-${{ matrix.unityVersion }}-${{ matrix.testMode }}-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - client
        testMode:
          - playmode
          - editmode
        unityVersion:
          - 2021.3.29f1
          - 2022.3.7f1
          - 6000.0.37f1
        include:
          - unityVersion: 2022.3.7f1
            unityEmailOverride: UNITY_EMAIL_DEVOPS
            unityPasswordOverride: UNITY_PASSWORD_DEVOPS
            unitySerialOverride: UNITY_SERIAL_DEVOPS
          - unityVersion: 2021.3.29f1
            unityEmailOverride: UNITY_EMAIL_BUILD
            unityPasswordOverride: UNITY_PASSWORD_BUILD
            unitySerialOverride: UNITY_SERIAL_BUILD
          - unityVersion: 6000.0.37f1
            unityEmailOverride: UNITY_EMAIL_BUILD
            unityPasswordOverride: UNITY_PASSWORD_BUILD
            unitySerialOverride: UNITY_SERIAL_BUILD
    steps:
      - uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Unity Mapped Values
        id: unityMap
        env: 
          UNITY_MODE: >-
            ${{ fromJson('{
              "playmode": "player",
              "editmode": "editor"
            }')[matrix.testMode] }}
        run: |
          echo "UNITY_MODE=$UNITY_MODE" >> "$GITHUB_OUTPUT"


      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      - name: Build and Install BEAM CLI 
        working-directory: ./
        run: |
          ./setup.sh
          SKIP_GENERATION=true ./dev.sh
        env:
          PROJECT_DIR_OVERRIDE: ${{ github.workspace }}/NugetBuildDir/
      - name: Check Beam CLI
        run: |
          pwd
          ls -a
          beam version
      - name: Apply Nuget Version to Unity SDK
        run: |
          ReleaseSharedCode=true dotnet build ./cli/beamable.common -t:CopyCodeToUnity
          ReleaseSharedCode=true dotnet build ./cli/beamable.server.common -t:CopyCodeToUnity
      - name: Cache Unity Folders
        uses: actions/cache@v3
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-2-${{ matrix.projectPath }}-${{ matrix.unityVersion }}
          restore-keys: |
            Library-2-${{ matrix.projectPath }}-${{ matrix.unityVersion }}
      - uses: game-ci/unity-test-runner@v4
        id: tests
        timeout-minutes: 30
        env:
          BEAM_UNITY_TEST_CI: "true"
          UNITY_EMAIL: ${{ secrets[matrix.unityEmailOverride] || secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets[matrix.unityPasswordOverride] || secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets[matrix.unitySerialOverride] || secrets.UNITY_SERIAL }}
        with:
          customImage: ${{ env.DOCKER_REGISTRY }}/beamable/editor:ubuntu-${{ matrix.unityVersion }}-base-3.1.0
          customParameters: -warnaserror+
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          unityVersion: ${{ matrix.unityVersion }}
          artifactsPath: ${{ matrix.testMode }}-${{ matrix.unityVersion }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.unityVersion }} ${{ matrix.testMode }} Test Results


  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    concurrency:
      group: device-builds-${{ matrix.targetPlatform }}-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - Android
          - StandaloneWindows
          - iOS
          - StandaloneOSX
        unityVersion:
          - 6000.0.37f1
        projectPath:
          - client
        include:
          - targetPlatform: Android
            unityEmailOverride: UNITY_EMAIL_DEVOPS
            unityPasswordOverride: UNITY_PASSWORD_DEVOPS
            unitySerialOverride: UNITY_SERIAL_DEVOPS
          - targetPlatform: StandaloneOSX
            unityEmailOverride: UNITY_EMAIL_BUILD
            unityPasswordOverride: UNITY_PASSWORD_BUILD
            unitySerialOverride: UNITY_SERIAL_BUILD
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      
      - name: Create Unity Mapped Values
        id: unityMap
        env: 
          UNITY_PLATFORM: >-
            ${{ fromJson('{
              "Android": "android",
              "StandaloneWindows": "windows-mono",
              "iOS": "ios",
              "StandaloneOSX": "mac-mono"
            }')[matrix.targetPlatform] }}
        run: |
          echo "UNITY_PLATFORM=$UNITY_PLATFORM" >> "$GITHUB_OUTPUT"


      - name: Setup .NET Core SDK 
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Install BEAM CLI 
        working-directory: ./
        run: |
          ./setup.sh
          SKIP_GENERATION=true ./dev.sh
        env:
          PROJECT_DIR_OVERRIDE: ${{ github.workspace }}/NugetBuildDir/
      - name: Check Beam CLI
        run: |
          beam version
      - name: Apply Nuget Version to Unity SDK
        run: |
          ReleaseSharedCode=true dotnet build ./cli/beamable.common -t:CopyCodeToUnity
          ReleaseSharedCode=true dotnet build ./cli/beamable.server.common -t:CopyCodeToUnity
      
      - name: Prepare Config-Defaults
        run: |
          chmod +x ./build/create_config_defaults.sh
          ./build/create_config_defaults.sh
        shell: bash
      - name: Cache Unity Folders
        uses: actions/cache@v3
        with:
          path: |
            ${{ matrix.projectPath }}/Library
            ${{ matrix.projectPath }}/Temp
            ${{ matrix.projectPath }}/obj
          key: Library-2-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-2-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
      - name: Clean the build directory
        continue-on-error: true
        run: |
          rm -rf /github/workspace/dist
        shell: bash
      - name: Free Disk Space for Android
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker images -q) || true
          df -h
      - uses: game-ci/unity-builder@v4
        timeout-minutes: 60
        env:
          UNITY_EMAIL: ${{ secrets[matrix.unityEmailOverride] || secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets[matrix.unityPasswordOverride] || secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets[matrix.unitySerialOverride] || secrets.UNITY_SERIAL }}
        with:
          customImage: ${{ env.DOCKER_REGISTRY }}/beamable/editor:ubuntu-${{ matrix.unityVersion }}-${{steps.unityMap.outputs.UNITY_PLATFORM}}-3.1.0
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: ${{ matrix.unityVersion }}
          projectPath: ${{ matrix.projectPath }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          versioning: Custom
          version: 1.2.0
          androidVersionCode: ${{ github.run_number }}
          allowDirtyBuild: true
          buildsPath: dist
          buildMethod: BuildSampleProject.Development

