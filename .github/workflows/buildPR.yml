name: PR Build

on:
  pull_request:
    branches:
      - 'main'
      - 'staging'
      - 'production'
    # paths:
    #   - 'client/**'
    #   - 'microservice/**'
    #   - 'cli/**'

jobs:
  lint-markdown:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    concurrency:
      group: lint-markdown-${{ github.head_ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v2
      - name: Lint
        uses: DavidAnson/markdownlint-cli2-action@v9
        with:
          command: config
          globs: |
            client/client.markdownlint.jsonc
            client/Packages/**/*.md
  baseNuget:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    concurrency:
      group: base-microservice-nuget-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        dotnet-version: ['6.0.x' ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Build a Nuget package
        run: dotnet pack ./microservice/microservice -c Release -o ./nuget-build -p:NuspecFile=Microservice.nuspec -p:PackageVersion=0.0.0 /p:CombinedVersion=0.0.0
      - uses: actions/upload-artifact@v2
        with:
          name: Microservice Nuget Package
          path: ./nuget-build
          retention-days: 3
  testMicroserviceBaseImage:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    concurrency:
      group: base-image-tests-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        dotnet-version: ['6.0.x' ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Install dependencies
        run: dotnet restore microservice/microserviceTests
      - name: Build
        run: dotnet build --configuration Release --no-restore microservice/microserviceTests
      - name: Test
        run: dotnet test --configuration Release --no-restore microservice/microserviceTests
  testCli:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    concurrency:
      group: cli-tests-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        dotnet-version: ['6.0.x' ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Install dependencies
        run: dotnet restore cli/tests
      - name: Build
        run: dotnet build --configuration Release --no-restore cli/tests
      - name: Test
        run: dotnet test --configuration Release --no-restore cli/tests
  testAllModes:
    timeout-minutes: 30
    name: Tests ${{ matrix.unityVersion }} ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    concurrency:
      group: unity-tests-${{ matrix.unityVersion }}-${{ matrix.testMode }}-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - client
        testMode:
          - playmode
          - editmode
        unityVersion:
          - 2020.3.19f1
          - 2021.3.2f1
          - 2022.2.11f1
        include:
          - unityVersion: 2020.3.19f1
            unityEmailOverride: UNITY_EMAIL_DEVOPS
            unityPasswordOverride: UNITY_PASSWORD_DEVOPS
            unitySerialOverride: UNITY_SERIAL_DEVOPS
          - unityVersion: 2021.3.2f1
            unityEmailOverride: UNITY_EMAIL_BUILD
            unityPasswordOverride: UNITY_PASSWORD_BUILD
            unitySerialOverride: UNITY_SERIAL_BUILD
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Cache Docker Layers
        uses: actions/cache@v2
        id: cache_docker
        with:
          path: ./docker-cache
          key: Docker-gzipped-${{ matrix.unityVersion }}
          restore-keys: |
            Docker-gzipped-${{ matrix.unityVersion }}
      - name: Load Docker Image If Exits
        continue-on-error: true
        if: ${{ steps.cache_docker.outputs.cache-hit }}
        run: |
          chmod +x ./build/prepare_base_image.sh
          UNITY_VERSION=${{ matrix.unityVersion }} ./build/prepare_base_image.sh
        shell: bash
      - name: Cache Unity Folders
        uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}
      - uses: game-ci/unity-test-runner@v2
        id: tests
        timeout-minutes: 30
        env:
          UNITY_EMAIL: ${{ secrets[matrix.unityEmailOverride] || secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets[matrix.unityPasswordOverride] || secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets[matrix.unitySerialOverride] || secrets.UNITY_SERIAL }}
        with:
          customParameters: -warnaserror+
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          unityVersion: ${{ matrix.unityVersion }}
          artifactsPath: ${{ matrix.testMode }}-${{ matrix.unityVersion }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.unityVersion }} ${{ matrix.testMode }} Test Results
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results for ${{ matrix.unityVersion }} ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
          retention-days: 3
      - name: Save Docker Image If Exits
        if: ${{ !steps.cache_docker.outputs.cache-hit }}
        run: |
          chmod +x ./build/save_base_image.sh
          UNITY_VERSION=${{ matrix.unityVersion }} ./build/save_base_image.sh
        shell: bash

  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    concurrency:
      group: device-builds-${{ matrix.targetPlatform }}-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - WebGL
          - Android
          - StandaloneWindows
          - iOS
          - StandaloneOSX
        unityVersion:
          - 2021.3.2f1
        projectPath:
          - client
        include:
          - targetPlatform: Android
            unityEmailOverride: UNITY_EMAIL_DEVOPS
            unityPasswordOverride: UNITY_PASSWORD_DEVOPS
            unitySerialOverride: UNITY_SERIAL_DEVOPS
          - targetPlatform: StandaloneOSX
            unityEmailOverride: UNITY_EMAIL_BUILD
            unityPasswordOverride: UNITY_PASSWORD_BUILD
            unitySerialOverride: UNITY_SERIAL_BUILD
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Prepare Config-Defaults
        run: |
          chmod +x ./build/create_config_defaults.sh
          ./build/create_config_defaults.sh
        shell: bash
      - name: Cache Docker Layers
        uses: actions/cache@v2
        id: cache_docker
        with:
          path: ./docker-cache
          key: Docker-gzipped-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Docker-gzipped-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
      - name: Load Docker Image If Exits
        if: ${{ steps.cache_docker.outputs.cache-hit }}
        continue-on-error: true
        run: |
          chmod +x ./build/prepare_base_image.sh
          UNITY_VERSION=${{ matrix.unityVersion }} TARGET_PLATFORM=${{matrix.targetPlatform}} ./build/prepare_base_image.sh
        shell: bash
      - name: Cache Unity Folders
        uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.projectPath }}/Library
            ${{ matrix.projectPath }}/Temp
            ${{ matrix.projectPath }}/obj
          key: Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
      - name: Clean the build directory
        continue-on-error: true
        run: |
          rm -rf /github/workspace/dist
        shell: bash
      - uses: game-ci/unity-builder@v2.0.4
        timeout-minutes: 30
        env:
          UNITY_EMAIL: ${{ secrets[matrix.unityEmailOverride] || secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets[matrix.unityPasswordOverride] || secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets[matrix.unitySerialOverride] || secrets.UNITY_SERIAL }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: ${{ matrix.unityVersion }}
          projectPath: ${{ matrix.projectPath }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          versioning: Custom
          version: 1.2.0
          androidVersionCode: ${{ github.run_number }}
          allowDirtyBuild: true
          buildsPath: dist
          buildMethod: BuildSampleProject.Development

      - name: Save Docker Image If Exits
        if: ${{ !steps.cache_docker.outputs.cache-hit }}
        run: |
          chmod +x ./build/save_base_image.sh
          UNITY_VERSION=${{ matrix.unityVersion }} TARGET_PLATFORM=${{matrix.targetPlatform}} ./build/save_base_image.sh
        shell: bash
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.targetPlatform != 'WebGL' }}
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: dist/**
          retention-days: 3
      - name: upload
        if: ${{ matrix.targetPlatform == 'WebGL' }}
        run: AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} AWS_REGION=us-west-2 aws s3 cp --recursive ./dist/WebGL s3://${{secrets.AWS_BUCKET_BUILDS}}/uploads/${{github.sha}} --acl public-read
      - uses: github-actions-up-and-running/pr-comment@v1.0.1
        if: ${{ matrix.targetPlatform == 'WebGL' && github.event_name == 'pull_request' }}
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: Have a ${{ matrix.targetPlatform }} build, friend. [${{github.sha}}](https://beamable-product-github-builds.s3.us-west-2.amazonaws.com/uploads/${{github.sha}}/index.html)