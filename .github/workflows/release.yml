name: Release Custom SDK and CLI 

on:
  workflow_dispatch:
    inputs:
      commit:
        type: string
        description: Commit hash to deploy
        default: main
      dryRun:
        type: boolean
        description: When true, no publish will happen
        required: true
        default: false

run-name: Release Custom ${{ inputs.commit }} by @${{ github.actor }}
jobs:
  nuget:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    concurrency:
      group: release-nuget
      cancel-in-progress: true
    steps:
      - name: review options
        run: |
          echo dryRun=${{ inputs.dryRun }}
          echo commit=${{ inputs.commit }}
         
      - uses: actions/checkout@v4
        with: 
          ref: ${{ github.event.inputs.commit }}

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: https://nexus.beamable.com/nexus/content/repositories/unity-dev
        
      - name: Install JQ
        run: |
          sudo apt-get update
          sudo apt-get install jq
          jq --version

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.1
          cache-dependency-path: ./otel-collector/beamable-collector/go.sum

      - name: Build Otel Collector
        working-directory: ./otel-collector
        run: |
          OUTPUT_DIRECTORY="$(pwd)/../otel-bin" bash ./build.sh

      - name: Install CLI
        working-directory: ./
        run: |
          bash ./setup.sh
          bash ./dev.sh 

      - name: Check CLI
        run: beam version

      - name: Get Version Number 
        run: beam version construct 0 0 0 --nightly > ./version.txt
      
      - name: Store version number as output
        id: version
        env: 
          BUILD_ENV: dev
        run: |
          echo "VERSION=$(cat version.txt | jq -r .data.versionString)" >> "$GITHUB_OUTPUT"
          echo "VERSION_PREFIX=$(cat version.txt | jq -r .data.versionPrefix)" >> "$GITHUB_OUTPUT"
          echo "VERSION_SUFFIX=$(cat version.txt | jq -r .data.versionSuffix)" >> "$GITHUB_OUTPUT"
          echo "BUILD_ENV=$BUILD_ENV" >> "$GITHUB_OUTPUT"

      - name: review version
        run: |
          echo version=${{ steps.version.outputs.VERSION }}
          echo version prefix=${{ steps.version.outputs.VERSION_PREFIX }}
          echo version suffix=${{ steps.version.outputs.VERSION_SUFFIX }}
          echo build-env=${{steps.version.outputs.BUILD_ENV}}

      - name: Publish Nuget Packages
        run: sh ./build/bin/release-nuget.sh
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
          VERSION_PREFIX: ${{ steps.version.outputs.VERSION_PREFIX }}
          VERSION_SUFFIX: ${{ steps.version.outputs.VERSION_SUFFIX }}
          DRY_RUN: ${{ inputs.dryRun }}
          NUGET_TOOLS_KEY: ${{ secrets.NUGET_TOOLS_KEY }}

      - name: Compress Collector Files
        working-directory: otel-bin
        run: find . -type f ! -name '*.gz' -exec gzip -k -9 {} \;

      # Push the collector builds to s3 so that they can be downloaded by distros later
      - name: Upload Collector to S3
        working-directory: otel-bin
        run: |
          AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} AWS_REGION=us-west-2 aws s3 cp --recursive ./ s3://beamable-otel-collector-ch/version/${{ steps.version.outputs.VERSION }}  --exclude "*" --include "*.gz" --acl public-read
      
      # Invalidate the CDN for collector builds
      - name: Prepare Cloudfront Invalidation 
        run: |
          CLOUD_DISTRO=E3S54OWVMS4PQH
          CALLER_REFERENCE=$(date -u +"%Y%m%d%H%M%S")
          echo '{"DistributionId":"'${CLOUD_DISTRO}'","InvalidationBatch":{"CallerReference":"'${CALLER_REFERENCE}'","Paths":{"Quantity":1,"Items":["/${{ steps.setTriggerContext.outputs.triggerContext }}/*"]}}}' >> cloudfront-invalidation.json
      - name: Preview Cloudfront Invalidation 
        run: |
          cat cloudfront-invalidation.json
      - name: Do Cloudfront Invalidation
        run: AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} AWS_REGION=us-west-2 aws cloudfront create-invalidation --cli-input-json file://cloudfront-invalidation.json

      - name: Prepare Unity Env
        run: sh ./build/bin/modify-unity-files.sh
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
          ENVIRONMENT: ${{steps.version.outputs.BUILD_ENV}}
      
      - name: Apply Nuget Version
        run: jq --arg nextVersion ${{ steps.version.outputs.VERSION }} '.nugetPackageVersion = $nextVersion' ./client/Packages/com.beamable/Runtime/Environment/Resources/versions-default.json > localtmpfile && mv localtmpfile ./client/Packages/com.beamable/Runtime/Environment/Resources/versions-default.json

      - name: Review Unity version-default file
        run: |
          cat ./client/Packages/com.beamable/Runtime/Environment/Resources/versions-default.json

      - name: Copy Nuget Code Over
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: 10
          retry_wait_seconds: 60
          retry_on: error
          command: beam unity download-all-nuget-packages ./client --logs v

      - name: Prepare Unity Samples
        run: sh ./../../../build/bin/prepare-samples.sh
        working-directory: ./client/Packages/com.beamable/
      
      - name: Update UPM Versions (com.beamable)
        run: npm version ${{ steps.version.outputs.VERSION }}
        working-directory: ./client/Packages/com.beamable/

      - name: Update UPM Version (com.beamable.server)
        run: npm version ${{ steps.version.outputs.VERSION }}
        working-directory: ./client/Packages/com.beamable.server/

      - name: Review Unity SDK Files
        run: |
          ls ./client/Packages/com.beamable/Runtime/Environment/Resources
          cat client/Packages/com.beamable/Runtime/Environment/Resources/env-default.json
          cat client/Packages/com.beamable.server/package.json
          ls ./client/Packages/com.beamable
          ls ./client/Packages/com.beamable/Samples~
          cat client/Packages/com.beamable/package.json

      - name: Release com.beamable UPM Package
        if: ${{ inputs.dryRun == false }}
        run: npm publish
        working-directory: ./client/Packages/com.beamable
        env: 
          NODE_AUTH_TOKEN: ${{ secrets.NEXUS_NPM_AUTH }}
          NPM_AUTH: ${{secrets.NEXUS_NPM_AUTH}}

      - name: Release com.beamable.server UPM Package
        if: ${{ inputs.dryRun == false }}
        run: npm publish
        working-directory: ./client/Packages/com.beamable.server
        env: 
          NODE_AUTH_TOKEN: ${{ secrets.NEXUS_NPM_AUTH }}
          NPM_AUTH: ${{secrets.NEXUS_NPM_AUTH}}
