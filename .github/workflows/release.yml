name: Release

on:
  workflow_dispatch:
    inputs:
      commit:
        type: string
        description: Commit hash to deploy
        default: main
      major:
        type: number
        description: Major version number, X.0.0
        required: true
        default: 0
      minor:
        type: number
        description: Minor version number, 0.X.0
        required: true
        default: 0
      patch:
        type: number
        description: Patch version number, 0.0.X
        required: true
        default: 0
      rcNumber:
        type: number
        description: Rc version number, if required, 0.0.0-PREVIEW.RCX
        required: false
        default: 0
      releaseType:
        type: choice
        description: What type of release is this?
        required: true
        options:
          - nightly
          - rc
          - exp
          - production
      dryRun:
        type: boolean
        description: When true, no publish will happen
        required: true
        default: true
      releaseUnitySdk:
        type: boolean
        description: When true, the Unity SDK packages com.beamable and com.beamable.server will be released.
        required: true
        default: true

run-name: Release ${{ inputs.releaseType }} ${{ inputs.major }}.${{ inputs.minor }}.${{ inputs.patch }}.${{ inputs.rcNumber }} by @${{ github.actor }}
jobs:
  nuget:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    concurrency:
      group: release-nuget
      cancel-in-progress: true
    steps:
      - name: review options
        run: |
          echo dryRun=${{ inputs.dryRun }}
          echo commit=${{ inputs.commit }}
          echo major=${{ inputs.major }}
          echo minor=${{ inputs.minor }}
          echo patch=${{ inputs.patch }}
          echo rc=${{ inputs.rcNumber }}
          echo releaseType=${{ inputs.releaseType }}
          echo releaseUnitySdk=${{ inputs.releaseUnitySdk }}
         
      - uses: actions/checkout@v4
        with: 
          ref: ${{ github.event.inputs.commit }}
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Install JQ
        run: |
          sudo apt-get update
          sudo apt-get install jq
          jq --version
      - name: Install CLI
        run: |
          cd ./cli/cli
          sh ./install.sh
      - name: Check CLI
        run: beam version

      - name: Get Version Number (Nightly)
        if: ${{ inputs.releaseType == 'nightly' }} 
        run: beam version construct 0 0 0 --nightly > version.txt
      - name: Get Version Number (RC)
        if: ${{ inputs.releaseType == 'rc' }} 
        run: beam version construct ${{ inputs.major }} ${{ inputs.minor }} ${{ inputs.patch }} --rc ${{ inputs.rcNumber }} > version.txt
      - name: Get Version Number (Exp)
        if: ${{ inputs.releaseType == 'exp' }} 
        run: beam version construct ${{ inputs.major }} ${{ inputs.minor }} ${{ inputs.patch }} --exp ${{ inputs.rcNumber }} > version.txt
      - name: Get Version Number (Prod)
        if: ${{ inputs.releaseType == 'prod' }} 
        run: beam version construct ${{ inputs.major }} ${{ inputs.minor }} ${{ inputs.patch }} --prod > version.txt
      
      - name: Store version number as output
        id: version
        run: |
          echo "VERSION=$(cat version.txt | jq -r .data.versionString)" >> "$GITHUB_OUTPUT"
          echo "VERSION_PREFIX=$(cat version.txt | jq -r .data.versionPrefix)" >> "$GITHUB_OUTPUT"
          echo "VERSION_SUFFIX=$(cat version.txt | jq -r .data.versionSuffix)" >> "$GITHUB_OUTPUT"

      - name: review version
        run: |
          echo version=${{ steps.version.outputs.VERSION }}
          echo version prefix=${{ steps.version.outputs.VERSION_PREFIX }}
          echo version suffix=${{ steps.version.outputs.VERSION_SUFFIX }}

      - name: Prepare Unity SDK
        if: ${{ inputs.releaseUnitySdk == true }}
        run: sh ./build/bin/modify-unity-files.sh
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
          ENVIRONMENT: >
            ${{ fromJson('{
              "nightly": "dev",
              "rc": "staging",
              "exp": "staging",
              "production": "prod"}')[github.event.inputs.releaseType] }}
      - name: Review Unity SDK Files
        if: ${{ inputs.releaseUnitySdk == true }}
        run: |
          ls ./client/Packages/com.beamable/Runtime/Environment/Resources
          cat client/Packages/com.beamable/Runtime/Environment/Resources/env-default.json
          cat client/Packages/com.beamable.server/package.json

      # - name: Prepare Microservice Dependencies
      #   run: sh ./build/docker/scripts/build-microservice-deps.sh
      #   env:
      #     VERSION: ${{ steps.version.outputs.VERSION }}
      # - name: Publish Nuget Packages
      #   run: sh ./build/docker/scripts/build-cli.sh
      #   env:
      #     VERSION: ${{ steps.version.outputs.VERSION }}
      #     VERSION_PREFIX: ${{ steps.version.outputs.VERSION_PREFIX }}
      #     VERSION_SUFFIX: ${{ steps.version.outputs.VERSION_SUFFIX }}
      #     DRY_RUN: ${{ inputs.dryRun }}
      #     NUGET_TOOLS_KEY: ${{ secrets.NUGET_TOOLS_KEY }}

      # - name: Create Release
      #   id: create_release
      #   if: ${{ inputs.releaseType != 'nightly' && inputs.dryRun == false }} 
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      #   with:
      #     tag_name: v${{ steps.version.outputs.VERSION }}
      #     release_name: Nuget ${{ steps.version.outputs.VERSION }}
      #     body: |
      #       Release ${{ steps.version.outputs.VERSION }}
      #     draft: true
      #     prerelease: false