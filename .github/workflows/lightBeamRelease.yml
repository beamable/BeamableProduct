name: LightBeam Release

on:
  push:
    tags:
      - '*'
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC (adjust to your desired schedule)
  workflow_dispatch:
    inputs:
      customTag:
        description: 'Custom tag for manual dispatch'
        required: false
env:
  DOCKER_REGISTRY: ghcr.io

jobs:

  build:
    name: Lightbeams
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - WebGL
        unityVersion:
          - 2022.3.7f1
        projectPath:
          - client
    steps:
      - name: Check if triggered by cron or manual
        id: isCronOrManual
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "triggered=cron" >> $GITHUB_OUTPUT
            datestring=nightly-$(date -u +"%Y%m%d%H%M%S")
            echo "customTag=${datestring}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "triggered=manual" >> $GITHUB_OUTPUT
            customTag="${{ github.event.inputs.customTag }}"
            echo "customTag=${customTag}" >> $GITHUB_OUTPUT
          else
            echo "triggered=tag" >> $GITHUB_OUTPUT
            tagname="${{ github.ref }}"
            echo "customTag=${tagname/refs\/tags\//}" >> $GITHUB_OUTPUT
          fi
      - name: Set trigger context
        id: setTriggerContext
        run: |
          if [[ "${{ steps.isCronOrManual.outputs.triggered }}" == "cron" ]]; then
            triggerContext="nightly"
          elif [[ "${{ steps.isCronOrManual.outputs.triggered }}" == "manual" ]]; then
            triggerContext="manual"
          elif [[ "${{ steps.isCronOrManual.outputs.customTag }}" == *"PREVIEW"* ]]; then
            triggerContext="preview"
          else
            triggerContext="production"
          fi
          echo "triggerContext=${triggerContext}" >> $GITHUB_OUTPUT

      - name: Display Outputs
        run: |
          if [[ "${{ steps.isCronOrManual.outputs.triggered }}" == "cron" ]]; then
            echo "Nightly Build Date String: ${{ steps.isCronOrManual.outputs.customTag }}"
          elif [[ "${{ steps.isCronOrManual.outputs.triggered }}" == "manual" ]]; then
            echo "Custom Tag for Manual Dispatch: ${{ steps.isCronOrManual.outputs.customTag }}"
          else
            echo "Tag Pushed: ${{ steps.isCronOrManual.outputs.customTag }}"
          fi
      - name: Display Trigger Context
        run: echo ${{steps.setTriggerContext.outputs.triggerContext}}
      - name: Display Custom Tag
        run: echo ${{ steps.isCronOrManual.outputs.customTag}}
      - name: Display Triggered Type
        run: echo ${{ steps.isCronOrManual.outputs.triggered}}
      - uses: actions/checkout@v4
        name: Checkout Main
        if: ${{ steps.isCronOrManualOrTag.outputs.triggered != 'tag' }}
        with:
          fetch-depth: 0
          lfs: true
          ref: main
      - uses: actions/checkout@v4
        name: Checkout Tag
        if: ${{ steps.isCronOrManualOrTag.outputs.triggered == 'tag' }}
        with:
          fetch-depth: 0
          lfs: true
          ref: ${{ steps.isCronOrManualOrTag.outputs.tagname }}
        
      - name: Prepare Config-Defaults
        run: |
          chmod +x ./build/create_config_defaults.sh
          ./build/create_config_defaults.sh
        shell: bash
      
      - name: Cache Unity Folders
        uses: actions/cache@v3
        with:
          path: |
            ${{ matrix.projectPath }}/Library
            ${{ matrix.projectPath }}/Temp
            ${{ matrix.projectPath }}/obj
          key: Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
      - name: Clean the build directory
        continue-on-error: true
        run: |
          rm -rf /github/workspace/dist
        shell: bash

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: game-ci/unity-builder@v4
        timeout-minutes: 60
        env:
          UNITY_EMAIL: ${{ secrets[matrix.unityEmailOverride] || secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets[matrix.unityPasswordOverride] || secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets[matrix.unitySerialOverride] || secrets.UNITY_SERIAL }}
        with:
          customImage: ${{ env.DOCKER_REGISTRY }}/beamable/editor:ubuntu-${{ matrix.unityVersion }}-webgl-3.1.0
          customParameters: -LIGHTBEAM_BUILD_PATH dist
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: ${{ matrix.unityVersion }}
          projectPath: ${{ matrix.projectPath }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          allowDirtyBuild: true
          buildMethod: LightBeamBuilds.BuildAll

      - name: Check Asset
        continue-on-error: true
        run: |
          ls -a ${{ matrix.projectPath }}/dist
        shell: bash
      - name: upload named version
        run: AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} AWS_REGION=us-west-2 aws s3 cp --recursive ./${{ matrix.projectPath }}/dist s3://${{secrets.AWS_LIGHTBEAM_S3_BUCKET}}/version/${{ steps.isCronOrManual.outputs.customTag }} --acl public-read
      - name: upload alias version
        run: AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} AWS_REGION=us-west-2 aws s3 cp --recursive ./${{ matrix.projectPath }}/dist s3://${{secrets.AWS_LIGHTBEAM_S3_BUCKET}}/${{ steps.setTriggerContext.outputs.triggerContext }} --acl public-read
      - name: Prepare Cloudfront Invalidation 
        run: |
          CLOUD_DISTRO=E3WCWLOU0CURK
          CALLER_REFERENCE=$(date -u +"%Y%m%d%H%M%S")
          echo '{"DistributionId":"'${CLOUD_DISTRO}'","InvalidationBatch":{"CallerReference":"'${CALLER_REFERENCE}'","Paths":{"Quantity":1,"Items":["/${{ steps.setTriggerContext.outputs.triggerContext }}/*"]}}}' >> cloudfront-invalidation.json
      - name: Preview Cloudfront Invalidation 
        run: |
          cat cloudfront-invalidation.json
      - name: Do Cloudfront Invalidation
        run: AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} AWS_REGION=us-west-2 aws cloudfront create-invalidation --cli-input-json file://cloudfront-invalidation.json
