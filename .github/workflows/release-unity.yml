name: Release Unity SDK

on:
  workflow_dispatch:
    inputs:
      commit:
        type: string
        description: Commit hash to deploy
        default: main
      major:
        type: number
        description: Major version number, X.0.0
        required: true
        default: 0
      minor:
        type: number
        description: Minor version number, 0.X.0
        required: true
        default: 0
      patch:
        type: number
        description: Patch version number, 0.0.X
        required: true
        default: 0
      rcNumber:
        type: number
        description: Rc version number, if required, 0.0.0-PREVIEW.RCX
        required: false
        default: 0
      releaseType:
        type: choice
        description: What type of release is this?
        required: true
        options:
          - nightly
          - rc
          - exp
          - production
      dryRun:
        type: boolean
        description: When true, no publish will happen
        required: true
        default: false

run-name: Release ${{ inputs.releaseType }} ${{ inputs.major }}.${{ inputs.minor }}.${{ inputs.patch }}.${{ inputs.rcNumber }} by @${{ github.actor }}
jobs:
  nuget:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    concurrency:
      group: release-unity-sdk
      cancel-in-progress: true
    steps:
      - name: review options
        run: |
          echo dryRun=${{ inputs.dryRun }}
          echo commit=${{ inputs.commit }}
          echo major=${{ inputs.major }}
          echo minor=${{ inputs.minor }}
          echo patch=${{ inputs.patch }}
          echo rc=${{ inputs.rcNumber }}
          echo releaseType=${{ inputs.releaseType }}
         
      - uses: actions/checkout@v4
        with: 
          ref: ${{ github.event.inputs.commit }}

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: >-
            ${{ fromJson('{
              "nightly": "https://nexus.beamable.com/nexus/content/repositories/unity-dev",
              "rc": "https://nexus.beamable.com/nexus/content/repositories/unity-preview",
              "exp": "https://nexus.beamable.com/nexus/content/repositories/unity-preview",
              "production": "https://nexus.beamable.com/nexus/content/repositories/unity"
            }')[github.event.inputs.releaseType] }}
        
      - name: Install JQ
        run: |
          sudo apt-get update
          sudo apt-get install jq
          jq --version

      - name: Install CLI
        working-directory: ./
        run: |
          bash ./setup.sh
          bash ./dev.sh 

      - name: Check CLI
        run: beam version

      - name: Get Version Number (Nightly)
        if: ${{ inputs.releaseType == 'nightly' }} 
        run: beam version construct 0 0 0 --nightly > version.txt
      
      - name: Get Version Number (RC)
        if: ${{ inputs.releaseType == 'rc' }} 
        run: beam version construct ${{ inputs.major }} ${{ inputs.minor }} ${{ inputs.patch }} --rc ${{ inputs.rcNumber }} > version.txt
      
      - name: Get Version Number (Exp)
        if: ${{ inputs.releaseType == 'exp' }} 
        run: beam version construct ${{ inputs.major }} ${{ inputs.minor }} ${{ inputs.patch }} --exp ${{ inputs.rcNumber }} > version.txt
      
      - name: Get Version Number (Prod)
        if: ${{ inputs.releaseType == 'production' }} 
        run: beam version construct ${{ inputs.major }} ${{ inputs.minor }} ${{ inputs.patch }} --prod > version.txt
      
      - name: Store version number as output
        id: version
        env: 
          BUILD_ENV: >-
            ${{ fromJson('{
              "nightly": "dev",
              "rc": "staging",
              "exp": "staging",
              "production": "prod"
            }')[github.event.inputs.releaseType] }}
        run: |
          echo "VERSION=$(cat version.txt | jq -r .data.versionString)" >> "$GITHUB_OUTPUT"
          echo "VERSION_PREFIX=$(cat version.txt | jq -r .data.versionPrefix)" >> "$GITHUB_OUTPUT"
          echo "VERSION_SUFFIX=$(cat version.txt | jq -r .data.versionSuffix)" >> "$GITHUB_OUTPUT"
          echo "BUILD_ENV=$BUILD_ENV" >> "$GITHUB_OUTPUT"

      - name: review version
        run: |
          echo version=${{ steps.version.outputs.VERSION }}
          echo version prefix=${{ steps.version.outputs.VERSION_PREFIX }}
          echo version suffix=${{ steps.version.outputs.VERSION_SUFFIX }}
          echo build-env=${{steps.version.outputs.BUILD_ENV}}

      - name: Prepare Unity Env
        run: sh ./build/bin/modify-unity-files.sh
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
          ENVIRONMENT: ${{steps.version.outputs.BUILD_ENV}}
          
      - name: Apply Nuget Version to Unity SDK
        run: |
          beam unity download-all-nuget-packages ./client --logs v

      - name: Prepare Unity Samples
        run: sh ./../../../build/bin/prepare-samples.sh
        working-directory: ./client/Packages/com.beamable/
      
      - name: Update UPM Versions (com.beamable)
        run: npm version ${{ steps.version.outputs.VERSION }}
        working-directory: ./client/Packages/com.beamable/

      - name: Update UPM Version (com.beamable.server)
        run: npm version ${{ steps.version.outputs.VERSION }}
        working-directory: ./client/Packages/com.beamable.server/

      - name: Review Unity SDK Files
        run: |
          ls ./client/Packages/com.beamable/Runtime/Environment/Resources
          cat client/Packages/com.beamable/Runtime/Environment/Resources/env-default.json
          cat client/Packages/com.beamable.server/package.json
          ls ./client/Packages/com.beamable
          ls ./client/Packages/com.beamable/Samples~
          cat client/Packages/com.beamable/package.json
      
      - name: Release com.beamable UPM Package
        if: ${{ inputs.dryRun == false }}
        run: npm publish
        working-directory: ./client/Packages/com.beamable
        env: 
          NODE_AUTH_TOKEN: ${{ secrets.NEXUS_NPM_AUTH }}
          NPM_AUTH: ${{secrets.NEXUS_NPM_AUTH}}

      - name: Release com.beamable.server UPM Package
        if: ${{ inputs.dryRun == false }}
        run: npm publish
        working-directory: ./client/Packages/com.beamable.server
        env: 
          NODE_AUTH_TOKEN: ${{ secrets.NEXUS_NPM_AUTH }}
          NPM_AUTH: ${{secrets.NEXUS_NPM_AUTH}}

      - name: Publish Changelog
        if: ${{ inputs.dryRun == false }} 
        run: sh ./build/bin/upload-changelogs.sh
        env:
          COPY_UNITY_SDK: 'true'
          COPY_CLI: 'false'
          VERSION: ${{ steps.version.outputs.VERSION }}
          GITHUB_USERNAME: ${{ secrets.GIT_CHANGELOGS_USERNAME }}
          GITHUB_PASSWORD: ${{ secrets.GIT_CHANGELOGS_PASSWORD }}
          BRANCH: >-
            ${{ fromJson('{
              "nightly": "daily",
              "rc": "staging",
              "exp": "staging",
              "production": "production"
            }')[github.event.inputs.releaseType] }}

      - name: Create Release
        id: create_release
        if: ${{ inputs.dryRun == false }} 
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: unity-sdk-${{ steps.version.outputs.VERSION }}
          release_name: Unity SDK ${{ steps.version.outputs.VERSION }}
          body: |
            Unity SDK Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: ${{ inputs.releaseType != 'production' }}
