name: LightBeam PR

on:
  pull_request:
    branches:
      - 'main'
      - 'staging'
      - 'production'
    paths-ignore:
      - 'rfc/**'
      - '.github/**'
    # paths:
    #   - 'client/**'
    #   - 'microservice/**'
    #   - 'cli/**'

jobs:

  build:
    name: Build for ${{ matrix.scene }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    concurrency:
      group: device-builds-${{ matrix.lightBeam }}-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        lightBeam:
          - accountManager
        targetPlatform:
          - WebGL
        unityVersion:
          - 2022.3.0f1
        projectPath:
          - client
        include:
          - lightBeam: accountManager
            scenePath: Packages/com.beamable/Samples/LightBeamSamples/AccountManager/Sample_AccountManager.unity
            buildPath: distAccountManager
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Prepare Config-Defaults
        run: |
          chmod +x ./build/create_config_defaults.sh
          ./build/create_config_defaults.sh
        shell: bash
      - name: Cache Docker Layers
        uses: actions/cache@v2
        id: cache_docker
        with:
          path: ./docker-cache
          key: Docker-gzipped-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Docker-gzipped-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
      - name: Load Docker Image If Exits
        if: ${{ steps.cache_docker.outputs.cache-hit }}
        continue-on-error: true
        run: |
          chmod +x ./build/prepare_base_image.sh
          UNITY_VERSION=${{ matrix.unityVersion }} TARGET_PLATFORM=${{matrix.targetPlatform}} ./build/prepare_base_image.sh
        shell: bash
      - name: Cache Unity Folders
        uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.projectPath }}/Library
            ${{ matrix.projectPath }}/Temp
            ${{ matrix.projectPath }}/obj
          key: Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
      - name: Clean the build directory
        continue-on-error: true
        run: |
          rm -rf /github/workspace/${{matrix.buildPath}}
        shell: bash
      - uses: game-ci/unity-builder@v2.1.2
        timeout-minutes: 60
        env:
          LIGHTBEAM_NAME: ${{matrix.lightBeam}}
          LIGHTBEAM_SCENE_PATH: ${{matrix.scenePath}}
          LIGHTBEAM_BUILD_PATH: ${{matrix.buildPath}}
          UNITY_EMAIL: ${{ secrets[matrix.unityEmailOverride] || secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets[matrix.unityPasswordOverride] || secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets[matrix.unitySerialOverride] || secrets.UNITY_SERIAL }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: ${{ matrix.unityVersion }}
          projectPath: ${{ matrix.projectPath }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          allowDirtyBuild: true
          buildMethod: LightBeamBuilds.BuildLightBeamProject

      - name: Save Docker Image If Exits
        if: ${{ !steps.cache_docker.outputs.cache-hit }}
        run: |
          chmod +x ./build/save_base_image.sh
          UNITY_VERSION=${{ matrix.unityVersion }} TARGET_PLATFORM=${{matrix.targetPlatform}} ./build/save_base_image.sh
        shell: bash
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.targetPlatform != 'WebGL' }}
        with:
          name: Build-${{ matrix.lightBeam }}
          path: ${{ matrix.buildPath }}/**
          retention-days: 3
      - name: upload
        if: ${{ matrix.targetPlatform == 'WebGL' }}
        run: AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} AWS_REGION=us-west-2 aws s3 cp --recursive ./${{ matrix.buildPath }} s3://${{secrets.AWS_BUCKET_BUILDS}}/uploads/${{github.sha}}/${{matrix.lightBeam}} --acl public-read
      - uses: github-actions-up-and-running/pr-comment@v1.0.1
        if: ${{ matrix.targetPlatform == 'WebGL' && github.event_name == 'pull_request' }}
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: Lightbeam [${{matrix.lightBeam}}](https://beamable-product-github-builds.s3.us-west-2.amazonaws.com/uploads/${{github.sha}}/${{matrix.lightBeam}}/index.html)