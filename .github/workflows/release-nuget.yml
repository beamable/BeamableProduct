name: Release Nuget Packages (and CLI)

on:
  workflow_dispatch:
    inputs:
      commit:
        type: string
        description: Commit hash to deploy
        default: main
      major:
        type: number
        description: Major version number, X.0.0
        required: true
        default: 0
      minor:
        type: number
        description: Minor version number, 0.X.0
        required: true
        default: 0
      patch:
        type: number
        description: Patch version number, 0.0.X
        required: true
        default: 0
      rcNumber:
        type: number
        description: Rc version number, if required, 0.0.0-PREVIEW.RCX
        required: false
        default: 0
      releaseType:
        type: choice
        description: What type of release is this?
        required: true
        options:
          - nightly
          - rc
          - exp
          - production
      dryRun:
        type: boolean
        description: When true, no publish will happen
        required: true
        default: false

run-name: Release Nuget (CLI) ${{ inputs.releaseType }} ${{ inputs.major }}.${{ inputs.minor }}.${{ inputs.patch }}.${{ inputs.rcNumber }} by @${{ github.actor }}
jobs:
  nuget:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    concurrency:
      group: release-nuget
      cancel-in-progress: true
    steps:
      - name: review options
        run: |
          echo dryRun=${{ inputs.dryRun }}
          echo commit=${{ inputs.commit }}
          echo major=${{ inputs.major }}
          echo minor=${{ inputs.minor }}
          echo patch=${{ inputs.patch }}
          echo rc=${{ inputs.rcNumber }}
          echo releaseType=${{ inputs.releaseType }}
          
      - uses: actions/checkout@v4
        with: 
          ref: ${{ github.event.inputs.commit }}

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: >-
            ${{ fromJson('{
              "nightly": "https://nexus.beamable.com/nexus/content/repositories/unity-dev",
              "rc": "https://nexus.beamable.com/nexus/content/repositories/unity-preview",
              "exp": "https://nexus.beamable.com/nexus/content/repositories/unity-preview",
              "production": "https://nexus.beamable.com/nexus/content/repositories/unity"
            }')[github.event.inputs.releaseType] }}
        
      - name: Install JQ
        run: |
          sudo apt-get update
          sudo apt-get install jq
          jq --version

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.1
          cache-dependency-path: ./otel-collector/beamable-collector/go.sum

      - name: Build Otel Collector
        working-directory: ./otel-collector
        run: |
          BUILD_OUTPUT="$GITHUB_WORKSPACE/collector-bin" bash ./build.sh

      - name: Install CLI
        working-directory: ./
        run: |
          bash ./setup.sh
          bash ./dev.sh
        env:
          PROJECT_DIR_OVERRIDE: ${{ github.workspace }}/NugetBuildDir/

      - name: Check CLI
        run: beam version

      - name: Get Version Number (Nightly)
        if: ${{ inputs.releaseType == 'nightly' }} 
        run: beam version construct 0 0 0 --nightly > version.txt
      
      - name: Get Version Number (RC)
        if: ${{ inputs.releaseType == 'rc' }} 
        run: beam version construct ${{ inputs.major }} ${{ inputs.minor }} ${{ inputs.patch }} --rc ${{ inputs.rcNumber }} > version.txt
      
      - name: Get Version Number (Exp)
        if: ${{ inputs.releaseType == 'exp' }} 
        run: beam version construct ${{ inputs.major }} ${{ inputs.minor }} ${{ inputs.patch }} --exp ${{ inputs.rcNumber }} > version.txt
      
      - name: Get Version Number (Prod)
        if: ${{ inputs.releaseType == 'production' }} 
        run: beam version construct ${{ inputs.major }} ${{ inputs.minor }} ${{ inputs.patch }} --prod > version.txt
      
      - name: Store version number as output
        id: version
        env: 
          BUILD_ENV: >-
            ${{ fromJson('{
              "nightly": "dev",
              "rc": "staging",
              "exp": "staging",
              "production": "prod"
            }')[github.event.inputs.releaseType] }}
        run: |
          echo "VERSION=$(cat version.txt | jq -r .data.versionString)" >> "$GITHUB_OUTPUT"
          echo "VERSION_PREFIX=$(cat version.txt | jq -r .data.versionPrefix)" >> "$GITHUB_OUTPUT"
          echo "VERSION_SUFFIX=$(cat version.txt | jq -r .data.versionSuffix)" >> "$GITHUB_OUTPUT"
          echo "BUILD_ENV=$BUILD_ENV" >> "$GITHUB_OUTPUT"

      - name: review version
        run: |
          echo version=${{ steps.version.outputs.VERSION }}
          echo version prefix=${{ steps.version.outputs.VERSION_PREFIX }}
          echo version suffix=${{ steps.version.outputs.VERSION_SUFFIX }}
          echo build-env=${{steps.version.outputs.BUILD_ENV}}


      - name: Compress Collector Files
        working-directory: "$GITHUB_WORKSPACE/collector-bin"
        run: find . -type f ! -name '*.gz' -exec gzip -k -9 {} \;

      # Push the collector builds to s3 so that they can be downloaded by distros later
      - name: Upload Collector to S3
        working-directory: "$GITHUB_WORKSPACE/collector-bin"
        run: |
          AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} AWS_REGION=us-west-2 aws s3 cp --recursive ./ s3://beamable-otel-collector-ch/version/${{ steps.version.outputs.VERSION }}  --exclude "*" --include "*.gz" --acl public-read
      
      # Invalidate the CDN for collector builds
      - name: Prepare Cloudfront Invalidation 
        run: |
          CLOUD_DISTRO=E3S54OWVMS4PQH
          CALLER_REFERENCE=$(date -u +"%Y%m%d%H%M%S")
          echo '{"DistributionId":"'${CLOUD_DISTRO}'","InvalidationBatch":{"CallerReference":"'${CALLER_REFERENCE}'","Paths":{"Quantity":1,"Items":["/${{ steps.setTriggerContext.outputs.triggerContext }}/*"]}}}' >> cloudfront-invalidation.json
      - name: Preview Cloudfront Invalidation 
        run: |
          cat cloudfront-invalidation.json
      - name: Do Cloudfront Invalidation
        run: AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} AWS_REGION=us-west-2 aws cloudfront create-invalidation --cli-input-json file://cloudfront-invalidation.json


      - name: Publish Nuget Packages
        if: ${{ inputs.dryRun == false }} 
        run: sh ./build/bin/release-nuget.sh
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
          VERSION_PREFIX: ${{ steps.version.outputs.VERSION_PREFIX }}
          VERSION_SUFFIX: ${{ steps.version.outputs.VERSION_SUFFIX }}
          DRY_RUN: ${{ inputs.dryRun }}
          NUGET_TOOLS_KEY: ${{ secrets.NUGET_TOOLS_KEY }}

      - name: Publish Changelog
        if: ${{ inputs.dryRun == false }} 
        run: sh ./build/bin/upload-changelogs.sh
        env:
          COPY_UNITY_SDK: 'false'
          COPY_CLI: 'true'
          VERSION: ${{ steps.version.outputs.VERSION }}
          GITHUB_USERNAME: ${{ secrets.GIT_CHANGELOGS_USERNAME }}
          GITHUB_PASSWORD: ${{ secrets.GIT_CHANGELOGS_PASSWORD }}
          BRANCH: >-
            ${{ fromJson('{
              "nightly": "daily",
              "rc": "staging",
              "exp": "staging",
              "production": "production"
            }')[github.event.inputs.releaseType] }}

      - name: Create Release
        id: create_release
        if: ${{ inputs.dryRun == false }} 
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: cli-${{ steps.version.outputs.VERSION }}
          release_name: CLI ${{ steps.version.outputs.VERSION }}
          body: |
            CLI Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: ${{ inputs.releaseType != 'production' }}
