name: Test

on: 
 push:
  branches:
    - 'main'
  paths:
    - 'client/**'
    - 'microservice/**'
 pull_request:
  branches:
    - 'main'
    - 'staging'
  # paths:
  #   - 'client/**'
  #   - 'microservice/**'

jobs:
  testMicroserviceBaseImage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['5.0.x' ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Install dependencies
        run: dotnet restore microservice/microserviceTests
      - name: Build
        run: dotnet build --configuration Release --no-restore microservice/microserviceTests
      - name: Test
        uses: zyborg/dotnet-tests-report@v1
        with:
          set_check_status_from_test_outcome: true
          project_path: microservice/microserviceTests
          report_name: Microservice_base_image_tests
          report_title: Microservice Base Image Tests
          github_token: ${{ secrets.GITHUB_TOKEN }}

  testAllModes:
    name: Tests ${{ matrix.unityVersion }} ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - client
        testMode:
          - playmode
          - editmode
        unityVersion:
          - 2018.4.18f1
          - 2019.4.30f1
          - 2020.3.19f1
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}
      - name: Run script file
        run: |
          chmod +x ./build/clean_iap.sh
          UNITY_VERSION=${{ matrix.unityVersion }} ./build/clean_iap.sh
        shell: bash
      - uses: game-ci/unity-test-runner@v2
        id: tests
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          customParameters: -warnaserror+ 
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          unityVersion: ${{ matrix.unityVersion }}
          artifactsPath: ${{ matrix.testMode }}-${{ matrix.unityVersion }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.unityVersion }} ${{ matrix.testMode }} Test Results
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results for ${{ matrix.unityVersion }} ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}

  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - WebGL # WebGL.
        unityVersion:
          - 2018.4.18f1
        projectPath:
          - client
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true

      # TODO: When more build types are added, we need to change the cache key
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}
      - name: Run script file
        run: |
          chmod +x ./build/clean_iap.sh
          UNITY_VERSION=${{ matrix.unityVersion }} ./build/clean_iap.sh
        shell: bash
      # - uses: game-ci/unity-builder@v2
      #   env:
      #     UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      #     UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      #     UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
      #   with:
      #     targetPlatform: ${{ matrix.targetPlatform }}
      #     unityVersion: ${{ matrix.unityVersion }}
      #     projectPath: ${{ matrix.projectPath }}
      #     githubToken: ${{ secrets.GITHUB_TOKEN }}
      #     versioning: Semantic
      #     allowDirtyBuild: true
      #     buildsPath: dist

      - uses: wixplosives/action-upload-to-s3@v1
        id: upload-to-s3
        with:
          accessKeyId:  ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          secretAccessKey:  ${{ secrets.AWS_KEY_ID }}
          awsBucket: ${{ secrets.AWS_BUCKET_BUILDS }}
          s3Subfolder: upload-${{GITHUB_SHA}}
          sourceFolder: build
      #   uses: shallwefootball/s3-upload-action@master
      #   env:
      #     AWS_REGION: "us-west-2"
      #   with:
      #     aws_key_id: ${{ secrets.AWS_KEY_ID }}
      #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
      #     aws_bucket: ${{ secrets.AWS_BUCKET_BUILDS }}
      #     source_dir: build
      #     destination_dir: tests

     

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: Build-${{ matrix.targetPlatform }}
      #     path: dist/${{ matrix.targetPlatform }}

      # - name: comment PR
      #   uses: khezen/cmtpr@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     msg: "Looks good to me! {{ steps.upload-to-s3.outputs.object_key }} "