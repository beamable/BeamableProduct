name: Test

on: 
 push:
  branches:
    - 'main'
    - 'iOS'
 pull_request:
  branches:
    - 'main'
    - 'staging'
    - 'iOS'
jobs:
  testMicroserviceBaseImage:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    concurrency: 
      group: base-image-tests-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        dotnet-version: ['5.0.x' ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Install dependencies
        run: dotnet restore microservice/microserviceTests
      - name: Build
        run: dotnet build --configuration Release --no-restore microservice/microserviceTests
      - name: Test
        uses: zyborg/dotnet-tests-report@v1
        with:
          set_check_status_from_test_outcome: true
          project_path: microservice/microserviceTests
          report_name: Microservice_base_image_tests
          report_title: Microservice Base Image Tests
          github_token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    concurrency: 
      group: device-builds-${{ matrix.targetPlatform }}-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - iOS
        unityVersion:
          - 2020.3.19f1
        projectPath:
          - client
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Prepare Config-Defaults
        run: |
          chmod +x ./build/create_config_defaults.sh
          ./build/create_config_defaults.sh
        shell: bash
      - name: Check Unity IAP
        run: |
          chmod +x ./build/clean_iap.sh
          UNITY_VERSION=${{ matrix.unityVersion }} ./build/clean_iap.sh
        shell: bash
      - name: Check Gradle Builds
        run: |
          chmod +x ./build/clean_gradle.sh
          UNITY_VERSION=${{ matrix.unityVersion }} ./build/clean_gradle.sh
        shell: bash
      - name: Cache Docker Layers
        uses: actions/cache@v2
        id: cache_docker
        with:
          path: ./docker-cache
          key: Docker-gzipped-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Docker-gzipped-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
      - name: Load Docker Image If Exits
        if: ${{ steps.cache_docker.outputs.cache-hit }}
        continue-on-error: true
        run: |
          chmod +x ./build/prepare_base_image.sh
          UNITY_VERSION=${{ matrix.unityVersion }} TARGET_PLATFORM=${{matrix.targetPlatform}} ./build/prepare_base_image.sh
        shell: bash
      - name: Cache Unity Folders
        uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.projectPath }}/Library
            ${{ matrix.projectPath }}/Temp
            ${{ matrix.projectPath }}/obj
          key: Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
      - uses: game-ci/unity-builder@v2
        timeout-minutes: 30
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: ${{ matrix.unityVersion }}
          projectPath: ${{ matrix.projectPath }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          versioning: Semantic
          allowDirtyBuild: true
          buildsPath: dist

      - name: Save Docker Image If Exits
        if: ${{ !steps.cache_docker.outputs.cache-hit }}
        run: |
          chmod +x ./build/save_base_image.sh
          UNITY_VERSION=${{ matrix.unityVersion }} TARGET_PLATFORM=${{matrix.targetPlatform}} ./build/save_base_image.sh
        shell: bash
      - uses: actions/upload-artifact@v2
        if: ${{ matrix.targetPlatform != 'WebGL' }}
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: dist/${{ matrix.targetPlatform }}
          retention-days: 3
      - name: upload
        if: ${{ matrix.targetPlatform == 'WebGL' }}
        run: AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} AWS_REGION=us-west-2 aws s3 cp --recursive ./dist/WebGL s3://${{secrets.AWS_BUCKET_BUILDS}}/uploads/${{github.sha}}
      - uses: github-actions-up-and-running/pr-comment@v1.0.1
        if: ${{ matrix.targetPlatform == 'WebGL' && github.event_name == 'pull_request' }}
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: Have a ${{ matrix.targetPlatform }} build, friend. [${{github.sha}}](https://beamable-product-github-builds.s3.us-west-2.amazonaws.com/uploads/${{github.sha}}/WebGL/index.html)
      #Build iOS
      - uses: actions/download-artifact@v2
        with:
          name: Build-iOS
      - name: Change directory to the location of the xcode project
        run: cd iOS/
      - uses: yukiarrr/ios-build-action@v1.4.0
        with:
          project-path: Unity-iPhone.xcodeproj
          p12-base64: ${{ secrets.P12_BASE64 }}
          mobileprovision-base64: ${{ secrets.PROD_MOBILEPROVISION_BASE64 }}
          code-signing-identity: ${{ secrets.CODE_SIGNING_IDENTITY }}
          team-id: ${{ secrets.TEAM_ID }}

  ios:
    name: Build for iOS ipa and upload to Testflight
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: Build-iOS
      - name: Change directory to the location of the xcode project
        run: cd iOS/
      - uses: yukiarrr/ios-build-action@v1.4.0
        with:
          project-path: Unity-iPhone.xcodeproj
          p12-base64: ${{ secrets.P12_BASE64 }}
          mobileprovision-base64: ${{ secrets.PROD_MOBILEPROVISION_BASE64 }}
          code-signing-identity: ${{ secrets.CODE_SIGNING_IDENTITY }}
          team-id: ${{ secrets.TEAM_ID }}