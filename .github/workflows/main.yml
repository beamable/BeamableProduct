name: Test

on: 
 push:
  branches:
    - 'main'
  paths:
    - 'client/**'
    - 'microservice/**'
 pull_request:
  branches:
    - 'main'
    - 'staging'
  paths:
    - 'client/**'
    - 'microservice/**'

jobs:
  testMicroserviceBaseImage:
    runs-on: ubuntu-latest
    concurrency: 
      group: base-image-tests-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      matrix:
        dotnet-version: ['5.0.x' ]
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget
      - name: Install dependencies
        run: dotnet restore microservice/microserviceTests
      - name: Build
        run: dotnet build --configuration Release --no-restore microservice/microserviceTests
      - name: Test
        uses: zyborg/dotnet-tests-report@v1
        with:
          set_check_status_from_test_outcome: true
          project_path: microservice/microserviceTests
          report_name: Microservice_base_image_tests
          report_title: Microservice Base Image Tests
          github_token: ${{ secrets.GITHUB_TOKEN }}

  testAllModes:
    name: Tests ${{ matrix.unityVersion }} ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    concurrency: 
      group: unity-tests-${{ matrix.unityVersion }}-${{ matrix.testMode }}-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - client
        testMode:
          - playmode
          - editmode
        unityVersion:
          - 2018.4.18f1
          - 2019.4.30f1
          - 2020.3.19f1
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}
      - name: Run script file
        run: |
          chmod +x ./build/clean_iap.sh
          UNITY_VERSION=${{ matrix.unityVersion }} ./build/clean_iap.sh
        shell: bash
      - uses: game-ci/unity-test-runner@v2
        id: tests
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          customParameters: -warnaserror+ 
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          unityVersion: ${{ matrix.unityVersion }}
          artifactsPath: ${{ matrix.testMode }}-${{ matrix.unityVersion }}-artifacts
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.unityVersion }} ${{ matrix.testMode }} Test Results
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results for ${{ matrix.unityVersion }} ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
          retention-days: 3

  build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    concurrency: 
      group: device-builds-${{ matrix.targetPlatform }}-${{ github.head_ref }}
      cancel-in-progress: true
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - WebGL
          - Android
          - StandaloneWindows
          - iOS
          - StandaloneOSX
        unityVersion:
          - 2020.3.19f1
        projectPath:
          - client
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
      - name: Prepare Config-Defaults
        run: |
          chmod +x ./build/create_config_defaults.sh
          ./build/create_config_defaults.sh
        shell: bash
      - name: Check Unity IAP
        run: |
          chmod +x ./build/clean_iap.sh
          UNITY_VERSION=${{ matrix.unityVersion }} ./build/clean_iap.sh
        shell: bash
      - name: Check Gradle Builds
        run: |
          chmod +x ./build/clean_gradle.sh
          UNITY_VERSION=${{ matrix.unityVersion }} ./build/clean_gradle.sh
        shell: bash
      - uses: actions/cache@v2
        with:
          path: |
            ${{ matrix.projectPath }}/Library
            ${{ matrix.projectPath }}/Temp
            ${{ matrix.projectPath }}/obj
          key: Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
      - uses: game-ci/unity-builder@v2
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          unityVersion: ${{ matrix.unityVersion }}
          projectPath: ${{ matrix.projectPath }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          versioning: Semantic
          allowDirtyBuild: true
          buildsPath: dist

      - uses: actions/upload-artifact@v2
        if: ${{ matrix.targetPlatform != 'WebGL' }}
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: dist/${{ matrix.targetPlatform }}
          retention-days: 3
      - name: upload
        if: ${{ matrix.targetPlatform == 'WebGL' }}
        run: AWS_ACCESS_KEY_ID=${{secrets.AWS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} AWS_REGION=us-west-2 aws s3 cp --recursive ./dist/WebGL s3://${{secrets.AWS_BUCKET_BUILDS}}/uploads/${{github.sha}}
      - uses: github-actions-up-and-running/pr-comment@v1.0.1
        if: ${{ matrix.targetPlatform == 'WebGL' }}
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: Have a ${{ matrix.targetPlatform }} build, friend. [${{github.sha}}](https://beamable-product-github-builds.s3.us-west-2.amazonaws.com/uploads/${{github.sha}}/WebGL/index.html)