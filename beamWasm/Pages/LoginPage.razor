@page "/LoginPage"
@using System.ComponentModel.DataAnnotations
@using Beamable.Common.Api.Auth
@using Beamable.Common.Api.Realms
@using beamWasm.BeamBlazor
@inject ILogger<LoginPage> Logger
@inject IAuthApi AuthApi
@inject IAppContext AppContext
@inject IRealmsApi RealmsApi


<section class="login-form">
    @if (!initialized)
    {
        <div class="text-center mb-3">
            <h3>Loading...</h3>
        </div>
    }
    else if (loggedUser == null)
    {
        <div class="text-center mb-3">
            <h3>Sign in</h3>
        </div>
        <EditForm Model="@_exampleModel" OnSubmit="@HandleSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <div class="text-center mb-3">
                <div class="form-outline mb-4">
                    <InputText id="cid" @bind-Value="_exampleModel.Cid" class="form-control"/>
                    <label class="form-label" for="cid">Cid</label>
                </div>
                <div class="form-outline mb-4">
                    <InputText id="name" @bind-Value="_exampleModel.Name" type="email" class="form-control"/>
                    <label class="form-label" for="name">email</label>
                </div>
                <div class="form-outline mb-4">
                    <InputText id="password" @bind-Value="_exampleModel.Password" type="password" class="form-control"/>
                    <label class="form-label" for="password">password</label>
                </div>

                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </EditForm>
    }
    else
    {
        <div class="text-center mb-3">
            <h3>Signed in</h3>
        </div>
        <div class="mb-4">
            <p>Mail: <b>@loggedUser.email</b></p>
        </div>
        <div class="mb-4">
            <p>User id: <b>@loggedUser.id</b></p>
        </div>
        <button class="btn btn-primary logout-button" @onclick="Logout">Logout</button>
    }
</section>

@code {
    private readonly ExampleModel _exampleModel = new();
    User loggedUser;
    bool initialized = false;

    private class ExampleModel
    {
        [Required]
        public string Name { get; set; }

        [Required]
        public string Password { get; set; }

        [Required]
        public string Cid { get; set; }
    }

    private async Task HandleSubmit(EditContext editContext)
    {
        bool formIsValid = editContext.Validate();
        Logger.LogInformation($"HandleValidSubmit called {formIsValid}");
        if (formIsValid)
        {
            try
            {
                // await AppContext.SetCid(_exampleModel.Cid);
                // var test = await RealmsApi.GetGames();
                // Logger.LogInformation(string.Join(',',test));
                var token = await AuthApi.Login(_exampleModel.Name, _exampleModel.Password);
                if (token is not null)
                {
                    await UpdateUserInfo(token);
                }
            }
            catch (Exception e)
            {
                Logger.LogError(e.ToString());
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
    // check if can already log in
        Logger.LogInformation("1");
        await AppContext.Init();
        Logger.LogInformation("2");
        var rToken = AppContext?.RefreshToken;
        Logger.LogInformation("3");
        if (!string.IsNullOrWhiteSpace(rToken))
        {
            try
            {
                Logger.LogInformation("4");
                var token = await AuthApi.LoginRefreshToken(rToken);
                Logger.LogInformation("5");
                if (token != null)
                {
                    await UpdateUserInfo(token);
                    Logger.LogInformation("6");
                }
            }
            catch (Exception e)
            {
                Logger.LogError(e.ToString());
            }
        }
        initialized = true;
    }

    private async Task UpdateUserInfo(TokenResponse token)
    {
        await AppContext.UpdateToken(token);
        loggedUser = await AuthApi.GetUser();
    }

    private void Logout()
    {
        AppContext.UpdateToken(null);
        loggedUser = null;
    }

}