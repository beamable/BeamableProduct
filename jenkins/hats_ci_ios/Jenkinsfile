final bundleIdentifier = 'com.dbpublishingllc.hats'
final provisioningProfile = 'app_store_com_dbpublishingllc_hats'
final teamIdentifier = 'KNQ6UC7RU8'
final cacheServer = '68.171.150.120:8126'
final unity = '/Applications/Unity-2018.4.18f1/Unity.app/Contents/MacOS/Unity'

node('hats_ci_ios') {
  try {
    stage('sync') {
      p4sync charset: 'utf8', credential: 'perforce-ip', populate: forceClean(have: false, parallel: [enable: true, minbytes: '1024', minfiles: '1', threads: '4'], pin: '', quiet: true), source: streamSource('//disruptor_engine/trunk')
    }
    stage('editor_tests'){
      sh 'touch unity.log && tail -F unity.log & '+ unity +' -quit -batchmode -runTests -logFile unity.log -projectPath client/ -testResults testResults.xml -CacheServerIPAddress ${cacheServer}'
    }
    stage('build unity') {
      try {
        withEnv(['IOS_BUILD_NUMBER=' + BUILD_NUMBER, 'GAME_VERSION_NUMBER=0.1']) {
          echo "$IOS_BUILD_NUMBER"
          echo "$GAME_VERSION_NUMBER"
          sh 'touch unity.log && tail -F unity.log & '+ unity +' -quit -batchmode -logFile unity.log -projectPath client/ -buildTarget ios -executeMethod Builder.BuildiOS -CacheServerIPAddress ${cacheServer}'
        }
      } finally {
        archiveArtifacts 'unity.log'
      }
    }
    stage('build ipa') {
      sh '/usr/libexec/PlistBuddy -c "Add :ITSAppUsesNonExemptEncryption bool false" client/Build/ios/Info.plist || echo "Could not set encryption exception, this means it already exists"'
      sh 'echo "exit 0" > client/Build/ios/process_symbols.sh'
      withCredentials([usernamePassword(credentialsId: '1cf12e54-5183-44f8-b854-3accb6bf9d64', passwordVariable: 'keychain_pass', usernameVariable: '')]) {
        sh 'security unlock-keychain -p ' + keychain_pass
      }
      sh "xcodebuild clean -scheme Unity-iPhone -archivePath gamebuild/hats.xcarchive DEVELOPMENT_TEAM='${teamIdentifier}'" +
        " CODE_SIGN_IDENTITY='iPhone Distribution: DB Publishing LLC (KNQ6UC7RU8)' CODE_SIGN_STYLE=Manual" +
        " PROVISIONING_PROFILE_SPECIFIER='${provisioningProfile}'" +
        " -configuration Release -project client/Build/ios/Unity-iPhone.xcodeproj archive -allowProvisioningUpdates"
      sh """cat <<EOF > export.plist
<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"> 
<plist version="1.0"> 
<dict>
    <key>provisioningProfiles</key>
    <dict>
        <key>${bundleIdentifier}</key>
        <string>${provisioningProfile}</string>
    </dict>
    <key>iCloudContainerEnvironment</key>
    <string>Production</string>
    <key>method</key>
    <string>app-store</string>
    <key>signingStyle</key>
    <string>manual</string>
    <key>teamID</key>
    <string>${teamIdentifier}</string>
    <key>compileBitcode</key>
    <false/>
</dict>
</plist>
EOF"""
      sh 'xcodebuild -exportArchive -archivePath gamebuild/hats.xcarchive -exportOptionsPlist export.plist -exportPath ./gamebuild/ -allowProvisioningUpdates'

      withCredentials([usernamePassword(credentialsId: '436cd276-c996-45cc-b824-a9ff8d59b804', passwordVariable: 'APPLE_ID_PASSWORD_FOR_JENKINS', usernameVariable: 'APPLE_ID_USERNAME_FOR_JENKINS')]) {
        sh '/usr/bin/xcrun altool --upload-app --file gamebuild/Unity-iPhone.ipa --username jenkins@disruptorbeam.com --password "${APPLE_ID_PASSWORD_FOR_JENKINS}" '
      }
    }
    stage('archive ipa') {
      sh 'mv gamebuild/Unity-iPhone.ipa hats.ipa'
      archiveArtifacts 'hats.ipa'
    }
  } catch (e) {
    slackSend channel: 'platform-engineers', color: 'danger', message: "HATS iOS ${env.BUILD_URL} Failed"
    throw e as java.lang.Throwable
  }
}
