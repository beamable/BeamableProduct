// Master Jenkinsfile for HATS builds.
// General build parameters
final unityVersion = params.UNITY_VERSION ?: 'Unity-2018.4.18f1'
final sourceStream = params.STREAM ?: '//disruptor_engine/trunk'
final bundleIdentifier = params.BUNDLE_ID ?: 'com.beamable.hats'
final buildPlatform = params.PLATFORM ?: 'ios'
final gameEnvironment = params.ENVIRONMENT ?: 'dev'
final slackChannel = 'platform-engineers'
final resourcesDirectory = params.RESOURCES_DIR ?: 'client/Assets/DisruptorEngine/Resources'

// iOS stuff
final provisioningProfile = params.PROFILE ?: 'app_store_com_beamable_hats'
final teamIdentifier = params.TEAM_ID ?: 'KNQ6UC7RU8'
final signingIdentity = params.SIGNING_IDENTITY ?: 'iPhone Distribution: DB Publishing LLC (KNQ6UC7RU8)'

// Android stuff
final apkName = params.APK_NAME ?: 'hats.apk'
final keystoreFile = params.KEYSTORE_FILE ?: 'client/hatsbuild.keystore'
final keystoreCredentials = params.KEYSTORE_CREDS ?: '12cb1213-46cf-41d0-ac49-f960b28478e2'
final alignedApkName = "${apkName}".replace(['.apk', '-aligned.apk'])
final unitySignAndroid = params.UNITY_SIGN_ANDROID ?: true
def apkToUpload = apkName

// App Center stuff
final appCenterUrl = 'https://api.appcenter.ms'
final appCenterOrg = 'disruptorbeam'
final appCenterName = params.APP_CENTER_NAME ?: 'HATS'
final appCenterToken = params.APP_CENTER_TOKEN ?: '10b89929febc2e3efc74318422effbc1de1a1996'
final appCenterTestGroup = params.APP_CENTER_GROUP ?: 'DB-Test'

node("macos && ${unityVersion}") {
  try {
    stage('sync') {
      p4sync(
        charset: 'utf8',
        credential: 'perforce-ip',
        populate: forceClean(quiet: true),
        source: streamSource(sourceStream)
      )
    }
    stage('run tests') {
      try {
            sh 'touch unity.log'
            sh 'touch testResults.xml'
            sh "tail -F unity.log & /Applications/${unityVersion}/Unity.app/Contents/MacOS/Unity" +
              " -batchmode" +
              " -logFile unity.log" +
              " -projectPath client/" +
              " -runTests" +
              " -editorTestResults ./testResults.xml"
            archiveArtifacts artifacts: 'client/TestResults*.xml', followSymlinks: false
          }
      catch (Exception e) {
        archiveArtifacts 'unity.log'
        archiveArtifacts artifacts: 'client/TestResults*.xml', followSymlinks: false
      }
    }

    stage('build unity') {
      dir(resourcesDirectory) {
        sh 'rm -f config-defaults.txt'
        sh "cp config-${gameEnvironment}.txt config-defaults.txt"
      }
      sh 'mkdir -pv client/Build'
      sh 'touch unity.log'
      try {
        String buildMethod
        def buildVars = ['GAME_VERSION_NUMBER=0.1']
        if (buildPlatform == 'ios') {
          buildMethod = 'Builder.BuildiOS'
          buildVars.add("IOS_BUILD_NUMBER=${BUILD_NUMBER}")
        } else if (buildPlatform == 'android') {
          buildMethod = 'Builder.BuildAndroid'
          buildVars.add("ANDROID_VERSION_CODE=${BUILD_NUMBER}")
        } else {
          throw new Exception("Unknown platform: '${buildPlatform}'")
        }
        withCredentials([usernamePassword(credentialsId: keystoreCredentials, usernameVariable: 'ignoredUsername', passwordVariable: 'keystorePassword')]) {
          buildVars.add("KEYSTORE_PASS=${keystorePassword}")
          withEnv(buildVars) {
            sh "tail -F unity.log & /Applications/${unityVersion}/Unity.app/Contents/MacOS/Unity" +
              " -quit -batchmode" +
              " -logFile unity.log" +
              " -projectPath client/" +
              " -buildTarget ${buildPlatform}" +
              " -executeMethod ${buildMethod}"
          }
        }
      } finally {
        archiveArtifacts 'unity.log'
      }
      if (buildPlatform == 'android') {
        sh "mv client/Build/android.apk ./${apkName}"
        archiveArtifacts apkName
      }
    }

    if (buildPlatform == 'ios') {
      stage('build ipa') {
        sh '/usr/libexec/PlistBuddy -c "Add :ITSAppUsesNonExemptEncryption bool false" client/Build/ios/Info.plist' +
          ' || echo "Could not set encryption exception, this means it already exists"'
        sh 'echo "exit 0" > client/Build/ios/process_symbols.sh'
        withCredentials([usernamePassword(credentialsId: '1cf12e54-5183-44f8-b854-3accb6bf9d64', passwordVariable: 'keychain_pass', usernameVariable: '')]) {
          sh 'security unlock-keychain -p ' + keychain_pass
        }
        sh "xcodebuild clean" +
          " -scheme Unity-iPhone" +
          " -archivePath gamebuild/hats.xcarchive" +
          " DEVELOPMENT_TEAM='${teamIdentifier}'" +
          " CODE_SIGN_IDENTITY='${signingIdentity}'" +
          " CODE_SIGN_STYLE=Manual" +
          " PROVISIONING_PROFILE_SPECIFIER='${provisioningProfile}'" +
          " -configuration Release" +
          " -project client/Build/ios/Unity-iPhone.xcodeproj" +
          " archive -allowProvisioningUpdates"
        sh """cat <<EOF > export.plist
<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"> 
<plist version="1.0"> 
<dict>
    <key>provisioningProfiles</key>
    <dict>
        <key>${bundleIdentifier}</key>
        <string>${provisioningProfile}</string>
    </dict>
    <key>iCloudContainerEnvironment</key>
    <string>Production</string>
    <key>method</key>
    <string>app-store</string>
    <key>signingStyle</key>
    <string>manual</string>
    <key>teamID</key>
    <string>${teamIdentifier}</string>
    <key>compileBitcode</key>
    <false/>
</dict>
</plist>
EOF"""
        sh 'xcodebuild -exportArchive -archivePath gamebuild/hats.xcarchive -exportOptionsPlist export.plist -exportPath ./gamebuild/ -allowProvisioningUpdates'
      }

      stage('upload to TestFlight') {
        withCredentials([usernamePassword(credentialsId: '436cd276-c996-45cc-b824-a9ff8d59b804', passwordVariable: 'APPLE_ID_PASSWORD_FOR_JENKINS', usernameVariable: 'APPLE_ID_USERNAME_FOR_JENKINS')]) {
          final appLoaderTool = '/Applications/Xcode.app/Contents/Applications/Application\\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool'
          try {
            sh "${appLoaderTool} --upload-app -f gamebuild/Unity-iPhone.ipa -u jenkins@disruptorbeam.com -p '${APPLE_ID_PASSWORD_FOR_JENKINS}' --output-format xml"
          } catch (Exception e) {
            echo "Did not find altool in Xcode.app. Using xcrun instead. ${e}"
            sh '/usr/bin/xcrun altool --upload-app --file gamebuild/Unity-iPhone.ipa --username jenkins@disruptorbeam.com --password "${APPLE_ID_PASSWORD_FOR_JENKINS}" '
          }
        }
      }
    }

    if (buildPlatform == 'android') {
      if (!unitySignAndroid) {
        stage('sign and align APK') {
          sh "zip -d ${apkName} 'META-INF/*'"
          withCredentials([usernamePassword(credentialsId: keystoreCredentials, usernameVariable: 'keystoreName', passwordVariable: 'keystorePassword')]) {
            sh "jarsigner -verbose" +
              " -sigalg SHA1withRSA -digestalg SHA1" +
              " -keystore ${keystoreFile} -storepass ${keystorePassword} -keypass ${keystorePassword}" +
              " ${apkName} ${keystoreName}"
          }
          sh "\$ANDROID_HOME/build-tools/28.0.3/zipalign -v 4 ${apkName} ${alignedApkName}"
          apkToUpload = alignedApkName
          archiveArtifacts alignedApkName
        }
      }

      stage('upload to App Center') {
        final newReleaseUrl = "${appCenterUrl}/v0.1/apps/${appCenterOrg}/${appCenterName}/release_uploads"
        retry(3) {
          def upload_request = sh(
            script: "curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' --header 'X-API-Token: ${appCenterToken}' ${newReleaseUrl}",
            returnStdout: true)
          def upload_json = readJSON text: upload_request
          def upload_url = upload_json['upload_url']
          def upload_id = upload_json['upload_id']
          sh "curl -F ipa=@${apkToUpload} ${upload_url}"
          def version_url = "${newReleaseUrl}/${upload_id}"
          def release_request = sh(
            script: "curl -X PATCH --header 'Content-Type: application/json' --header 'Accept: application/json' --header 'X-API-Token: ${appCenterToken}' ${version_url} -d '{\"status\":\"committed\"}'",
            returnStdout: true)
          def release_json = readJSON text: release_request
          def release_url = release_json['release_url']
          sh "curl -X PATCH --header 'Content-Type: application/json' --header 'Accept: application/json' --header 'X-API-Token: ${appCenterToken}'" +
            " -d '{\"release_notes\":\"None\",\"distribution_group_name\":\"${appCenterTestGroup}\"}'" +
            " ${appCenterUrl}/${release_url}"
        }
      }
    }
  } catch (Exception e) {
    slackSend channel: slackChannel, color: 'danger', message: "HATS ${BUILD_URL} failed"
    throw e
  }
}
