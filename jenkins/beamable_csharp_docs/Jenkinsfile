// Jenkinsfile for Beamable documentation generation.
final S3_BUCKET = 'csharp.docs.beamable.com'
final CLOUD_DISTRO = 'E30NJLEQHJKLSL'

final branches = [
  'production',
  'production_0_0_124',
  'staging',
  'trunk',
  'docs_trunk'
]

properties([
  parameters([
    choice(name: 'SOURCE_BRANCH', choices: branches, description: 'Perforce stream to pull code from.'),
    string(name: 'VERSION_PATH', defaultValue: 'DEV', description: 'Path prefix to use when uploading to site such as v0.9.0 or v1.0.0.'),
    booleanParam(name: 'UPDATE_LATEST', defaultValue: false, description: 'If UPDATE_LATEST is checked, also upload site to the /latest/ directory.')
  ])
])

final p4stream = "//disruptor_engine/${params.SOURCE_BRANCH}"

node('doxygen') {
  stage('Workspace Sync') {
    p4sync(
      credential: 'perforce-ip',
      format: 'jenkins-${NODE_NAME}-${JOB_NAME}',
      populate: forceClean(quiet: true),
      source: streamSource(p4stream)
    )
  }

  stage('Doxygen') {
    sh "doxygen client/Doxyfile"
  }

  stage('Archive Artifacts') {
    sh 'tar cfz docs-html.tar.gz ./html'
    archiveArtifacts artifacts: 'docs-html.tar.gz'
  }

  def description = ''

  stage('S3 Upload') {
    if (!params.VERSION_PATH?.trim()) {
      throw new Exception('S3 bucket path part must not be null or empty.')
    }
    def s3dest = "s3://${S3_BUCKET}/${params.VERSION_PATH}/"
    sh "aws s3 sync --delete html/ ${s3dest}"
    description += "${params.SOURCE_BRANCH} -> ${s3dest}"
    buildDescription(description)
  }

  if (params.UPDATE_LATEST) {
    stage('S3 Upload Latest') {
      sh "aws s3 sync --delete html/ s3://${S3_BUCKET}/latest/"
      buildDescription(description + ' + latest')
    }
  }

   stage('CloudFront Cache Invalidation') {
     def paths = [
       '"/index.html"',
       '"/' + params.VERSION_PATH + '/*"'
     ]
     if (params.UPDATE_LATEST) {
       paths.add('"/latest/*"')
     }

     def commandFile = "cloudfront-${env.BUILD_TAG}.json"
     writeFile(
       file: commandFile,
       text: '{"DistributionId":"' + CLOUD_DISTRO + '","InvalidationBatch":{"CallerReference":"' + env.BUILD_TAG + '","Paths":{"Quantity":' + paths.size() + ',"Items":[' + paths.join(',') + ']}}}'
     )
     sh "aws cloudfront create-invalidation --cli-input-json file://${commandFile}"
   }
}
