import groovy.json.JsonSlurper

final String unityVersion = 'Unity-2018.4.18f1'
final cacheServer = '68.171.150.120:8126'
static def getJSONValue(String data, String key) {
  def jsonSlurper = new JsonSlurper()
  return jsonSlurper.parseText(data).get(key)
}

node('hats_ci_android') {
  try {
    stage('sync') {
      p4sync charset: 'utf8',
        credential: 'perforce-ip',
        populate: forceClean(have: false, parallel: [enable: true, minbytes: '1024', minfiles: '1', threads: '4'], pin: '', quiet: true),
        source: streamSource('//disruptor_engine/trunk')
    }

    stage('build unity') {
      sh 'mkdir -pv client/Build'
      withCredentials([string(credentialsId: 'f4c9cc6f-0ff5-41a8-bd0f-ec8c91de394e', variable: 'KEYSTORE_PASS')]) {
        withEnv(["ANDROID_VERSION_CODE=${BUILD_NUMBER}", 'GAME_VERSION_NUMBER=0.1', "KEYSTORE_PASS=${KEYSTORE_PASS}"]) {
          echo "$ANDROID_VERSION_CODE"
          echo "$GAME_VERSION_NUMBER"
          sh "touch unity.log ; tail -F unity.log & /Applications/${unityVersion}/Unity.app/Contents/MacOS/Unity -batchmode -quit -logFile ./unity.log -projectPath client/ -buildTarget Android -executeMethod Builder.BuildAndroid -CacheServerIPAddress ${cacheServer}"
        }
      }
      sh 'mv client/Build/android.apk ./hats.apk'
      archiveArtifacts 'unity.log'
      archiveArtifacts 'hats.apk'
    }

    stage('archive DLLs') {
      archiveArtifacts 'client/Library/ScriptAssemblies/*.dll'
    }

    stage('Uploading to App Center') {
      retry(3) {
        BASE_URL = 'https://api.appcenter.ms'
        NEW_RELEASE_URL = "${BASE_URL}/v0.1/apps/disruptorbeam/HATS/release_uploads"
        XAPI_TOKEN = '10b89929febc2e3efc74318422effbc1de1a1996'
        TEST_GROUP = 'DB-Test'

        def upload_request = sh(script: 'curl -X POST --header \'Content-Type: application/json\' --header \'Accept: application/json\' --header \'X-API-Token: \'' + XAPI_TOKEN + ' ' + NEW_RELEASE_URL, returnStdout: true)
        def upload_url = getJSONValue(upload_request, 'upload_url')
        def upload_id = getJSONValue(upload_request, 'upload_id')
        def version_url = "${NEW_RELEASE_URL}/${upload_id}"
        sh "curl -F ipa=@hats.apk ${upload_url}"
        def release_request = sh(script: 'curl -X PATCH --header \'Content-Type: application/json\' --header \'Accept: application/json\' --header \'X-API-Token: ' + XAPI_TOKEN + '\' ' + version_url + ' -d \'{ "status": "committed" }\'', returnStdout: true)
        def release_url = getJSONValue(release_request, 'release_url')
        sh 'curl -X PATCH --header \'Content-Type: application/json\' --header \'Accept: application/json\' --header \'X-API-Token: ' + XAPI_TOKEN + '\' -d \'{ "release_notes": "None","distribution_group_name":"\'' + TEST_GROUP + '\'"}\' ' + "${BASE_URL}/${release_url}"
      }
    }
  } catch (Exception e) {
    slackSend channel: 'platform-engineers', color: 'danger', message: "HATS Android ${env.BUILD_URL} Failed"
    throw e as java.lang.Throwable
  }
}
