using Beamable.Microservice.SourceGen;
using Beamable.Microservice.SourceGen.Analyzers;
using Beamable.Microservice.SourceGen.Fixers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using System.Threading.Tasks;
using Xunit;
using MicroserviceFederationsConfig = Beamable.Server.MicroserviceFederationsConfig;

namespace Microservice.SourceGen.Tests;

public partial class BeamableSourceGeneratorTests
{
	
	[Fact]
	public async Task Test_Diagnostic_Fed_PlayerInitMustUseDefault()
	{
		const string UserCode = @"
using System.Collections.Generic;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Server;

namespace TestNamespace;

[FederationId(""notdefault"")]
public class {|#0:MyFederation|} : IFederationId {

}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedPlayerInit<MyFederation>
{		
	public Promise<PlayerInitResult> CreatePlayer(Account account, Dictionary<string, string> properties)
    {
        throw new System.NotImplementedException();
    }
}
";
		var cfg = new MicroserviceFederationsConfig() { Federations = new() { { "notdefault", [new() { Interface = "IFederatedPlayerInit" }] } } };
		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationIdMustBeDefault).WithLocation(0)
			.WithArguments("notdefault"));
		
		await ctx.RunAsync();
	}

	[Fact]
	public async Task Test_Diagnostic_Fed_DeclaredFederationMissingFromSourceConfig()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;

namespace TestNamespace;

[FederationId(""my_federation"")]
public class {|#0:MyFederation|} : IFederationId {

}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedLogin<MyFederation>
{
    public Promise<FederatedAuthenticationResponse> Authenticate(string token, string challenge, string solution)
    {
        throw new System.NotImplementedException();
    }
}
";
		var cfg = new MicroserviceFederationsConfig();
		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.DeclaredFederationMissingFromSourceGenConfig)
			.WithLocation(0)
			.WithArguments("SomeUserMicroservice", "my_federation", "IFederatedLogin"));
		
		await ctx.RunAsync();
	}
	
	[Fact]
	public async Task Test_Diagnostic_Fed_SourceFederationInvalidFederationId()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;

namespace TestNamespace;

[Microservice(""some_user_service"")]
public partial class {|#0:SomeUserMicroservice|} : Microservice
{		
}
";
		var cfg = new MicroserviceFederationsConfig() { Federations = new() { { @"my_f!*&@¨&*¨@!*&", [new() { Interface = "IFederatedGameServer" }] } } };

		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationIdInvalidConfigFile)
			.WithLocation(0)
			.WithArguments(@"my_f!*&@¨&*¨@!*&"));
		
		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationCodeGeneratedProperly));
		
		await ctx.RunAsync();
	}
	
	[Fact]
	public async Task Test_Diagnostic_Fed_DeclaredFederationInvalidFederationId()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;
using Beamable.Api.Autogenerated.Models;

namespace TestNamespace;

[FederationId(""123my_f"")]
public class {|#0:MyFederation|} : IFederationId {
}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedGameServer<MyFederation>
{
    public Promise<ServerInfo> CreateGameServer(Lobby lobby)
    {
        throw new System.NotImplementedException();
    }		
}
";
		var cfg = new MicroserviceFederationsConfig() { Federations = new() { { @"123my_f", [new() { Interface = "IFederatedGameServer" }] } } };

		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.DeclaredFederationInvalidFederationId)
			.WithLocation(0)
			.WithArguments("SomeUserMicroservice","123my_f"));
		
		await ctx.RunAsync();
	}
	
	[Fact]
	public async Task Test_Diagnostic_Fed_MustHaveAttribute()
	{
		const string UserCode = @"using Beamable.Server;
using Beamable.Common;

namespace TestNamespace;

public class {|#0:MyFederation|} : IFederationId {
}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedLogin<MyFederation>
{
    public Promise<FederatedAuthenticationResponse> Authenticate(string token, string challenge, string solution)
    {
        throw new System.NotImplementedException();
    }
}";
		var cfg = new MicroserviceFederationsConfig() { Federations = new() };

		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationIdMissingAttribute)
			.WithLocation(0));
		
		await ctx.RunAsync();
	}

	[Fact]
	public async Task Test_Diagnostic_Fed_FederationMissingFromCode()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;

namespace TestNamespace;

[Microservice(""some_user_service"")]
public partial class {|#0:SomeUserMicroservice|} : Microservice
{		
}
";
		var cfg = new MicroserviceFederationsConfig()
		{
			Federations = new()
			{
				{ "hathora", [new() { Interface = "IFederatedGameServer" }] }
			}
		};

		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.ConfiguredFederationMissingFromCode)
			.WithLocation(0).WithArguments("SomeUserMicroservice", "hathora", "IFederatedGameServer"));
		
		await ctx.RunAsync();
	}
	
	[Fact]
	public async Task Test_Diagnostic_Fed_FederationCodeGeneratedProperly_WithFullHandwrittenOverride()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;
using Beamable.Api.Autogenerated.Models;

namespace TestNamespace {

    [FederationId(""hathora"")]
    public class HandwrittenHathoraId : Beamable.Common.IFederationId 
    {
        // nothing
    }

    [Microservice(""some_user_service"")]
    public partial class SomeUserMicroservice : Microservice, IFederatedGameServer<HandwrittenHathoraId>
    {
        public Promise<ServerInfo> CreateGameServer(Lobby lobby)
        {
            throw new System.NotImplementedException();
        }
    }
}
";
		var cfg = new MicroserviceFederationsConfig()
		{
			Federations = new()
			{
				{ "hathora", [new() { Interface = "IFederatedGameServer" }] }
			}
		};

		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationCodeGeneratedProperly));
		
		await ctx.RunAsync();
		
	}
	
	[Fact]
	public async Task Test_Diagnostic_Fed_FederationsDeclaredOnDifferentPartsOfService()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;
using Beamable.Api.Autogenerated.Models;

namespace TestNamespace {

    [FederationId(""hathora"")]
    public class HandwrittenHathoraId : IFederationId
	{
	}

    [Microservice(""some_user_service"")]
    public partial class SomeUserMicroservice : Microservice
    {
    }

    public partial class SomeUserMicroservice : Microservice, IFederatedGameServer<HandwrittenHathoraId>
    {
        public Promise<ServerInfo> CreateGameServer(Lobby lobby)
        {
            throw new System.NotImplementedException();
        }
    }
}
";
		var cfg = new MicroserviceFederationsConfig()
		{
			Federations = new()
			{
				{ "hathora", [new() { Interface = "IFederatedGameServer" }] },
			}
		};

		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationCodeGeneratedProperly));
		
		await ctx.RunAsync();
	}
	
	[Fact]
	public void Test_Diagnostic_Fed_FederationCodeGeneratedProperly_WithPartialHandwrittenOverride()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;

namespace TestNamespace;

[FederationId(""steam"")]
public class HandwrittenSteamId : IFederationId {
}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedGameServer<HandwrittenSteamId>
{		
}
";
		var cfg = new MicroserviceFederationsConfig()
		{
			Federations = new()
			{
				{ "hathora", [new() { Interface = "IFederatedGameServer" }] },
				{ "steam", [new() { Interface = "IFederatedInventory" }, new() { Interface = "IFederatedGameServer" }] },
				{ "discord", [new() { Interface = "IFederatedLogin" }] }
			}
		};

		// We are testing the detection
		PrepareForRun(new[] { cfg }, new[] { UserCode });

		// Run generators and retrieve all results.
		var runResult = Driver.RunGenerators(Compilation).GetRunResult();

		// Assert that we didn't generate the HathoraId IFederationId class
		foreach (GeneratedSourceResult sr in runResult.Results[0].GeneratedSources)
		{
			// Assert we did use the handwritten steam id for any interface declarations we have.
			if (sr.HintName.Contains("steam"))
			{
				Assert.Contains("HandwrittenSteamId", sr.SourceText.ToString());
			}
			
			// Assert we didn't create an id class for the HandwrittenSteamId.
			if (sr.HintName.Contains("FederationIds"))
			{
				Assert.DoesNotContain("SteamId", sr.SourceText.ToString());
			}
		}
		
		
		// Ensure we have a single diagnostic error.
		// Assert.Contains(runResult.Diagnostics, d => d.Descriptor.Equals(Diagnostics.Fed.FederationCodeGeneratedProperly));
	}
	


	[Fact]
	public async Task Test_CodeFixer_Fed_FederationIDMustBeDefault()
	{
		const string UserCode = @"
using System.Collections.Generic;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Server;

namespace TestNamespace;

[FederationId(""notdefault"")]
public class {|#0:MyFederation|} : IFederationId {

}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedPlayerInit<MyFederation>
{		
	public Promise<PlayerInitResult> CreatePlayer(Account account, Dictionary<string, string> properties)
    {
        throw new System.NotImplementedException();
    }
}
";
		
		const string FixedCode = @"
using System.Collections.Generic;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Server;

namespace TestNamespace;

[FederationId(""default"")]
public class {|#0:MyFederation|} : IFederationId {

}

[Microservice(""some_user_service"")]
public partial class {|#1:SomeUserMicroservice|} : Microservice, IFederatedPlayerInit<MyFederation>
{		
	public Promise<PlayerInitResult> CreatePlayer(Account account, Dictionary<string, string> properties)
    {
        throw new System.NotImplementedException();
    }
}
";
		var cfg = new MicroserviceFederationsConfig() { Federations = new() { { "notdefault", [new() { Interface = "IFederatedPlayerInit" }] } } };
		var ctx = new CSharpCodeFixTest<FederationAnalyzer, FederationDefaultIDFixer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode, FixedCode);

		ctx.TestState.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationIdMustBeDefault).WithLocation(0)
			.WithArguments("notdefault"));
		
		ctx.FixedState.ExpectedDiagnostics.Add(
			new DiagnosticResult(Diagnostics.Fed.DeclaredFederationMissingFromSourceGenConfig).WithLocation(0)
				.WithArguments("SomeUserMicroservice", "default", "IFederatedPlayerInit"));
		ctx.FixedState.ExpectedDiagnostics.Add(
			new DiagnosticResult(Diagnostics.Fed.ConfiguredFederationMissingFromCode).WithLocation(1)
				.WithArguments("SomeUserMicroservice", "notdefault", "IFederatedPlayerInit"));
		
		await ctx.RunAsync();
	}
	
	[Fact]
	public async Task Test_CodeFixer_Fed_InvalidFederationID()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;
using Beamable.Api.Autogenerated.Models;

namespace TestNamespace;

[FederationId(""123my_f"")]
public class {|#0:MyFederation|} : IFederationId {
}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedGameServer<MyFederation>
{
    public Promise<ServerInfo> CreateGameServer(Lobby lobby)
    {
        throw new System.NotImplementedException();
    }		
}
";
		
		const string FixedCode = @"
using Beamable.Server;
using Beamable.Common;
using Beamable.Api.Autogenerated.Models;

namespace TestNamespace;

[FederationId(""my_f"")]
public class {|#0:MyFederation|} : IFederationId {
}

[Microservice(""some_user_service"")]
public partial class {|#1:SomeUserMicroservice|} : Microservice, IFederatedGameServer<MyFederation>
{
    public Promise<ServerInfo> CreateGameServer(Lobby lobby)
    {
        throw new System.NotImplementedException();
    }		
}
";
		var cfg = new MicroserviceFederationsConfig() { Federations = new() { { @"123my_f", [new() { Interface = "IFederatedGameServer" }] } } };
		var ctx = new CSharpCodeFixTest<FederationAnalyzer, FederationIdNameFixer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode, FixedCode);

		ctx.TestState.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.DeclaredFederationInvalidFederationId)
			.WithLocation(0)
			.WithArguments("SomeUserMicroservice","123my_f"));
		
		ctx.FixedState.ExpectedDiagnostics.Add(
			new DiagnosticResult(Diagnostics.Fed.DeclaredFederationMissingFromSourceGenConfig).WithLocation(0)
				.WithArguments("SomeUserMicroservice", "my_f", "IFederatedGameServer"));
		ctx.FixedState.ExpectedDiagnostics.Add(
			new DiagnosticResult(Diagnostics.Fed.FederationIdInvalidConfigFile).WithLocation(1)
				.WithArguments("123my_f"));
		
		await ctx.RunAsync();
	}

	[Fact]
	public async Task Test_CodeFixer_Fed_FederationNotFoundInCode_FederationDefaultFixer()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;

namespace TestNamespace;

[Microservice(""some_user_service"")]
public partial class {|#0:SomeUserMicroservice|} : Microservice
{		
}
";
		const string FixedCode = @"
using Beamable.Server;
using Beamable.Common;

namespace TestNamespace;

#pragma warning disable BEAM_FED_O002
// TODO: Remove this ID by running `dotnet beam fed remove SomeUserMicroservice my_federation IFederatedGameServer` from your project's root directory.

[Microservice(""some_user_service"")]
public partial class {|#0:SomeUserMicroservice|} : Microservice
{		
}
";
		
		var cfg = new MicroserviceFederationsConfig() { Federations = new() { { @"my_federation", [new() { Interface = "IFederatedGameServer" }] } } };

		var ctx = new CSharpCodeFixTest<FederationAnalyzer, FederationDefaultFixer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode, FixedCode);

		ctx.TestState.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.ConfiguredFederationMissingFromCode)
			.WithLocation(0).WithArguments("SomeUserMicroservice", "my_federation", "IFederatedGameServer"));
		
		await ctx.RunAsync();
	}
	
	[Fact]
	public async Task Test_CodeFixer_Fed_FederationNotFoundInCode_CreateNewFederationIDAndImplementInterfaceFixer()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;

namespace TestNamespace;

[Microservice(""some_user_service"")]
public partial class {|#0:SomeUserMicroservice|} : Microservice
{
	public Promise<ServerInfo> CreateGameServer(Lobby lobby)
    {
        throw new System.NotImplementedException();
    }
}
";
		const string FixedCode = @"
using Beamable.Server;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;

namespace TestNamespace;
[FederationId(""my_federation"")]
public class My_FederationFederation : IFederationId
{
}
[Microservice(""some_user_service"")]
public partial class {|#0:SomeUserMicroservice|} : Microservice, IFederatedGameServer<My_FederationFederation>
{
    public Promise<ServerInfo> CreateGameServer(Lobby lobby)
    {
        throw new System.NotImplementedException();
    }
}
";
		
		var cfg = new MicroserviceFederationsConfig() { Federations = new() { { @"my_federation", [new() { Interface = "IFederatedGameServer" }] } } };

		var ctx = new CSharpCodeFixTest<FederationAnalyzer, FederationMissingFromCodeFixer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode, FixedCode);

		ctx.TestState.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.ConfiguredFederationMissingFromCode)
			.WithLocation(0).WithArguments("SomeUserMicroservice", "my_federation", "IFederatedGameServer"));
		
		ctx.FixedState.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationCodeGeneratedProperly));
		
		await ctx.RunAsync();
	}
	
	[Fact]
	public async Task Test_CodeFixer_Fed_FederationNotFoundInConfig_RemoveFederationInterface()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;

namespace TestNamespace;
[FederationId(""MyFederation"")]
public class {|#0:MyFederation|} : IFederationId
{
}


[Microservice(""SomeUserMicroservice"")]
public class SomeUserMicroservice : Microservice, IFederatedLogin<MyFederation>
{
    public Promise<FederatedAuthenticationResponse> Authenticate(string token, string challenge, string solution)
    {
        throw new System.NotImplementedException();
    }
}
";
		const string FixedCode = @"
using Beamable.Server;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;

namespace TestNamespace;
[FederationId(""MyFederation"")]
public class {|#0:MyFederation|} : IFederationId
{
}


[Microservice(""SomeUserMicroservice"")]
public class SomeUserMicroservice : Microservice
{
    public Promise<FederatedAuthenticationResponse> Authenticate(string token, string challenge, string solution)
    {
        throw new System.NotImplementedException();
    }
}
";
		
		var cfg = new MicroserviceFederationsConfig();

		var ctx = new CSharpCodeFixTest<FederationAnalyzer, FederationMissingFromSourceGenFixer, DefaultVerifier>();
		
		PrepareForRun(ctx, cfg, UserCode, FixedCode);
		ctx.NumberOfFixAllIterations = 1;
		ctx.NumberOfFixAllInDocumentIterations = 1;
		ctx.NumberOfFixAllInProjectIterations = 1;

		ctx.TestState.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.DeclaredFederationMissingFromSourceGenConfig)
			.WithLocation(0).WithArguments("SomeUserMicroservice", "MyFederation", "IFederatedLogin"));
		
		ctx.FixedState.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationCodeGeneratedProperly));
		
		await ctx.RunAsync();
	}
	
}
