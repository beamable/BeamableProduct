using Beamable.Microservice.SourceGen;
using Beamable.Microservice.SourceGen.Analyzers;
using Beamable.Microservice.SourceGen.Fixers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;
using System.Threading.Tasks;
using Xunit;
using MicroserviceFederationsConfig = Beamable.Server.MicroserviceFederationsConfig;

namespace Microservice.SourceGen.Tests;

public partial class BeamableSourceGeneratorTests
{
	
	[Fact]
	public async Task Test_Diagnostic_Fed_PlayerInitMustUseDefault()
	{
		const string UserCode = @"
using System.Collections.Generic;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Server;

namespace TestNamespace;

[FederationId(""notdefault"")]
public class {|#0:MyFederation|} : IFederationId {

}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedPlayerInit<MyFederation>
{		
	public Promise<PlayerInitResult> CreatePlayer(Account account, Dictionary<string, string> properties)
    {
        throw new System.NotImplementedException();
    }
}
";
		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationIdMustBeDefault).WithLocation(0)
			.WithArguments("notdefault"));
		
		await ctx.RunAsync();
	}

	
	[Fact]
	public async Task Test_Diagnostic_Fed_DeclaredFederationInvalidFederationId()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;
using Beamable.Api.Autogenerated.Models;

namespace TestNamespace;

[FederationId(""123my_f"")]
public class {|#0:MyFederation|} : IFederationId {
}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedGameServer<MyFederation>
{
    public Promise<ServerInfo> CreateGameServer(Lobby lobby)
    {
        throw new System.NotImplementedException();
    }		
}
";
		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.DeclaredFederationInvalidFederationId)
			.WithLocation(0)
			.WithArguments("SomeUserMicroservice","123my_f"));
		
		await ctx.RunAsync();
	}
	
	[Fact]
	public async Task Test_Diagnostic_Fed_MustHaveAttribute()
	{
		const string UserCode = @"using Beamable.Server;
using Beamable.Common;

namespace TestNamespace;

public class {|#0:MyFederation|} : IFederationId {
}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedLogin<MyFederation>
{
    public Promise<FederatedAuthenticationResponse> Authenticate(string token, string challenge, string solution)
    {
        throw new System.NotImplementedException();
    }
}";
		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationIdMissingAttribute)
			.WithLocation(0));
		
		await ctx.RunAsync();
	}
	
	[Fact]
	public async Task Test_Diagnostic_Fed_FederationCodeGeneratedProperly_WithFullHandwrittenOverride()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;
using Beamable.Api.Autogenerated.Models;

namespace TestNamespace {

    [FederationId(""hathora"")]
    public class HandwrittenHathoraId : Beamable.Common.IFederationId 
    {
        // nothing
    }

    [Microservice(""some_user_service"")]
    public partial class SomeUserMicroservice : Microservice, IFederatedGameServer<HandwrittenHathoraId>
    {
        public Promise<ServerInfo> CreateGameServer(Lobby lobby)
        {
            throw new System.NotImplementedException();
        }
    }
}
";
		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationCodeGeneratedProperly));
		
		await ctx.RunAsync();
		
	}
	
	[Fact]
	public async Task Test_Diagnostic_Fed_FederationsDeclaredOnDifferentPartsOfService()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;
using Beamable.Api.Autogenerated.Models;

namespace TestNamespace {

    [FederationId(""hathora"")]
    public class HandwrittenHathoraId : IFederationId
	{
	}

    [Microservice(""some_user_service"")]
    public partial class SomeUserMicroservice : Microservice
    {
    }

    public partial class SomeUserMicroservice : Microservice, IFederatedGameServer<HandwrittenHathoraId>
    {
        public Promise<ServerInfo> CreateGameServer(Lobby lobby)
        {
            throw new System.NotImplementedException();
        }
    }
}
";
		var ctx = new CSharpAnalyzerTest<FederationAnalyzer, DefaultVerifier>();
		
		PrepareForRun(ctx, UserCode);

		ctx.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationCodeGeneratedProperly));
		
		await ctx.RunAsync();
	}
	
	[Fact]
	public async Task Test_CodeFixer_Fed_FederationIDMustBeDefault()
	{
		const string UserCode = @"
using System.Collections.Generic;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Server;

namespace TestNamespace;

[FederationId(""notdefault"")]
public class {|#0:MyFederation|} : IFederationId {

}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedPlayerInit<MyFederation>
{		
	public Promise<PlayerInitResult> CreatePlayer(Account account, Dictionary<string, string> properties)
    {
        throw new System.NotImplementedException();
    }
}
";
		
		const string FixedCode = @"
using System.Collections.Generic;
using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Server;

namespace TestNamespace;

[FederationId(""default"")]
public class MyFederation : IFederationId {

}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedPlayerInit<MyFederation>
{		
	public Promise<PlayerInitResult> CreatePlayer(Account account, Dictionary<string, string> properties)
    {
        throw new System.NotImplementedException();
    }
}
";
		var ctx = new CSharpCodeFixTest<FederationAnalyzer, FederationDefaultIDFixer, DefaultVerifier>();
		
		PrepareForRun(ctx, UserCode, FixedCode);

		ctx.TestState.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationIdMustBeDefault).WithLocation(0)
			.WithArguments("notdefault"));
		
		ctx.FixedState.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationCodeGeneratedProperly));
		
		await ctx.RunAsync();
	}
	
	[Fact]
	public async Task Test_CodeFixer_Fed_InvalidFederationID()
	{
		const string UserCode = @"
using Beamable.Server;
using Beamable.Common;
using Beamable.Api.Autogenerated.Models;

namespace TestNamespace;

[FederationId(""123my_f"")]
public class {|#0:MyFederation|} : IFederationId {
}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedGameServer<MyFederation>
{
    public Promise<ServerInfo> CreateGameServer(Lobby lobby)
    {
        throw new System.NotImplementedException();
    }		
}
";
		
		const string FixedCode = @"
using Beamable.Server;
using Beamable.Common;
using Beamable.Api.Autogenerated.Models;

namespace TestNamespace;

[FederationId(""my_f"")]
public class MyFederation : IFederationId {
}

[Microservice(""some_user_service"")]
public partial class SomeUserMicroservice : Microservice, IFederatedGameServer<MyFederation>
{
    public Promise<ServerInfo> CreateGameServer(Lobby lobby)
    {
        throw new System.NotImplementedException();
    }		
}
";
		var ctx = new CSharpCodeFixTest<FederationAnalyzer, FederationIdNameFixer, DefaultVerifier>();
		
		PrepareForRun(ctx, UserCode, FixedCode);

		ctx.TestState.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.DeclaredFederationInvalidFederationId)
			.WithLocation(0)
			.WithArguments("SomeUserMicroservice","123my_f"));
		
		ctx.FixedState.ExpectedDiagnostics.Add(new DiagnosticResult(Diagnostics.Fed.FederationCodeGeneratedProperly));
		
		await ctx.RunAsync();
	}
}
