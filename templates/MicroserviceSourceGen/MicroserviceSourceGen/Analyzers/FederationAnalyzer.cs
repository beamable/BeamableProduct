using Beamable.Api.Autogenerated.Models;
using Beamable.Common;
using Beamable.Server;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.OpenApi.Extensions;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;

namespace Beamable.Microservice.SourceGen.Analyzers;


/// <summary>
/// This class is responsible for Analyzing the C#MS code and reporting Diagnostics for it
/// The diagnostics generated by this class will appear on both IDE Execution and during build time.
/// </summary>
[DiagnosticAnalyzer(LanguageNames.CSharp)]
public class FederationAnalyzer : DiagnosticAnalyzer
{
	public const string FEDERATION_ATTRIBUTE_NAME = "FederationId";

	public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics => ImmutableArray.Create(
		Diagnostics.BeamVerboseDescriptor, Diagnostics.BeamExceptionDescriptor,
		Diagnostics.Fed.FederationIdMissingAttribute, Diagnostics.Fed.DeclaredFederationInvalidFederationId,
		Diagnostics.Fed.FederationIdMustBeDefault, Diagnostics.Fed.FederationCodeGeneratedProperly);
	
	public override void Initialize(AnalysisContext context)
	{
		context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);
		context.EnableConcurrentExecution();
		context.RegisterSymbolAction(AnalyzeForInvalidFederations, SymbolKind.NamedType);
	}
	
	private void AnalyzeForInvalidFederations(SymbolAnalysisContext context)
	{
		var classSymbol = (INamedTypeSymbol)context.Symbol;
		if (classSymbol.BaseType?.Name != nameof(Server.Microservice))
		{
			return;
		}
		var classSyntax = (ClassDeclarationSyntax) classSymbol.DeclaringSyntaxReferences.FirstOrDefault(reference =>
				reference.GetSyntax() is ClassDeclarationSyntax).GetSyntax();
		var location = Diagnostics.GetValidLocation(classSyntax.Identifier.GetLocation(), context.Compilation);
		List<FederationInfo> federations = GetFederationInterfaces(classSymbol, context.ReportDiagnostic, location, context.Compilation);
		if (ValidateFederations(context.ReportDiagnostic, context.Compilation, classSymbol.Name, location, federations))
		{
			var federationCodeGenSuccess = Diagnostic.Create(Diagnostics.Fed.FederationCodeGeneratedProperly, Location.None);
			context.ReportDiagnostic(federationCodeGenSuccess);
		}
	}


	public static List<FederationInfo> GetFederationInterfaces(INamedTypeSymbol classSymbol, Action<Diagnostic> reportDiagnostic, Location location, Compilation compilation)
	{
		List<FederationInfo> federations = new();

		string classInterfaces = string.Join(", ", classSymbol.Interfaces.Select(item => item.ToDisplayString(SymbolDisplayFormat.CSharpShortErrorMessageFormat)));
		reportDiagnostic?.Invoke(Diagnostics.GetVerbose(nameof(GetFederationInterfaces),
			$"Finding federations for class: {classSymbol.ToDisplayString(SymbolDisplayFormat.CSharpShortErrorMessageFormat)}. This class contains the following interfaces: {classInterfaces}", location,
			compilation));
		foreach (INamedTypeSymbol symbol in classSymbol.Interfaces)
		{
			if (!symbol.Interfaces.Any(it => it.Name == nameof(IFederation)))
			{
				continue;
			}

			string federationInterfaceName = symbol.Name;

			// Find the first type arg of the federation interface that implements IFederationId
			ITypeSymbol federationIdType = symbol.TypeArguments.First(t => t.Interfaces.Any(typeArgInterface =>
				typeArgInterface.Name is nameof(IFederationId) or nameof(IThirdPartyCloudIdentity)));
			string className = federationIdType.Name;

			AttributeData fedAttribute = federationIdType
				.GetAttributes()
				.FirstOrDefault(a => a?.AttributeClass?.Name == nameof(FederationIdAttribute));

			TypedConstant? fedValue = fedAttribute?.ConstructorArguments.FirstOrDefault();
			string id = fedValue?.Value?.ToString();

			federations.Add(new FederationInfo(
				id!,
				className,
				new FederationInstanceConfig() { Interface = federationInterfaceName },
				federationIdType.Locations[0]
			));
		}

		return federations;
	}

	private static bool ValidateFederations(Action<Diagnostic> reportDiagnostic, Compilation compilation, string microserviceName, Location microserviceLocation, List<FederationInfo> federationInfos)
	{
		bool isValid = true;
		
		foreach (var fed in federationInfos)
		{
			Location diagnosticLocation = Diagnostics.GetValidLocation(fed.Location, compilation, microserviceLocation);

			reportDiagnostic?.Invoke(Diagnostics.GetVerbose(nameof(ValidateFederations),
				$"Validating federation {fed.ClassName}. ID: {fed.Id}. Interface: {fed.Federation.Interface}", diagnosticLocation, compilation));
			
			if (fed.Id == null)
			{
				var error = Diagnostic.Create(Diagnostics.Fed.FederationIdMissingAttribute, diagnosticLocation);
				reportDiagnostic(error);
				isValid = false;
			}
			else if (fed.Federation.Interface == FederationType.IFederatedPlayerInit.GetDisplayName())
			{
				// Only one IFederatedPlayerInit federation can exit and its ID must be "default". 
				if (fed.Id != "default")
				{
					var error = Diagnostic.Create(Diagnostics.Fed.FederationIdMustBeDefault, diagnosticLocation, fed.Id);
					reportDiagnostic(error);
					isValid = false;
				}
			}
			else if (!ValidateFederationId(fed.Id))
			{
				var error = Diagnostic.Create(Diagnostics.Fed.DeclaredFederationInvalidFederationId,
					diagnosticLocation, microserviceName, fed.Id);
				reportDiagnostic(error);
				isValid = false;
			}
		}
		return isValid;
	}
	
	
	/// <summary>
	/// <para>
	///  First digit can't be a number
	///  It can only contain Alphanumeric or "_" chars
	/// </para>
	/// </summary>
	/// <param name="id">The federation id that will be validated</param>
	/// <returns></returns>
	public static bool ValidateFederationId(string id)
	{
		if (string.IsNullOrEmpty(id)) return false;
		var isValid = true;
		for (int charIdx = 0; charIdx < id.Length; charIdx++)
		{
			var currChar = id[charIdx];
			if (charIdx == 0)
			{
				isValid &= char.IsLetter(currChar);
			}
			else
			{
				isValid &= char.IsLetterOrDigit(currChar) || currChar.Equals('_');
			}
		}

		return isValid;
	}
	
}
